/* 
 * Location Intelligence APIs
 *
 * Incorporate our extensive geodata into everyday applications, business processes and workflows.
 *
 * OpenAPI spec version: 4.6.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using pb.locationIntelligence.Client;
using pb.locationIntelligence.Model;

namespace pb.locationIntelligence.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILIAPIGeoEnrichServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Address By Location.
        /// </summary>
        /// <remarks>
        /// This service accepts longitude and latitude as input and returns an address for that location.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as feet, kilometers, miles or meters. (optional)</param>
        /// <returns>Locations</returns>
        Locations GetAddress (string latitude, string longitude, string searchRadius = null, string searchRadiusUnit = null);

        /// <summary>
        /// Address By Location.
        /// </summary>
        /// <remarks>
        /// This service accepts longitude and latitude as input and returns an address for that location.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as feet, kilometers, miles or meters. (optional)</param>
        /// <returns>ApiResponse of Locations</returns>
        ApiResponse<Locations> GetAddressWithHttpInfo (string latitude, string longitude, string searchRadius = null, string searchRadiusUnit = null);
        /// <summary>
        /// Points Of Interest By Location.
        /// </summary>
        /// <remarks>
        /// Identifies and retrieves Points of Interest that exist around a specific location (ordered by distance from the location).
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="brandName">Specifies the name of the brand to be searched. Also performs search on partially specified brand names. (optional)</param>
        /// <param name="category">Specific Category/Categories for which the POI search is performed. (Categories 10020102,10020103 are for Chinese and Italian Restaurants .https://developer2.pitneybowes.com/docs/location-intelligence/v1/en/poicategory/EightDigitPOICategoryCodes.xlsx  (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="searchDataset">The datasets upon which the POI search can be performed. (optional)</param>
        /// <param name="searchPriority">Search order of POI datasets mentioned in searchDataset. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="mode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time.Allowed values driving and walking (optional)</param>
        /// <returns>PoiByLocation</returns>
        PoiByLocation GetEntityByLocation (string longitude, string latitude, string brandName = null, string category = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string searchDataset = null, string searchPriority = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string mode = null);

        /// <summary>
        /// Points Of Interest By Location.
        /// </summary>
        /// <remarks>
        /// Identifies and retrieves Points of Interest that exist around a specific location (ordered by distance from the location).
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="brandName">Specifies the name of the brand to be searched. Also performs search on partially specified brand names. (optional)</param>
        /// <param name="category">Specific Category/Categories for which the POI search is performed. (Categories 10020102,10020103 are for Chinese and Italian Restaurants .https://developer2.pitneybowes.com/docs/location-intelligence/v1/en/poicategory/EightDigitPOICategoryCodes.xlsx  (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="searchDataset">The datasets upon which the POI search can be performed. (optional)</param>
        /// <param name="searchPriority">Search order of POI datasets mentioned in searchDataset. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="mode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time.Allowed values driving and walking (optional)</param>
        /// <returns>ApiResponse of PoiByLocation</returns>
        ApiResponse<PoiByLocation> GetEntityByLocationWithHttpInfo (string longitude, string latitude, string brandName = null, string category = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string searchDataset = null, string searchPriority = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string mode = null);
        /// <summary>
        /// Place By Location.
        /// </summary>
        /// <remarks>
        /// Identifies and retrieves the nearest neighborhood around a specific location. This GeoEnrich service accepts latitude &amp; longitude as input and returns a place name.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="levelHint">Numeric code of geographic hierarchy level which is classified at six levels.Allowed values 1,2,3,4,5,6 (optional)</param>
        /// <returns>PlaceByLocations</returns>
        PlaceByLocations GetPlaceByLocation (string longitude, string latitude, string levelHint = null);

        /// <summary>
        /// Place By Location.
        /// </summary>
        /// <remarks>
        /// Identifies and retrieves the nearest neighborhood around a specific location. This GeoEnrich service accepts latitude &amp; longitude as input and returns a place name.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="levelHint">Numeric code of geographic hierarchy level which is classified at six levels.Allowed values 1,2,3,4,5,6 (optional)</param>
        /// <returns>ApiResponse of PlaceByLocations</returns>
        ApiResponse<PlaceByLocations> GetPlaceByLocationWithHttpInfo (string longitude, string latitude, string levelHint = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Address By Location.
        /// </summary>
        /// <remarks>
        /// This service accepts longitude and latitude as input and returns an address for that location.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as feet, kilometers, miles or meters. (optional)</param>
        /// <returns>Task of Locations</returns>
        System.Threading.Tasks.Task<Locations> GetAddressAsync (string latitude, string longitude, string searchRadius = null, string searchRadiusUnit = null);

        /// <summary>
        /// Address By Location.
        /// </summary>
        /// <remarks>
        /// This service accepts longitude and latitude as input and returns an address for that location.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as feet, kilometers, miles or meters. (optional)</param>
        /// <returns>Task of ApiResponse (Locations)</returns>
        System.Threading.Tasks.Task<ApiResponse<Locations>> GetAddressAsyncWithHttpInfo (string latitude, string longitude, string searchRadius = null, string searchRadiusUnit = null);
        /// <summary>
        /// Points Of Interest By Location.
        /// </summary>
        /// <remarks>
        /// Identifies and retrieves Points of Interest that exist around a specific location (ordered by distance from the location).
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="brandName">Specifies the name of the brand to be searched. Also performs search on partially specified brand names. (optional)</param>
        /// <param name="category">Specific Category/Categories for which the POI search is performed. (Categories 10020102,10020103 are for Chinese and Italian Restaurants .https://developer2.pitneybowes.com/docs/location-intelligence/v1/en/poicategory/EightDigitPOICategoryCodes.xlsx  (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="searchDataset">The datasets upon which the POI search can be performed. (optional)</param>
        /// <param name="searchPriority">Search order of POI datasets mentioned in searchDataset. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="mode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time.Allowed values driving and walking (optional)</param>
        /// <returns>Task of PoiByLocation</returns>
        System.Threading.Tasks.Task<PoiByLocation> GetEntityByLocationAsync (string longitude, string latitude, string brandName = null, string category = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string searchDataset = null, string searchPriority = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string mode = null);

        /// <summary>
        /// Points Of Interest By Location.
        /// </summary>
        /// <remarks>
        /// Identifies and retrieves Points of Interest that exist around a specific location (ordered by distance from the location).
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="brandName">Specifies the name of the brand to be searched. Also performs search on partially specified brand names. (optional)</param>
        /// <param name="category">Specific Category/Categories for which the POI search is performed. (Categories 10020102,10020103 are for Chinese and Italian Restaurants .https://developer2.pitneybowes.com/docs/location-intelligence/v1/en/poicategory/EightDigitPOICategoryCodes.xlsx  (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="searchDataset">The datasets upon which the POI search can be performed. (optional)</param>
        /// <param name="searchPriority">Search order of POI datasets mentioned in searchDataset. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="mode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time.Allowed values driving and walking (optional)</param>
        /// <returns>Task of ApiResponse (PoiByLocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<PoiByLocation>> GetEntityByLocationAsyncWithHttpInfo (string longitude, string latitude, string brandName = null, string category = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string searchDataset = null, string searchPriority = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string mode = null);
        /// <summary>
        /// Place By Location.
        /// </summary>
        /// <remarks>
        /// Identifies and retrieves the nearest neighborhood around a specific location. This GeoEnrich service accepts latitude &amp; longitude as input and returns a place name.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="levelHint">Numeric code of geographic hierarchy level which is classified at six levels.Allowed values 1,2,3,4,5,6 (optional)</param>
        /// <returns>Task of PlaceByLocations</returns>
        System.Threading.Tasks.Task<PlaceByLocations> GetPlaceByLocationAsync (string longitude, string latitude, string levelHint = null);

        /// <summary>
        /// Place By Location.
        /// </summary>
        /// <remarks>
        /// Identifies and retrieves the nearest neighborhood around a specific location. This GeoEnrich service accepts latitude &amp; longitude as input and returns a place name.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="levelHint">Numeric code of geographic hierarchy level which is classified at six levels.Allowed values 1,2,3,4,5,6 (optional)</param>
        /// <returns>Task of ApiResponse (PlaceByLocations)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlaceByLocations>> GetPlaceByLocationAsyncWithHttpInfo (string longitude, string latitude, string levelHint = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LIAPIGeoEnrichServiceApi : ILIAPIGeoEnrichServiceApi
    {
        private pb.locationIntelligence.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LIAPIGeoEnrichServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LIAPIGeoEnrichServiceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = pb.locationIntelligence.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LIAPIGeoEnrichServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LIAPIGeoEnrichServiceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = pb.locationIntelligence.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public pb.locationIntelligence.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Address By Location. This service accepts longitude and latitude as input and returns an address for that location.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as feet, kilometers, miles or meters. (optional)</param>
        /// <returns>Locations</returns>
        public Locations GetAddress (string latitude, string longitude, string searchRadius = null, string searchRadiusUnit = null)
        {
             ApiResponse<Locations> localVarResponse = GetAddressWithHttpInfo(latitude, longitude, searchRadius, searchRadiusUnit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Address By Location. This service accepts longitude and latitude as input and returns an address for that location.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as feet, kilometers, miles or meters. (optional)</param>
        /// <returns>ApiResponse of Locations</returns>
        public ApiResponse< Locations > GetAddressWithHttpInfo (string latitude, string longitude, string searchRadius = null, string searchRadiusUnit = null)
        {
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LIAPIGeoEnrichServiceApi->GetAddress");
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LIAPIGeoEnrichServiceApi->GetAddress");

            var localVarPath = "/geoenrich/v1/address/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Locations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Locations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Locations)));
            
        }

        /// <summary>
        /// Address By Location. This service accepts longitude and latitude as input and returns an address for that location.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as feet, kilometers, miles or meters. (optional)</param>
        /// <returns>Task of Locations</returns>
        public async System.Threading.Tasks.Task<Locations> GetAddressAsync (string latitude, string longitude, string searchRadius = null, string searchRadiusUnit = null)
        {
             ApiResponse<Locations> localVarResponse = await GetAddressAsyncWithHttpInfo(latitude, longitude, searchRadius, searchRadiusUnit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Address By Location. This service accepts longitude and latitude as input and returns an address for that location.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as feet, kilometers, miles or meters. (optional)</param>
        /// <returns>Task of ApiResponse (Locations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Locations>> GetAddressAsyncWithHttpInfo (string latitude, string longitude, string searchRadius = null, string searchRadiusUnit = null)
        {
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LIAPIGeoEnrichServiceApi->GetAddress");
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LIAPIGeoEnrichServiceApi->GetAddress");

            var localVarPath = "/geoenrich/v1/address/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Locations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Locations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Locations)));
            
        }

        /// <summary>
        /// Points Of Interest By Location. Identifies and retrieves Points of Interest that exist around a specific location (ordered by distance from the location).
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="brandName">Specifies the name of the brand to be searched. Also performs search on partially specified brand names. (optional)</param>
        /// <param name="category">Specific Category/Categories for which the POI search is performed. (Categories 10020102,10020103 are for Chinese and Italian Restaurants .https://developer2.pitneybowes.com/docs/location-intelligence/v1/en/poicategory/EightDigitPOICategoryCodes.xlsx  (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="searchDataset">The datasets upon which the POI search can be performed. (optional)</param>
        /// <param name="searchPriority">Search order of POI datasets mentioned in searchDataset. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="mode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time.Allowed values driving and walking (optional)</param>
        /// <returns>PoiByLocation</returns>
        public PoiByLocation GetEntityByLocation (string longitude, string latitude, string brandName = null, string category = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string searchDataset = null, string searchPriority = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string mode = null)
        {
             ApiResponse<PoiByLocation> localVarResponse = GetEntityByLocationWithHttpInfo(longitude, latitude, brandName, category, maxCandidates, searchRadius, searchRadiusUnit, searchDataset, searchPriority, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, mode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Points Of Interest By Location. Identifies and retrieves Points of Interest that exist around a specific location (ordered by distance from the location).
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="brandName">Specifies the name of the brand to be searched. Also performs search on partially specified brand names. (optional)</param>
        /// <param name="category">Specific Category/Categories for which the POI search is performed. (Categories 10020102,10020103 are for Chinese and Italian Restaurants .https://developer2.pitneybowes.com/docs/location-intelligence/v1/en/poicategory/EightDigitPOICategoryCodes.xlsx  (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="searchDataset">The datasets upon which the POI search can be performed. (optional)</param>
        /// <param name="searchPriority">Search order of POI datasets mentioned in searchDataset. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="mode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time.Allowed values driving and walking (optional)</param>
        /// <returns>ApiResponse of PoiByLocation</returns>
        public ApiResponse< PoiByLocation > GetEntityByLocationWithHttpInfo (string longitude, string latitude, string brandName = null, string category = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string searchDataset = null, string searchPriority = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string mode = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LIAPIGeoEnrichServiceApi->GetEntityByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LIAPIGeoEnrichServiceApi->GetEntityByLocation");

            var localVarPath = "/geoenrich/v1/poi/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (brandName != null) localVarQueryParams.Add("brandName", Configuration.ApiClient.ParameterToString(brandName)); // query parameter
            if (category != null) localVarQueryParams.Add("category", Configuration.ApiClient.ParameterToString(category)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (searchDataset != null) localVarQueryParams.Add("searchDataset", Configuration.ApiClient.ParameterToString(searchDataset)); // query parameter
            if (searchPriority != null) localVarQueryParams.Add("searchPriority", Configuration.ApiClient.ParameterToString(searchPriority)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (mode != null) localVarQueryParams.Add("mode", Configuration.ApiClient.ParameterToString(mode)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntityByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PoiByLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PoiByLocation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PoiByLocation)));
            
        }

        /// <summary>
        /// Points Of Interest By Location. Identifies and retrieves Points of Interest that exist around a specific location (ordered by distance from the location).
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="brandName">Specifies the name of the brand to be searched. Also performs search on partially specified brand names. (optional)</param>
        /// <param name="category">Specific Category/Categories for which the POI search is performed. (Categories 10020102,10020103 are for Chinese and Italian Restaurants .https://developer2.pitneybowes.com/docs/location-intelligence/v1/en/poicategory/EightDigitPOICategoryCodes.xlsx  (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="searchDataset">The datasets upon which the POI search can be performed. (optional)</param>
        /// <param name="searchPriority">Search order of POI datasets mentioned in searchDataset. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="mode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time.Allowed values driving and walking (optional)</param>
        /// <returns>Task of PoiByLocation</returns>
        public async System.Threading.Tasks.Task<PoiByLocation> GetEntityByLocationAsync (string longitude, string latitude, string brandName = null, string category = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string searchDataset = null, string searchPriority = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string mode = null)
        {
             ApiResponse<PoiByLocation> localVarResponse = await GetEntityByLocationAsyncWithHttpInfo(longitude, latitude, brandName, category, maxCandidates, searchRadius, searchRadiusUnit, searchDataset, searchPriority, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, mode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Points Of Interest By Location. Identifies and retrieves Points of Interest that exist around a specific location (ordered by distance from the location).
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="brandName">Specifies the name of the brand to be searched. Also performs search on partially specified brand names. (optional)</param>
        /// <param name="category">Specific Category/Categories for which the POI search is performed. (Categories 10020102,10020103 are for Chinese and Italian Restaurants .https://developer2.pitneybowes.com/docs/location-intelligence/v1/en/poicategory/EightDigitPOICategoryCodes.xlsx  (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="searchDataset">The datasets upon which the POI search can be performed. (optional)</param>
        /// <param name="searchPriority">Search order of POI datasets mentioned in searchDataset. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="mode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time.Allowed values driving and walking (optional)</param>
        /// <returns>Task of ApiResponse (PoiByLocation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PoiByLocation>> GetEntityByLocationAsyncWithHttpInfo (string longitude, string latitude, string brandName = null, string category = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string searchDataset = null, string searchPriority = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string mode = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LIAPIGeoEnrichServiceApi->GetEntityByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LIAPIGeoEnrichServiceApi->GetEntityByLocation");

            var localVarPath = "/geoenrich/v1/poi/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (brandName != null) localVarQueryParams.Add("brandName", Configuration.ApiClient.ParameterToString(brandName)); // query parameter
            if (category != null) localVarQueryParams.Add("category", Configuration.ApiClient.ParameterToString(category)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (searchDataset != null) localVarQueryParams.Add("searchDataset", Configuration.ApiClient.ParameterToString(searchDataset)); // query parameter
            if (searchPriority != null) localVarQueryParams.Add("searchPriority", Configuration.ApiClient.ParameterToString(searchPriority)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (mode != null) localVarQueryParams.Add("mode", Configuration.ApiClient.ParameterToString(mode)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntityByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PoiByLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PoiByLocation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PoiByLocation)));
            
        }

        /// <summary>
        /// Place By Location. Identifies and retrieves the nearest neighborhood around a specific location. This GeoEnrich service accepts latitude &amp; longitude as input and returns a place name.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="levelHint">Numeric code of geographic hierarchy level which is classified at six levels.Allowed values 1,2,3,4,5,6 (optional)</param>
        /// <returns>PlaceByLocations</returns>
        public PlaceByLocations GetPlaceByLocation (string longitude, string latitude, string levelHint = null)
        {
             ApiResponse<PlaceByLocations> localVarResponse = GetPlaceByLocationWithHttpInfo(longitude, latitude, levelHint);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Place By Location. Identifies and retrieves the nearest neighborhood around a specific location. This GeoEnrich service accepts latitude &amp; longitude as input and returns a place name.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="levelHint">Numeric code of geographic hierarchy level which is classified at six levels.Allowed values 1,2,3,4,5,6 (optional)</param>
        /// <returns>ApiResponse of PlaceByLocations</returns>
        public ApiResponse< PlaceByLocations > GetPlaceByLocationWithHttpInfo (string longitude, string latitude, string levelHint = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LIAPIGeoEnrichServiceApi->GetPlaceByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LIAPIGeoEnrichServiceApi->GetPlaceByLocation");

            var localVarPath = "/geoenrich/v1/place/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (levelHint != null) localVarQueryParams.Add("levelHint", Configuration.ApiClient.ParameterToString(levelHint)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlaceByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlaceByLocations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PlaceByLocations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlaceByLocations)));
            
        }

        /// <summary>
        /// Place By Location. Identifies and retrieves the nearest neighborhood around a specific location. This GeoEnrich service accepts latitude &amp; longitude as input and returns a place name.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="levelHint">Numeric code of geographic hierarchy level which is classified at six levels.Allowed values 1,2,3,4,5,6 (optional)</param>
        /// <returns>Task of PlaceByLocations</returns>
        public async System.Threading.Tasks.Task<PlaceByLocations> GetPlaceByLocationAsync (string longitude, string latitude, string levelHint = null)
        {
             ApiResponse<PlaceByLocations> localVarResponse = await GetPlaceByLocationAsyncWithHttpInfo(longitude, latitude, levelHint);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Place By Location. Identifies and retrieves the nearest neighborhood around a specific location. This GeoEnrich service accepts latitude &amp; longitude as input and returns a place name.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="levelHint">Numeric code of geographic hierarchy level which is classified at six levels.Allowed values 1,2,3,4,5,6 (optional)</param>
        /// <returns>Task of ApiResponse (PlaceByLocations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlaceByLocations>> GetPlaceByLocationAsyncWithHttpInfo (string longitude, string latitude, string levelHint = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LIAPIGeoEnrichServiceApi->GetPlaceByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LIAPIGeoEnrichServiceApi->GetPlaceByLocation");

            var localVarPath = "/geoenrich/v1/place/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (levelHint != null) localVarQueryParams.Add("levelHint", Configuration.ApiClient.ParameterToString(levelHint)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlaceByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlaceByLocations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PlaceByLocations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlaceByLocations)));
            
        }

    }
}
