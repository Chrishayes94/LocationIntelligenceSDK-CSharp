/* 
 * Location Intelligence APIs
 *
 * Incorporate our extensive geodata into everyday applications, business processes and workflows.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using pb.locationIntelligence.Client;
using pb.locationIntelligence.Model;

namespace pb.locationIntelligence.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILIAPIGeoRiskServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets CrimeRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the crime data or crime indexes for a given address input.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text.</param>
        /// <param name="type">Type of crime like violent crime, property crime, etc., multiple crime type indexes could be requested as comma separated values with &#39;all&#39; as default.) (optional)</param>
        /// <returns>CrimeRiskResponse</returns>
        CrimeRiskResponse GetCrimeRiskByAddress (string address, string type = null);

        /// <summary>
        /// Gets CrimeRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the crime data or crime indexes for a given address input.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text.</param>
        /// <param name="type">Type of crime like violent crime, property crime, etc., multiple crime type indexes could be requested as comma separated values with &#39;all&#39; as default.) (optional)</param>
        /// <returns>ApiResponse of CrimeRiskResponse</returns>
        ApiResponse<CrimeRiskResponse> GetCrimeRiskByAddressWithHttpInfo (string address, string type = null);
        /// <summary>
        /// Gets CrimeRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the crime data or crime indexes for a given location.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="type">Refers to crime type. Valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <returns>CrimeRiskResponse</returns>
        CrimeRiskResponse GetCrimeRiskByLocation (string longitude, string latitude, string type = null);

        /// <summary>
        /// Gets CrimeRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the crime data or crime indexes for a given location.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="type">Refers to crime type. Valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <returns>ApiResponse of CrimeRiskResponse</returns>
        ApiResponse<CrimeRiskResponse> GetCrimeRiskByLocationWithHttpInfo (string longitude, string latitude, string type = null);
        /// <summary>
        /// Gets EarthquakeRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the count of earthquake events for various richter measurements and values for an input address.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <returns>EarthquakeRiskResponse</returns>
        EarthquakeRiskResponse GetEarthquakeRiskByAddress (string address, string richterValue = null);

        /// <summary>
        /// Gets EarthquakeRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the count of earthquake events for various richter measurements and values for an input address.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <returns>ApiResponse of EarthquakeRiskResponse</returns>
        ApiResponse<EarthquakeRiskResponse> GetEarthquakeRiskByAddressWithHttpInfo (string address, string richterValue = null);
        /// <summary>
        /// Gets EarthquakeRiskResponse
        /// </summary>
        /// <remarks>
        /// Gets EarthquakeRiskResponse
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <returns>EarthquakeRiskResponse</returns>
        EarthquakeRiskResponse GetEarthquakeRiskByLocation (string longitude, string latitude, string richterValue = null);

        /// <summary>
        /// Gets EarthquakeRiskResponse
        /// </summary>
        /// <remarks>
        /// Gets EarthquakeRiskResponse
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <returns>ApiResponse of EarthquakeRiskResponse</returns>
        ApiResponse<EarthquakeRiskResponse> GetEarthquakeRiskByLocationWithHttpInfo (string longitude, string latitude, string richterValue = null);
        /// <summary>
        /// Gets FireRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the fire data based on address input.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <returns>FireRiskResponse</returns>
        FireRiskResponse GetFireRiskByAddress (string address);

        /// <summary>
        /// Gets FireRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the fire data based on address input.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <returns>ApiResponse of FireRiskResponse</returns>
        ApiResponse<FireRiskResponse> GetFireRiskByAddressWithHttpInfo (string address);
        /// <summary>
        /// Gets FireRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the fire data based on location input.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <returns>FireRiskResponse</returns>
        FireRiskResponse GetFireRiskByLocation (string longitude, string latitude);

        /// <summary>
        /// Gets FireRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the fire data based on location input.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <returns>ApiResponse of FireRiskResponse</returns>
        ApiResponse<FireRiskResponse> GetFireRiskByLocationWithHttpInfo (string longitude, string latitude);
        /// <summary>
        /// Gets FireStationResponse
        /// </summary>
        /// <remarks>
        /// Returns the nearest Firestations from an input address.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sort the fire stations results by either travel time or travel distance (nearest first). Default sorting is by travel time. (optional)</param>
        /// <returns>FireStations</returns>
        FireStations GetFireStationByAddress (string address, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null);

        /// <summary>
        /// Gets FireStationResponse
        /// </summary>
        /// <remarks>
        /// Returns the nearest Firestations from an input address.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sort the fire stations results by either travel time or travel distance (nearest first). Default sorting is by travel time. (optional)</param>
        /// <returns>ApiResponse of FireStations</returns>
        ApiResponse<FireStations> GetFireStationByAddressWithHttpInfo (string address, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null);
        /// <summary>
        /// Gets FireStationResponse
        /// </summary>
        /// <remarks>
        /// Returns the nearest Firestations from an input location.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3. The retrieved fire stations are distance ordered from the specified location. Maximum of 5 fire stations can be retrieved. (optional)</param>
        /// <param name="travelTime">Maximum travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sorting of fire stations in result by travel time/distance (nearest first from input location). (optional)</param>
        /// <returns>FireStations</returns>
        FireStations GetFireStationByLocation (string longitude, string latitude, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null);

        /// <summary>
        /// Gets FireStationResponse
        /// </summary>
        /// <remarks>
        /// Returns the nearest Firestations from an input location.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3. The retrieved fire stations are distance ordered from the specified location. Maximum of 5 fire stations can be retrieved. (optional)</param>
        /// <param name="travelTime">Maximum travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sorting of fire stations in result by travel time/distance (nearest first from input location). (optional)</param>
        /// <returns>ApiResponse of FireStations</returns>
        ApiResponse<FireStations> GetFireStationByLocationWithHttpInfo (string longitude, string latitude, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null);
        /// <summary>
        /// Gets FloodRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the Flood Risk data for flood zones based on an address.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-text Address</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. (optional)</param>
        /// <returns>FloodRiskResponse</returns>
        FloodRiskResponse GetFloodRiskByAddress (string address, string includeZoneDesc = null);

        /// <summary>
        /// Gets FloodRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the Flood Risk data for flood zones based on an address.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-text Address</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. (optional)</param>
        /// <returns>ApiResponse of FloodRiskResponse</returns>
        ApiResponse<FloodRiskResponse> GetFloodRiskByAddressWithHttpInfo (string address, string includeZoneDesc = null);
        /// <summary>
        /// Gets FloodRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the Flood Risk data for Flood Zones and Base Flood Elevation, based on location.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. Default: &#39;Y&#39; (optional)</param>
        /// <returns>FloodRiskResponse</returns>
        FloodRiskResponse GetFloodRiskByLocation (string longitude, string latitude, string includeZoneDesc = null);

        /// <summary>
        /// Gets FloodRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the Flood Risk data for Flood Zones and Base Flood Elevation, based on location.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. Default: &#39;Y&#39; (optional)</param>
        /// <returns>ApiResponse of FloodRiskResponse</returns>
        ApiResponse<FloodRiskResponse> GetFloodRiskByLocationWithHttpInfo (string longitude, string latitude, string includeZoneDesc = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets CrimeRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the crime data or crime indexes for a given address input.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text.</param>
        /// <param name="type">Type of crime like violent crime, property crime, etc., multiple crime type indexes could be requested as comma separated values with &#39;all&#39; as default.) (optional)</param>
        /// <returns>Task of CrimeRiskResponse</returns>
        System.Threading.Tasks.Task<CrimeRiskResponse> GetCrimeRiskByAddressAsync (string address, string type = null);

        /// <summary>
        /// Gets CrimeRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the crime data or crime indexes for a given address input.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text.</param>
        /// <param name="type">Type of crime like violent crime, property crime, etc., multiple crime type indexes could be requested as comma separated values with &#39;all&#39; as default.) (optional)</param>
        /// <returns>Task of ApiResponse (CrimeRiskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CrimeRiskResponse>> GetCrimeRiskByAddressAsyncWithHttpInfo (string address, string type = null);
        /// <summary>
        /// Gets CrimeRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the crime data or crime indexes for a given location.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="type">Refers to crime type. Valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <returns>Task of CrimeRiskResponse</returns>
        System.Threading.Tasks.Task<CrimeRiskResponse> GetCrimeRiskByLocationAsync (string longitude, string latitude, string type = null);

        /// <summary>
        /// Gets CrimeRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the crime data or crime indexes for a given location.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="type">Refers to crime type. Valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <returns>Task of ApiResponse (CrimeRiskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CrimeRiskResponse>> GetCrimeRiskByLocationAsyncWithHttpInfo (string longitude, string latitude, string type = null);
        /// <summary>
        /// Gets EarthquakeRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the count of earthquake events for various richter measurements and values for an input address.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <returns>Task of EarthquakeRiskResponse</returns>
        System.Threading.Tasks.Task<EarthquakeRiskResponse> GetEarthquakeRiskByAddressAsync (string address, string richterValue = null);

        /// <summary>
        /// Gets EarthquakeRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the count of earthquake events for various richter measurements and values for an input address.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <returns>Task of ApiResponse (EarthquakeRiskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EarthquakeRiskResponse>> GetEarthquakeRiskByAddressAsyncWithHttpInfo (string address, string richterValue = null);
        /// <summary>
        /// Gets EarthquakeRiskResponse
        /// </summary>
        /// <remarks>
        /// Gets EarthquakeRiskResponse
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <returns>Task of EarthquakeRiskResponse</returns>
        System.Threading.Tasks.Task<EarthquakeRiskResponse> GetEarthquakeRiskByLocationAsync (string longitude, string latitude, string richterValue = null);

        /// <summary>
        /// Gets EarthquakeRiskResponse
        /// </summary>
        /// <remarks>
        /// Gets EarthquakeRiskResponse
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <returns>Task of ApiResponse (EarthquakeRiskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EarthquakeRiskResponse>> GetEarthquakeRiskByLocationAsyncWithHttpInfo (string longitude, string latitude, string richterValue = null);
        /// <summary>
        /// Gets FireRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the fire data based on address input.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <returns>Task of FireRiskResponse</returns>
        System.Threading.Tasks.Task<FireRiskResponse> GetFireRiskByAddressAsync (string address);

        /// <summary>
        /// Gets FireRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the fire data based on address input.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <returns>Task of ApiResponse (FireRiskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireRiskResponse>> GetFireRiskByAddressAsyncWithHttpInfo (string address);
        /// <summary>
        /// Gets FireRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the fire data based on location input.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <returns>Task of FireRiskResponse</returns>
        System.Threading.Tasks.Task<FireRiskResponse> GetFireRiskByLocationAsync (string longitude, string latitude);

        /// <summary>
        /// Gets FireRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the fire data based on location input.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <returns>Task of ApiResponse (FireRiskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireRiskResponse>> GetFireRiskByLocationAsyncWithHttpInfo (string longitude, string latitude);
        /// <summary>
        /// Gets FireStationResponse
        /// </summary>
        /// <remarks>
        /// Returns the nearest Firestations from an input address.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sort the fire stations results by either travel time or travel distance (nearest first). Default sorting is by travel time. (optional)</param>
        /// <returns>Task of FireStations</returns>
        System.Threading.Tasks.Task<FireStations> GetFireStationByAddressAsync (string address, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null);

        /// <summary>
        /// Gets FireStationResponse
        /// </summary>
        /// <remarks>
        /// Returns the nearest Firestations from an input address.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sort the fire stations results by either travel time or travel distance (nearest first). Default sorting is by travel time. (optional)</param>
        /// <returns>Task of ApiResponse (FireStations)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireStations>> GetFireStationByAddressAsyncWithHttpInfo (string address, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null);
        /// <summary>
        /// Gets FireStationResponse
        /// </summary>
        /// <remarks>
        /// Returns the nearest Firestations from an input location.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3. The retrieved fire stations are distance ordered from the specified location. Maximum of 5 fire stations can be retrieved. (optional)</param>
        /// <param name="travelTime">Maximum travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sorting of fire stations in result by travel time/distance (nearest first from input location). (optional)</param>
        /// <returns>Task of FireStations</returns>
        System.Threading.Tasks.Task<FireStations> GetFireStationByLocationAsync (string longitude, string latitude, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null);

        /// <summary>
        /// Gets FireStationResponse
        /// </summary>
        /// <remarks>
        /// Returns the nearest Firestations from an input location.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3. The retrieved fire stations are distance ordered from the specified location. Maximum of 5 fire stations can be retrieved. (optional)</param>
        /// <param name="travelTime">Maximum travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sorting of fire stations in result by travel time/distance (nearest first from input location). (optional)</param>
        /// <returns>Task of ApiResponse (FireStations)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireStations>> GetFireStationByLocationAsyncWithHttpInfo (string longitude, string latitude, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null);
        /// <summary>
        /// Gets FloodRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the Flood Risk data for flood zones based on an address.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-text Address</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. (optional)</param>
        /// <returns>Task of FloodRiskResponse</returns>
        System.Threading.Tasks.Task<FloodRiskResponse> GetFloodRiskByAddressAsync (string address, string includeZoneDesc = null);

        /// <summary>
        /// Gets FloodRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the Flood Risk data for flood zones based on an address.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-text Address</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. (optional)</param>
        /// <returns>Task of ApiResponse (FloodRiskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FloodRiskResponse>> GetFloodRiskByAddressAsyncWithHttpInfo (string address, string includeZoneDesc = null);
        /// <summary>
        /// Gets FloodRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the Flood Risk data for Flood Zones and Base Flood Elevation, based on location.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. Default: &#39;Y&#39; (optional)</param>
        /// <returns>Task of FloodRiskResponse</returns>
        System.Threading.Tasks.Task<FloodRiskResponse> GetFloodRiskByLocationAsync (string longitude, string latitude, string includeZoneDesc = null);

        /// <summary>
        /// Gets FloodRiskResponse
        /// </summary>
        /// <remarks>
        /// Returns the Flood Risk data for Flood Zones and Base Flood Elevation, based on location.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. Default: &#39;Y&#39; (optional)</param>
        /// <returns>Task of ApiResponse (FloodRiskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FloodRiskResponse>> GetFloodRiskByLocationAsyncWithHttpInfo (string longitude, string latitude, string includeZoneDesc = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LIAPIGeoRiskServiceApi : ILIAPIGeoRiskServiceApi
    {
        private pb.locationIntelligence.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LIAPIGeoRiskServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LIAPIGeoRiskServiceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = pb.locationIntelligence.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LIAPIGeoRiskServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LIAPIGeoRiskServiceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = pb.locationIntelligence.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public pb.locationIntelligence.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets CrimeRiskResponse Returns the crime data or crime indexes for a given address input.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text.</param>
        /// <param name="type">Type of crime like violent crime, property crime, etc., multiple crime type indexes could be requested as comma separated values with &#39;all&#39; as default.) (optional)</param>
        /// <returns>CrimeRiskResponse</returns>
        public CrimeRiskResponse GetCrimeRiskByAddress (string address, string type = null)
        {
             ApiResponse<CrimeRiskResponse> localVarResponse = GetCrimeRiskByAddressWithHttpInfo(address, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets CrimeRiskResponse Returns the crime data or crime indexes for a given address input.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text.</param>
        /// <param name="type">Type of crime like violent crime, property crime, etc., multiple crime type indexes could be requested as comma separated values with &#39;all&#39; as default.) (optional)</param>
        /// <returns>ApiResponse of CrimeRiskResponse</returns>
        public ApiResponse< CrimeRiskResponse > GetCrimeRiskByAddressWithHttpInfo (string address, string type = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LIAPIGeoRiskServiceApi->GetCrimeRiskByAddress");

            var localVarPath = "/georisk/v1/crime/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCrimeRiskByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CrimeRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (CrimeRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrimeRiskResponse)));
            
        }

        /// <summary>
        /// Gets CrimeRiskResponse Returns the crime data or crime indexes for a given address input.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text.</param>
        /// <param name="type">Type of crime like violent crime, property crime, etc., multiple crime type indexes could be requested as comma separated values with &#39;all&#39; as default.) (optional)</param>
        /// <returns>Task of CrimeRiskResponse</returns>
        public async System.Threading.Tasks.Task<CrimeRiskResponse> GetCrimeRiskByAddressAsync (string address, string type = null)
        {
             ApiResponse<CrimeRiskResponse> localVarResponse = await GetCrimeRiskByAddressAsyncWithHttpInfo(address, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets CrimeRiskResponse Returns the crime data or crime indexes for a given address input.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text.</param>
        /// <param name="type">Type of crime like violent crime, property crime, etc., multiple crime type indexes could be requested as comma separated values with &#39;all&#39; as default.) (optional)</param>
        /// <returns>Task of ApiResponse (CrimeRiskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CrimeRiskResponse>> GetCrimeRiskByAddressAsyncWithHttpInfo (string address, string type = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LIAPIGeoRiskServiceApi->GetCrimeRiskByAddress");

            var localVarPath = "/georisk/v1/crime/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCrimeRiskByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CrimeRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (CrimeRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrimeRiskResponse)));
            
        }

        /// <summary>
        /// Gets CrimeRiskResponse Returns the crime data or crime indexes for a given location.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="type">Refers to crime type. Valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <returns>CrimeRiskResponse</returns>
        public CrimeRiskResponse GetCrimeRiskByLocation (string longitude, string latitude, string type = null)
        {
             ApiResponse<CrimeRiskResponse> localVarResponse = GetCrimeRiskByLocationWithHttpInfo(longitude, latitude, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets CrimeRiskResponse Returns the crime data or crime indexes for a given location.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="type">Refers to crime type. Valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <returns>ApiResponse of CrimeRiskResponse</returns>
        public ApiResponse< CrimeRiskResponse > GetCrimeRiskByLocationWithHttpInfo (string longitude, string latitude, string type = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LIAPIGeoRiskServiceApi->GetCrimeRiskByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LIAPIGeoRiskServiceApi->GetCrimeRiskByLocation");

            var localVarPath = "/georisk/v1/crime/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCrimeRiskByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CrimeRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (CrimeRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrimeRiskResponse)));
            
        }

        /// <summary>
        /// Gets CrimeRiskResponse Returns the crime data or crime indexes for a given location.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="type">Refers to crime type. Valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <returns>Task of CrimeRiskResponse</returns>
        public async System.Threading.Tasks.Task<CrimeRiskResponse> GetCrimeRiskByLocationAsync (string longitude, string latitude, string type = null)
        {
             ApiResponse<CrimeRiskResponse> localVarResponse = await GetCrimeRiskByLocationAsyncWithHttpInfo(longitude, latitude, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets CrimeRiskResponse Returns the crime data or crime indexes for a given location.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="type">Refers to crime type. Valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <returns>Task of ApiResponse (CrimeRiskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CrimeRiskResponse>> GetCrimeRiskByLocationAsyncWithHttpInfo (string longitude, string latitude, string type = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LIAPIGeoRiskServiceApi->GetCrimeRiskByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LIAPIGeoRiskServiceApi->GetCrimeRiskByLocation");

            var localVarPath = "/georisk/v1/crime/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCrimeRiskByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CrimeRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (CrimeRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrimeRiskResponse)));
            
        }

        /// <summary>
        /// Gets EarthquakeRiskResponse Returns the count of earthquake events for various richter measurements and values for an input address.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <returns>EarthquakeRiskResponse</returns>
        public EarthquakeRiskResponse GetEarthquakeRiskByAddress (string address, string richterValue = null)
        {
             ApiResponse<EarthquakeRiskResponse> localVarResponse = GetEarthquakeRiskByAddressWithHttpInfo(address, richterValue);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets EarthquakeRiskResponse Returns the count of earthquake events for various richter measurements and values for an input address.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <returns>ApiResponse of EarthquakeRiskResponse</returns>
        public ApiResponse< EarthquakeRiskResponse > GetEarthquakeRiskByAddressWithHttpInfo (string address, string richterValue = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LIAPIGeoRiskServiceApi->GetEarthquakeRiskByAddress");

            var localVarPath = "/georisk/v1/earthquake/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (richterValue != null) localVarQueryParams.Add("richterValue", Configuration.ApiClient.ParameterToString(richterValue)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarthquakeRiskByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EarthquakeRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (EarthquakeRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EarthquakeRiskResponse)));
            
        }

        /// <summary>
        /// Gets EarthquakeRiskResponse Returns the count of earthquake events for various richter measurements and values for an input address.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <returns>Task of EarthquakeRiskResponse</returns>
        public async System.Threading.Tasks.Task<EarthquakeRiskResponse> GetEarthquakeRiskByAddressAsync (string address, string richterValue = null)
        {
             ApiResponse<EarthquakeRiskResponse> localVarResponse = await GetEarthquakeRiskByAddressAsyncWithHttpInfo(address, richterValue);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets EarthquakeRiskResponse Returns the count of earthquake events for various richter measurements and values for an input address.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <returns>Task of ApiResponse (EarthquakeRiskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EarthquakeRiskResponse>> GetEarthquakeRiskByAddressAsyncWithHttpInfo (string address, string richterValue = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LIAPIGeoRiskServiceApi->GetEarthquakeRiskByAddress");

            var localVarPath = "/georisk/v1/earthquake/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (richterValue != null) localVarQueryParams.Add("richterValue", Configuration.ApiClient.ParameterToString(richterValue)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarthquakeRiskByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EarthquakeRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (EarthquakeRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EarthquakeRiskResponse)));
            
        }

        /// <summary>
        /// Gets EarthquakeRiskResponse Gets EarthquakeRiskResponse
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <returns>EarthquakeRiskResponse</returns>
        public EarthquakeRiskResponse GetEarthquakeRiskByLocation (string longitude, string latitude, string richterValue = null)
        {
             ApiResponse<EarthquakeRiskResponse> localVarResponse = GetEarthquakeRiskByLocationWithHttpInfo(longitude, latitude, richterValue);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets EarthquakeRiskResponse Gets EarthquakeRiskResponse
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <returns>ApiResponse of EarthquakeRiskResponse</returns>
        public ApiResponse< EarthquakeRiskResponse > GetEarthquakeRiskByLocationWithHttpInfo (string longitude, string latitude, string richterValue = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LIAPIGeoRiskServiceApi->GetEarthquakeRiskByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LIAPIGeoRiskServiceApi->GetEarthquakeRiskByLocation");

            var localVarPath = "/georisk/v1/earthquake/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (richterValue != null) localVarQueryParams.Add("richterValue", Configuration.ApiClient.ParameterToString(richterValue)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarthquakeRiskByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EarthquakeRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (EarthquakeRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EarthquakeRiskResponse)));
            
        }

        /// <summary>
        /// Gets EarthquakeRiskResponse Gets EarthquakeRiskResponse
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <returns>Task of EarthquakeRiskResponse</returns>
        public async System.Threading.Tasks.Task<EarthquakeRiskResponse> GetEarthquakeRiskByLocationAsync (string longitude, string latitude, string richterValue = null)
        {
             ApiResponse<EarthquakeRiskResponse> localVarResponse = await GetEarthquakeRiskByLocationAsyncWithHttpInfo(longitude, latitude, richterValue);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets EarthquakeRiskResponse Gets EarthquakeRiskResponse
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <returns>Task of ApiResponse (EarthquakeRiskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EarthquakeRiskResponse>> GetEarthquakeRiskByLocationAsyncWithHttpInfo (string longitude, string latitude, string richterValue = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LIAPIGeoRiskServiceApi->GetEarthquakeRiskByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LIAPIGeoRiskServiceApi->GetEarthquakeRiskByLocation");

            var localVarPath = "/georisk/v1/earthquake/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (richterValue != null) localVarQueryParams.Add("richterValue", Configuration.ApiClient.ParameterToString(richterValue)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarthquakeRiskByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EarthquakeRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (EarthquakeRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EarthquakeRiskResponse)));
            
        }

        /// <summary>
        /// Gets FireRiskResponse Returns the fire data based on address input.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <returns>FireRiskResponse</returns>
        public FireRiskResponse GetFireRiskByAddress (string address)
        {
             ApiResponse<FireRiskResponse> localVarResponse = GetFireRiskByAddressWithHttpInfo(address);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets FireRiskResponse Returns the fire data based on address input.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <returns>ApiResponse of FireRiskResponse</returns>
        public ApiResponse< FireRiskResponse > GetFireRiskByAddressWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LIAPIGeoRiskServiceApi->GetFireRiskByAddress");

            var localVarPath = "/georisk/v1/fire/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FireRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskResponse)));
            
        }

        /// <summary>
        /// Gets FireRiskResponse Returns the fire data based on address input.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <returns>Task of FireRiskResponse</returns>
        public async System.Threading.Tasks.Task<FireRiskResponse> GetFireRiskByAddressAsync (string address)
        {
             ApiResponse<FireRiskResponse> localVarResponse = await GetFireRiskByAddressAsyncWithHttpInfo(address);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets FireRiskResponse Returns the fire data based on address input.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <returns>Task of ApiResponse (FireRiskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FireRiskResponse>> GetFireRiskByAddressAsyncWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LIAPIGeoRiskServiceApi->GetFireRiskByAddress");

            var localVarPath = "/georisk/v1/fire/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FireRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskResponse)));
            
        }

        /// <summary>
        /// Gets FireRiskResponse Returns the fire data based on location input.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <returns>FireRiskResponse</returns>
        public FireRiskResponse GetFireRiskByLocation (string longitude, string latitude)
        {
             ApiResponse<FireRiskResponse> localVarResponse = GetFireRiskByLocationWithHttpInfo(longitude, latitude);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets FireRiskResponse Returns the fire data based on location input.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <returns>ApiResponse of FireRiskResponse</returns>
        public ApiResponse< FireRiskResponse > GetFireRiskByLocationWithHttpInfo (string longitude, string latitude)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LIAPIGeoRiskServiceApi->GetFireRiskByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LIAPIGeoRiskServiceApi->GetFireRiskByLocation");

            var localVarPath = "/georisk/v1/fire/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FireRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskResponse)));
            
        }

        /// <summary>
        /// Gets FireRiskResponse Returns the fire data based on location input.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <returns>Task of FireRiskResponse</returns>
        public async System.Threading.Tasks.Task<FireRiskResponse> GetFireRiskByLocationAsync (string longitude, string latitude)
        {
             ApiResponse<FireRiskResponse> localVarResponse = await GetFireRiskByLocationAsyncWithHttpInfo(longitude, latitude);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets FireRiskResponse Returns the fire data based on location input.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <returns>Task of ApiResponse (FireRiskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FireRiskResponse>> GetFireRiskByLocationAsyncWithHttpInfo (string longitude, string latitude)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LIAPIGeoRiskServiceApi->GetFireRiskByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LIAPIGeoRiskServiceApi->GetFireRiskByLocation");

            var localVarPath = "/georisk/v1/fire/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FireRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskResponse)));
            
        }

        /// <summary>
        /// Gets FireStationResponse Returns the nearest Firestations from an input address.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sort the fire stations results by either travel time or travel distance (nearest first). Default sorting is by travel time. (optional)</param>
        /// <returns>FireStations</returns>
        public FireStations GetFireStationByAddress (string address, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null)
        {
             ApiResponse<FireStations> localVarResponse = GetFireStationByAddressWithHttpInfo(address, maxCandidates, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, sortBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets FireStationResponse Returns the nearest Firestations from an input address.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sort the fire stations results by either travel time or travel distance (nearest first). Default sorting is by travel time. (optional)</param>
        /// <returns>ApiResponse of FireStations</returns>
        public ApiResponse< FireStations > GetFireStationByAddressWithHttpInfo (string address, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LIAPIGeoRiskServiceApi->GetFireStationByAddress");

            var localVarPath = "/georisk/v1/firestation/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireStationByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FireStations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireStations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireStations)));
            
        }

        /// <summary>
        /// Gets FireStationResponse Returns the nearest Firestations from an input address.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sort the fire stations results by either travel time or travel distance (nearest first). Default sorting is by travel time. (optional)</param>
        /// <returns>Task of FireStations</returns>
        public async System.Threading.Tasks.Task<FireStations> GetFireStationByAddressAsync (string address, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null)
        {
             ApiResponse<FireStations> localVarResponse = await GetFireStationByAddressAsyncWithHttpInfo(address, maxCandidates, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, sortBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets FireStationResponse Returns the nearest Firestations from an input address.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sort the fire stations results by either travel time or travel distance (nearest first). Default sorting is by travel time. (optional)</param>
        /// <returns>Task of ApiResponse (FireStations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FireStations>> GetFireStationByAddressAsyncWithHttpInfo (string address, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LIAPIGeoRiskServiceApi->GetFireStationByAddress");

            var localVarPath = "/georisk/v1/firestation/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireStationByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FireStations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireStations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireStations)));
            
        }

        /// <summary>
        /// Gets FireStationResponse Returns the nearest Firestations from an input location.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3. The retrieved fire stations are distance ordered from the specified location. Maximum of 5 fire stations can be retrieved. (optional)</param>
        /// <param name="travelTime">Maximum travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sorting of fire stations in result by travel time/distance (nearest first from input location). (optional)</param>
        /// <returns>FireStations</returns>
        public FireStations GetFireStationByLocation (string longitude, string latitude, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null)
        {
             ApiResponse<FireStations> localVarResponse = GetFireStationByLocationWithHttpInfo(longitude, latitude, maxCandidates, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, sortBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets FireStationResponse Returns the nearest Firestations from an input location.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3. The retrieved fire stations are distance ordered from the specified location. Maximum of 5 fire stations can be retrieved. (optional)</param>
        /// <param name="travelTime">Maximum travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sorting of fire stations in result by travel time/distance (nearest first from input location). (optional)</param>
        /// <returns>ApiResponse of FireStations</returns>
        public ApiResponse< FireStations > GetFireStationByLocationWithHttpInfo (string longitude, string latitude, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LIAPIGeoRiskServiceApi->GetFireStationByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LIAPIGeoRiskServiceApi->GetFireStationByLocation");

            var localVarPath = "/georisk/v1/firestation/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireStationByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FireStations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireStations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireStations)));
            
        }

        /// <summary>
        /// Gets FireStationResponse Returns the nearest Firestations from an input location.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3. The retrieved fire stations are distance ordered from the specified location. Maximum of 5 fire stations can be retrieved. (optional)</param>
        /// <param name="travelTime">Maximum travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sorting of fire stations in result by travel time/distance (nearest first from input location). (optional)</param>
        /// <returns>Task of FireStations</returns>
        public async System.Threading.Tasks.Task<FireStations> GetFireStationByLocationAsync (string longitude, string latitude, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null)
        {
             ApiResponse<FireStations> localVarResponse = await GetFireStationByLocationAsyncWithHttpInfo(longitude, latitude, maxCandidates, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, sortBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets FireStationResponse Returns the nearest Firestations from an input location.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3. The retrieved fire stations are distance ordered from the specified location. Maximum of 5 fire stations can be retrieved. (optional)</param>
        /// <param name="travelTime">Maximum travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sorting of fire stations in result by travel time/distance (nearest first from input location). (optional)</param>
        /// <returns>Task of ApiResponse (FireStations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FireStations>> GetFireStationByLocationAsyncWithHttpInfo (string longitude, string latitude, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LIAPIGeoRiskServiceApi->GetFireStationByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LIAPIGeoRiskServiceApi->GetFireStationByLocation");

            var localVarPath = "/georisk/v1/firestation/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireStationByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FireStations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireStations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireStations)));
            
        }

        /// <summary>
        /// Gets FloodRiskResponse Returns the Flood Risk data for flood zones based on an address.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-text Address</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. (optional)</param>
        /// <returns>FloodRiskResponse</returns>
        public FloodRiskResponse GetFloodRiskByAddress (string address, string includeZoneDesc = null)
        {
             ApiResponse<FloodRiskResponse> localVarResponse = GetFloodRiskByAddressWithHttpInfo(address, includeZoneDesc);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets FloodRiskResponse Returns the Flood Risk data for flood zones based on an address.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-text Address</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. (optional)</param>
        /// <returns>ApiResponse of FloodRiskResponse</returns>
        public ApiResponse< FloodRiskResponse > GetFloodRiskByAddressWithHttpInfo (string address, string includeZoneDesc = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LIAPIGeoRiskServiceApi->GetFloodRiskByAddress");

            var localVarPath = "/georisk/v1/flood/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (includeZoneDesc != null) localVarQueryParams.Add("includeZoneDesc", Configuration.ApiClient.ParameterToString(includeZoneDesc)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFloodRiskByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FloodRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FloodRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FloodRiskResponse)));
            
        }

        /// <summary>
        /// Gets FloodRiskResponse Returns the Flood Risk data for flood zones based on an address.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-text Address</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. (optional)</param>
        /// <returns>Task of FloodRiskResponse</returns>
        public async System.Threading.Tasks.Task<FloodRiskResponse> GetFloodRiskByAddressAsync (string address, string includeZoneDesc = null)
        {
             ApiResponse<FloodRiskResponse> localVarResponse = await GetFloodRiskByAddressAsyncWithHttpInfo(address, includeZoneDesc);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets FloodRiskResponse Returns the Flood Risk data for flood zones based on an address.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-text Address</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. (optional)</param>
        /// <returns>Task of ApiResponse (FloodRiskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FloodRiskResponse>> GetFloodRiskByAddressAsyncWithHttpInfo (string address, string includeZoneDesc = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LIAPIGeoRiskServiceApi->GetFloodRiskByAddress");

            var localVarPath = "/georisk/v1/flood/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (includeZoneDesc != null) localVarQueryParams.Add("includeZoneDesc", Configuration.ApiClient.ParameterToString(includeZoneDesc)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFloodRiskByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FloodRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FloodRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FloodRiskResponse)));
            
        }

        /// <summary>
        /// Gets FloodRiskResponse Returns the Flood Risk data for Flood Zones and Base Flood Elevation, based on location.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. Default: &#39;Y&#39; (optional)</param>
        /// <returns>FloodRiskResponse</returns>
        public FloodRiskResponse GetFloodRiskByLocation (string longitude, string latitude, string includeZoneDesc = null)
        {
             ApiResponse<FloodRiskResponse> localVarResponse = GetFloodRiskByLocationWithHttpInfo(longitude, latitude, includeZoneDesc);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets FloodRiskResponse Returns the Flood Risk data for Flood Zones and Base Flood Elevation, based on location.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. Default: &#39;Y&#39; (optional)</param>
        /// <returns>ApiResponse of FloodRiskResponse</returns>
        public ApiResponse< FloodRiskResponse > GetFloodRiskByLocationWithHttpInfo (string longitude, string latitude, string includeZoneDesc = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LIAPIGeoRiskServiceApi->GetFloodRiskByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LIAPIGeoRiskServiceApi->GetFloodRiskByLocation");

            var localVarPath = "/georisk/v1/flood/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (includeZoneDesc != null) localVarQueryParams.Add("includeZoneDesc", Configuration.ApiClient.ParameterToString(includeZoneDesc)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFloodRiskByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FloodRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FloodRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FloodRiskResponse)));
            
        }

        /// <summary>
        /// Gets FloodRiskResponse Returns the Flood Risk data for Flood Zones and Base Flood Elevation, based on location.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. Default: &#39;Y&#39; (optional)</param>
        /// <returns>Task of FloodRiskResponse</returns>
        public async System.Threading.Tasks.Task<FloodRiskResponse> GetFloodRiskByLocationAsync (string longitude, string latitude, string includeZoneDesc = null)
        {
             ApiResponse<FloodRiskResponse> localVarResponse = await GetFloodRiskByLocationAsyncWithHttpInfo(longitude, latitude, includeZoneDesc);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets FloodRiskResponse Returns the Flood Risk data for Flood Zones and Base Flood Elevation, based on location.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. Default: &#39;Y&#39; (optional)</param>
        /// <returns>Task of ApiResponse (FloodRiskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FloodRiskResponse>> GetFloodRiskByLocationAsyncWithHttpInfo (string longitude, string latitude, string includeZoneDesc = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LIAPIGeoRiskServiceApi->GetFloodRiskByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LIAPIGeoRiskServiceApi->GetFloodRiskByLocation");

            var localVarPath = "/georisk/v1/flood/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (includeZoneDesc != null) localVarQueryParams.Add("includeZoneDesc", Configuration.ApiClient.ParameterToString(includeZoneDesc)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFloodRiskByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FloodRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FloodRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FloodRiskResponse)));
            
        }

    }
}
