/* 
 * Location Intelligence APIs
 *
 * Incorporate our extensive geodata into everyday applications, business processes and workflows.
 *
 * OpenAPI spec version: 7.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using pb.locationIntelligence.Client;
using pb.locationIntelligence.Model;

namespace pb.locationIntelligence.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILIAPIGeoIdentityServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets GeoIdentityResponse
        /// </summary>
        /// <remarks>
        /// Gets GeoIdentityResponse
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="givenName">This filters all the associated identities of address by given Name (optional)</param>
        /// <param name="familyName">This filters all the associated identities of address by family Name (optional)</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="maxCandidates">Number of identities returned in response (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>GeoIdentityResponse</returns>
        GeoIdentityResponse GetIdentityByAddress (string address, string givenName = null, string familyName = null, string confidence = null, string maxCandidates = null, string theme = null, string filter = null);

        /// <summary>
        /// Gets GeoIdentityResponse
        /// </summary>
        /// <remarks>
        /// Gets GeoIdentityResponse
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="givenName">This filters all the associated identities of address by given Name (optional)</param>
        /// <param name="familyName">This filters all the associated identities of address by family Name (optional)</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="maxCandidates">Number of identities returned in response (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>ApiResponse of GeoIdentityResponse</returns>
        ApiResponse<GeoIdentityResponse> GetIdentityByAddressWithHttpInfo (string address, string givenName = null, string familyName = null, string confidence = null, string maxCandidates = null, string theme = null, string filter = null);
        /// <summary>
        /// Gets Identity
        /// </summary>
        /// <remarks>
        /// Gets Identity
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">This specifies the email address</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Identity</returns>
        Identity GetIdentityByEmail (string email, string confidence = null, string theme = null, string filter = null);

        /// <summary>
        /// Gets Identity
        /// </summary>
        /// <remarks>
        /// Gets Identity
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">This specifies the email address</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>ApiResponse of Identity</returns>
        ApiResponse<Identity> GetIdentityByEmailWithHttpInfo (string email, string confidence = null, string theme = null, string filter = null);
        /// <summary>
        /// Gets GeoIdentityResponse
        /// </summary>
        /// <remarks>
        /// Gets GeoIdentityResponse
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">PB specific unique key for each address</param>
        /// <param name="givenName">This filters all the associated identities of address by given Name (optional)</param>
        /// <param name="familyName">This filters all the associated identities of address by family Name (optional)</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="maxCandidates">Number of identities returned in response (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>GeoIdentityResponse</returns>
        GeoIdentityResponse GetIdentityByPBKey (string pbKey, string givenName = null, string familyName = null, string confidence = null, string maxCandidates = null, string theme = null, string filter = null);

        /// <summary>
        /// Gets GeoIdentityResponse
        /// </summary>
        /// <remarks>
        /// Gets GeoIdentityResponse
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">PB specific unique key for each address</param>
        /// <param name="givenName">This filters all the associated identities of address by given Name (optional)</param>
        /// <param name="familyName">This filters all the associated identities of address by family Name (optional)</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="maxCandidates">Number of identities returned in response (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>ApiResponse of GeoIdentityResponse</returns>
        ApiResponse<GeoIdentityResponse> GetIdentityByPBKeyWithHttpInfo (string pbKey, string givenName = null, string familyName = null, string confidence = null, string maxCandidates = null, string theme = null, string filter = null);
        /// <summary>
        /// Gets Identity
        /// </summary>
        /// <remarks>
        /// Gets Identity
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twitter">Twitter handle of the identity.</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Identity</returns>
        Identity GetIdentityByTwitter (string twitter, string confidence = null, string theme = null, string filter = null);

        /// <summary>
        /// Gets Identity
        /// </summary>
        /// <remarks>
        /// Gets Identity
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twitter">Twitter handle of the identity.</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>ApiResponse of Identity</returns>
        ApiResponse<Identity> GetIdentityByTwitterWithHttpInfo (string twitter, string confidence = null, string theme = null, string filter = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets GeoIdentityResponse
        /// </summary>
        /// <remarks>
        /// Gets GeoIdentityResponse
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="givenName">This filters all the associated identities of address by given Name (optional)</param>
        /// <param name="familyName">This filters all the associated identities of address by family Name (optional)</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="maxCandidates">Number of identities returned in response (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of GeoIdentityResponse</returns>
        System.Threading.Tasks.Task<GeoIdentityResponse> GetIdentityByAddressAsync (string address, string givenName = null, string familyName = null, string confidence = null, string maxCandidates = null, string theme = null, string filter = null);

        /// <summary>
        /// Gets GeoIdentityResponse
        /// </summary>
        /// <remarks>
        /// Gets GeoIdentityResponse
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="givenName">This filters all the associated identities of address by given Name (optional)</param>
        /// <param name="familyName">This filters all the associated identities of address by family Name (optional)</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="maxCandidates">Number of identities returned in response (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of ApiResponse (GeoIdentityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoIdentityResponse>> GetIdentityByAddressAsyncWithHttpInfo (string address, string givenName = null, string familyName = null, string confidence = null, string maxCandidates = null, string theme = null, string filter = null);
        /// <summary>
        /// Gets Identity
        /// </summary>
        /// <remarks>
        /// Gets Identity
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">This specifies the email address</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of Identity</returns>
        System.Threading.Tasks.Task<Identity> GetIdentityByEmailAsync (string email, string confidence = null, string theme = null, string filter = null);

        /// <summary>
        /// Gets Identity
        /// </summary>
        /// <remarks>
        /// Gets Identity
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">This specifies the email address</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of ApiResponse (Identity)</returns>
        System.Threading.Tasks.Task<ApiResponse<Identity>> GetIdentityByEmailAsyncWithHttpInfo (string email, string confidence = null, string theme = null, string filter = null);
        /// <summary>
        /// Gets GeoIdentityResponse
        /// </summary>
        /// <remarks>
        /// Gets GeoIdentityResponse
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">PB specific unique key for each address</param>
        /// <param name="givenName">This filters all the associated identities of address by given Name (optional)</param>
        /// <param name="familyName">This filters all the associated identities of address by family Name (optional)</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="maxCandidates">Number of identities returned in response (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of GeoIdentityResponse</returns>
        System.Threading.Tasks.Task<GeoIdentityResponse> GetIdentityByPBKeyAsync (string pbKey, string givenName = null, string familyName = null, string confidence = null, string maxCandidates = null, string theme = null, string filter = null);

        /// <summary>
        /// Gets GeoIdentityResponse
        /// </summary>
        /// <remarks>
        /// Gets GeoIdentityResponse
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">PB specific unique key for each address</param>
        /// <param name="givenName">This filters all the associated identities of address by given Name (optional)</param>
        /// <param name="familyName">This filters all the associated identities of address by family Name (optional)</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="maxCandidates">Number of identities returned in response (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of ApiResponse (GeoIdentityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoIdentityResponse>> GetIdentityByPBKeyAsyncWithHttpInfo (string pbKey, string givenName = null, string familyName = null, string confidence = null, string maxCandidates = null, string theme = null, string filter = null);
        /// <summary>
        /// Gets Identity
        /// </summary>
        /// <remarks>
        /// Gets Identity
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twitter">Twitter handle of the identity.</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of Identity</returns>
        System.Threading.Tasks.Task<Identity> GetIdentityByTwitterAsync (string twitter, string confidence = null, string theme = null, string filter = null);

        /// <summary>
        /// Gets Identity
        /// </summary>
        /// <remarks>
        /// Gets Identity
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twitter">Twitter handle of the identity.</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of ApiResponse (Identity)</returns>
        System.Threading.Tasks.Task<ApiResponse<Identity>> GetIdentityByTwitterAsyncWithHttpInfo (string twitter, string confidence = null, string theme = null, string filter = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LIAPIGeoIdentityServiceApi : ILIAPIGeoIdentityServiceApi
    {
        private pb.locationIntelligence.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LIAPIGeoIdentityServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LIAPIGeoIdentityServiceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = pb.locationIntelligence.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LIAPIGeoIdentityServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LIAPIGeoIdentityServiceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = pb.locationIntelligence.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public pb.locationIntelligence.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets GeoIdentityResponse Gets GeoIdentityResponse
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="givenName">This filters all the associated identities of address by given Name (optional)</param>
        /// <param name="familyName">This filters all the associated identities of address by family Name (optional)</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="maxCandidates">Number of identities returned in response (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>GeoIdentityResponse</returns>
        public GeoIdentityResponse GetIdentityByAddress (string address, string givenName = null, string familyName = null, string confidence = null, string maxCandidates = null, string theme = null, string filter = null)
        {
             ApiResponse<GeoIdentityResponse> localVarResponse = GetIdentityByAddressWithHttpInfo(address, givenName, familyName, confidence, maxCandidates, theme, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets GeoIdentityResponse Gets GeoIdentityResponse
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="givenName">This filters all the associated identities of address by given Name (optional)</param>
        /// <param name="familyName">This filters all the associated identities of address by family Name (optional)</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="maxCandidates">Number of identities returned in response (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>ApiResponse of GeoIdentityResponse</returns>
        public ApiResponse< GeoIdentityResponse > GetIdentityByAddressWithHttpInfo (string address, string givenName = null, string familyName = null, string confidence = null, string maxCandidates = null, string theme = null, string filter = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LIAPIGeoIdentityServiceApi->GetIdentityByAddress");

            var localVarPath = "/geoidentity/v1/identity/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (givenName != null) localVarQueryParams.Add("givenName", Configuration.ApiClient.ParameterToString(givenName)); // query parameter
            if (familyName != null) localVarQueryParams.Add("familyName", Configuration.ApiClient.ParameterToString(familyName)); // query parameter
            if (confidence != null) localVarQueryParams.Add("confidence", Configuration.ApiClient.ParameterToString(confidence)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (theme != null) localVarQueryParams.Add("theme", Configuration.ApiClient.ParameterToString(theme)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoIdentityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoIdentityResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoIdentityResponse)));
            
        }

        /// <summary>
        /// Gets GeoIdentityResponse Gets GeoIdentityResponse
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="givenName">This filters all the associated identities of address by given Name (optional)</param>
        /// <param name="familyName">This filters all the associated identities of address by family Name (optional)</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="maxCandidates">Number of identities returned in response (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of GeoIdentityResponse</returns>
        public async System.Threading.Tasks.Task<GeoIdentityResponse> GetIdentityByAddressAsync (string address, string givenName = null, string familyName = null, string confidence = null, string maxCandidates = null, string theme = null, string filter = null)
        {
             ApiResponse<GeoIdentityResponse> localVarResponse = await GetIdentityByAddressAsyncWithHttpInfo(address, givenName, familyName, confidence, maxCandidates, theme, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets GeoIdentityResponse Gets GeoIdentityResponse
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="givenName">This filters all the associated identities of address by given Name (optional)</param>
        /// <param name="familyName">This filters all the associated identities of address by family Name (optional)</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="maxCandidates">Number of identities returned in response (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of ApiResponse (GeoIdentityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeoIdentityResponse>> GetIdentityByAddressAsyncWithHttpInfo (string address, string givenName = null, string familyName = null, string confidence = null, string maxCandidates = null, string theme = null, string filter = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LIAPIGeoIdentityServiceApi->GetIdentityByAddress");

            var localVarPath = "/geoidentity/v1/identity/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (givenName != null) localVarQueryParams.Add("givenName", Configuration.ApiClient.ParameterToString(givenName)); // query parameter
            if (familyName != null) localVarQueryParams.Add("familyName", Configuration.ApiClient.ParameterToString(familyName)); // query parameter
            if (confidence != null) localVarQueryParams.Add("confidence", Configuration.ApiClient.ParameterToString(confidence)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (theme != null) localVarQueryParams.Add("theme", Configuration.ApiClient.ParameterToString(theme)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoIdentityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoIdentityResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoIdentityResponse)));
            
        }

        /// <summary>
        /// Gets Identity Gets Identity
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">This specifies the email address</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Identity</returns>
        public Identity GetIdentityByEmail (string email, string confidence = null, string theme = null, string filter = null)
        {
             ApiResponse<Identity> localVarResponse = GetIdentityByEmailWithHttpInfo(email, confidence, theme, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Identity Gets Identity
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">This specifies the email address</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>ApiResponse of Identity</returns>
        public ApiResponse< Identity > GetIdentityByEmailWithHttpInfo (string email, string confidence = null, string theme = null, string filter = null)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling LIAPIGeoIdentityServiceApi->GetIdentityByEmail");

            var localVarPath = "/geoidentity/v1/identity/byemail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (confidence != null) localVarQueryParams.Add("confidence", Configuration.ApiClient.ParameterToString(confidence)); // query parameter
            if (theme != null) localVarQueryParams.Add("theme", Configuration.ApiClient.ParameterToString(theme)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Identity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Identity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Identity)));
            
        }

        /// <summary>
        /// Gets Identity Gets Identity
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">This specifies the email address</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of Identity</returns>
        public async System.Threading.Tasks.Task<Identity> GetIdentityByEmailAsync (string email, string confidence = null, string theme = null, string filter = null)
        {
             ApiResponse<Identity> localVarResponse = await GetIdentityByEmailAsyncWithHttpInfo(email, confidence, theme, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Identity Gets Identity
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">This specifies the email address</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of ApiResponse (Identity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Identity>> GetIdentityByEmailAsyncWithHttpInfo (string email, string confidence = null, string theme = null, string filter = null)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling LIAPIGeoIdentityServiceApi->GetIdentityByEmail");

            var localVarPath = "/geoidentity/v1/identity/byemail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (confidence != null) localVarQueryParams.Add("confidence", Configuration.ApiClient.ParameterToString(confidence)); // query parameter
            if (theme != null) localVarQueryParams.Add("theme", Configuration.ApiClient.ParameterToString(theme)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Identity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Identity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Identity)));
            
        }

        /// <summary>
        /// Gets GeoIdentityResponse Gets GeoIdentityResponse
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">PB specific unique key for each address</param>
        /// <param name="givenName">This filters all the associated identities of address by given Name (optional)</param>
        /// <param name="familyName">This filters all the associated identities of address by family Name (optional)</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="maxCandidates">Number of identities returned in response (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>GeoIdentityResponse</returns>
        public GeoIdentityResponse GetIdentityByPBKey (string pbKey, string givenName = null, string familyName = null, string confidence = null, string maxCandidates = null, string theme = null, string filter = null)
        {
             ApiResponse<GeoIdentityResponse> localVarResponse = GetIdentityByPBKeyWithHttpInfo(pbKey, givenName, familyName, confidence, maxCandidates, theme, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets GeoIdentityResponse Gets GeoIdentityResponse
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">PB specific unique key for each address</param>
        /// <param name="givenName">This filters all the associated identities of address by given Name (optional)</param>
        /// <param name="familyName">This filters all the associated identities of address by family Name (optional)</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="maxCandidates">Number of identities returned in response (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>ApiResponse of GeoIdentityResponse</returns>
        public ApiResponse< GeoIdentityResponse > GetIdentityByPBKeyWithHttpInfo (string pbKey, string givenName = null, string familyName = null, string confidence = null, string maxCandidates = null, string theme = null, string filter = null)
        {
            // verify the required parameter 'pbKey' is set
            if (pbKey == null)
                throw new ApiException(400, "Missing required parameter 'pbKey' when calling LIAPIGeoIdentityServiceApi->GetIdentityByPBKey");

            var localVarPath = "/geoidentity/v1/identity/bypbkey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (pbKey != null) localVarQueryParams.Add("pbKey", Configuration.ApiClient.ParameterToString(pbKey)); // query parameter
            if (givenName != null) localVarQueryParams.Add("givenName", Configuration.ApiClient.ParameterToString(givenName)); // query parameter
            if (familyName != null) localVarQueryParams.Add("familyName", Configuration.ApiClient.ParameterToString(familyName)); // query parameter
            if (confidence != null) localVarQueryParams.Add("confidence", Configuration.ApiClient.ParameterToString(confidence)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (theme != null) localVarQueryParams.Add("theme", Configuration.ApiClient.ParameterToString(theme)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityByPBKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoIdentityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoIdentityResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoIdentityResponse)));
            
        }

        /// <summary>
        /// Gets GeoIdentityResponse Gets GeoIdentityResponse
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">PB specific unique key for each address</param>
        /// <param name="givenName">This filters all the associated identities of address by given Name (optional)</param>
        /// <param name="familyName">This filters all the associated identities of address by family Name (optional)</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="maxCandidates">Number of identities returned in response (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of GeoIdentityResponse</returns>
        public async System.Threading.Tasks.Task<GeoIdentityResponse> GetIdentityByPBKeyAsync (string pbKey, string givenName = null, string familyName = null, string confidence = null, string maxCandidates = null, string theme = null, string filter = null)
        {
             ApiResponse<GeoIdentityResponse> localVarResponse = await GetIdentityByPBKeyAsyncWithHttpInfo(pbKey, givenName, familyName, confidence, maxCandidates, theme, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets GeoIdentityResponse Gets GeoIdentityResponse
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">PB specific unique key for each address</param>
        /// <param name="givenName">This filters all the associated identities of address by given Name (optional)</param>
        /// <param name="familyName">This filters all the associated identities of address by family Name (optional)</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="maxCandidates">Number of identities returned in response (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of ApiResponse (GeoIdentityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeoIdentityResponse>> GetIdentityByPBKeyAsyncWithHttpInfo (string pbKey, string givenName = null, string familyName = null, string confidence = null, string maxCandidates = null, string theme = null, string filter = null)
        {
            // verify the required parameter 'pbKey' is set
            if (pbKey == null)
                throw new ApiException(400, "Missing required parameter 'pbKey' when calling LIAPIGeoIdentityServiceApi->GetIdentityByPBKey");

            var localVarPath = "/geoidentity/v1/identity/bypbkey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (pbKey != null) localVarQueryParams.Add("pbKey", Configuration.ApiClient.ParameterToString(pbKey)); // query parameter
            if (givenName != null) localVarQueryParams.Add("givenName", Configuration.ApiClient.ParameterToString(givenName)); // query parameter
            if (familyName != null) localVarQueryParams.Add("familyName", Configuration.ApiClient.ParameterToString(familyName)); // query parameter
            if (confidence != null) localVarQueryParams.Add("confidence", Configuration.ApiClient.ParameterToString(confidence)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (theme != null) localVarQueryParams.Add("theme", Configuration.ApiClient.ParameterToString(theme)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityByPBKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoIdentityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoIdentityResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoIdentityResponse)));
            
        }

        /// <summary>
        /// Gets Identity Gets Identity
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twitter">Twitter handle of the identity.</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Identity</returns>
        public Identity GetIdentityByTwitter (string twitter, string confidence = null, string theme = null, string filter = null)
        {
             ApiResponse<Identity> localVarResponse = GetIdentityByTwitterWithHttpInfo(twitter, confidence, theme, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Identity Gets Identity
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twitter">Twitter handle of the identity.</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>ApiResponse of Identity</returns>
        public ApiResponse< Identity > GetIdentityByTwitterWithHttpInfo (string twitter, string confidence = null, string theme = null, string filter = null)
        {
            // verify the required parameter 'twitter' is set
            if (twitter == null)
                throw new ApiException(400, "Missing required parameter 'twitter' when calling LIAPIGeoIdentityServiceApi->GetIdentityByTwitter");

            var localVarPath = "/geoidentity/v1/identity/bytwitter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (twitter != null) localVarQueryParams.Add("twitter", Configuration.ApiClient.ParameterToString(twitter)); // query parameter
            if (confidence != null) localVarQueryParams.Add("confidence", Configuration.ApiClient.ParameterToString(confidence)); // query parameter
            if (theme != null) localVarQueryParams.Add("theme", Configuration.ApiClient.ParameterToString(theme)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityByTwitter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Identity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Identity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Identity)));
            
        }

        /// <summary>
        /// Gets Identity Gets Identity
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twitter">Twitter handle of the identity.</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of Identity</returns>
        public async System.Threading.Tasks.Task<Identity> GetIdentityByTwitterAsync (string twitter, string confidence = null, string theme = null, string filter = null)
        {
             ApiResponse<Identity> localVarResponse = await GetIdentityByTwitterAsyncWithHttpInfo(twitter, confidence, theme, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Identity Gets Identity
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twitter">Twitter handle of the identity.</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of ApiResponse (Identity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Identity>> GetIdentityByTwitterAsyncWithHttpInfo (string twitter, string confidence = null, string theme = null, string filter = null)
        {
            // verify the required parameter 'twitter' is set
            if (twitter == null)
                throw new ApiException(400, "Missing required parameter 'twitter' when calling LIAPIGeoIdentityServiceApi->GetIdentityByTwitter");

            var localVarPath = "/geoidentity/v1/identity/bytwitter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (twitter != null) localVarQueryParams.Add("twitter", Configuration.ApiClient.ParameterToString(twitter)); // query parameter
            if (confidence != null) localVarQueryParams.Add("confidence", Configuration.ApiClient.ParameterToString(confidence)); // query parameter
            if (theme != null) localVarQueryParams.Add("theme", Configuration.ApiClient.ParameterToString(theme)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityByTwitter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Identity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Identity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Identity)));
            
        }

    }
}
