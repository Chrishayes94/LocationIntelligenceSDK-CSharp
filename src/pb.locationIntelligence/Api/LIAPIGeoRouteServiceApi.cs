/* 
 * Location Intelligence APIs
 *
 * Incorporate our extensive geodata into everyday applications, business processes and workflows.
 *
 * OpenAPI spec version: 3.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using pb.locationIntelligence.Client;
using pb.locationIntelligence.Model;

namespace pb.locationIntelligence.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILIAPIGeoRouteServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets Route by Address
        /// </summary>
        /// <remarks>
        /// Routing Directions for Single and Multiple Origin &amp; Destination Inputs. Accepts addresses as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddress">Starting address of the route.</param>
        /// <param name="endAddress">Ending address of the route.</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="country">Three digit ISO country code (optional, default to USA)</param>
        /// <param name="intermediateAddresses">List of intermediate addresses of the route. (optional)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to false)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="language">Language of travel directions. (optional, default to en)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to None)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to none)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to false)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to false)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to false)</param>
        /// <returns>GeoRouteResponse</returns>
        GeoRouteResponse GetRouteByAddress (string startAddress, string endAddress, string db = null, string country = null, string intermediateAddresses = null, string oip = null, string destinationSrs = null, string optimizeBy = null, string returnDistance = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string language = null, string directionsStyle = null, string segmentGeometryStyle = null, string primaryNameOnly = null, string majorRoads = null, string historicTrafficTimeBucket = null, string returnDirectionGeometry = null);

        /// <summary>
        /// Gets Route by Address
        /// </summary>
        /// <remarks>
        /// Routing Directions for Single and Multiple Origin &amp; Destination Inputs. Accepts addresses as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddress">Starting address of the route.</param>
        /// <param name="endAddress">Ending address of the route.</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="country">Three digit ISO country code (optional, default to USA)</param>
        /// <param name="intermediateAddresses">List of intermediate addresses of the route. (optional)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to false)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="language">Language of travel directions. (optional, default to en)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to None)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to none)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to false)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to false)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to false)</param>
        /// <returns>ApiResponse of GeoRouteResponse</returns>
        ApiResponse<GeoRouteResponse> GetRouteByAddressWithHttpInfo (string startAddress, string endAddress, string db = null, string country = null, string intermediateAddresses = null, string oip = null, string destinationSrs = null, string optimizeBy = null, string returnDistance = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string language = null, string directionsStyle = null, string segmentGeometryStyle = null, string primaryNameOnly = null, string majorRoads = null, string historicTrafficTimeBucket = null, string returnDirectionGeometry = null);
        /// <summary>
        /// Gets Route by Location
        /// </summary>
        /// <remarks>
        /// Returns the fastest or shortest route based on a starting and ending location with optional intermediate points as input.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoint">Start Point in &#39;Lat,Long,coordsys&#39; format</param>
        /// <param name="endPoint">End Point in &#39;Lat,Long,coordsys&#39; format</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="intermediatePoints">List of intermediate points of the route. (optional)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to false)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="language">Specifies the language of travel directions. (optional, default to en)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to None)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to none)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to false)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to false)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to false)</param>
        /// <returns>GeoRouteResponse</returns>
        GeoRouteResponse GetRouteByLocation (string startPoint, string endPoint, string db = null, string intermediatePoints = null, string oip = null, string destinationSrs = null, string optimizeBy = null, string returnDistance = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string language = null, string directionsStyle = null, string segmentGeometryStyle = null, string primaryNameOnly = null, string majorRoads = null, string historicTrafficTimeBucket = null, string returnDirectionGeometry = null);

        /// <summary>
        /// Gets Route by Location
        /// </summary>
        /// <remarks>
        /// Returns the fastest or shortest route based on a starting and ending location with optional intermediate points as input.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoint">Start Point in &#39;Lat,Long,coordsys&#39; format</param>
        /// <param name="endPoint">End Point in &#39;Lat,Long,coordsys&#39; format</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="intermediatePoints">List of intermediate points of the route. (optional)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to false)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="language">Specifies the language of travel directions. (optional, default to en)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to None)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to none)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to false)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to false)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to false)</param>
        /// <returns>ApiResponse of GeoRouteResponse</returns>
        ApiResponse<GeoRouteResponse> GetRouteByLocationWithHttpInfo (string startPoint, string endPoint, string db = null, string intermediatePoints = null, string oip = null, string destinationSrs = null, string optimizeBy = null, string returnDistance = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string language = null, string directionsStyle = null, string segmentGeometryStyle = null, string primaryNameOnly = null, string majorRoads = null, string historicTrafficTimeBucket = null, string returnDirectionGeometry = null);
        /// <summary>
        /// Gets Cost Matrix by Address
        /// </summary>
        /// <remarks>
        /// Calculates the travel time and distances between an array of start and end addresses.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddresses">Start locations in text based addresses.</param>
        /// <param name="endAddresses">End locations in text based addresses.</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="country">3 Digit ISO country code. (optional, default to USA)</param>
        /// <param name="optimizeBy">Specifies the type of optimizing to use for the route (time/distance). (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether to return the travel distance in the response or not. (optional, default to true)</param>
        /// <param name="destinationSrs">Coordinate system used for the returned routes. (optional)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether to return the travel time in the response or not. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to false)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to true)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <returns>TravelCostMatrixResponse</returns>
        TravelCostMatrixResponse GetTravelCostMatrixByAddress (string startAddresses, string endAddresses, string db = null, string country = null, string optimizeBy = null, string returnDistance = null, string destinationSrs = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string majorRoads = null, string returnOptimalRoutesOnly = null, string historicTrafficTimeBucket = null);

        /// <summary>
        /// Gets Cost Matrix by Address
        /// </summary>
        /// <remarks>
        /// Calculates the travel time and distances between an array of start and end addresses.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddresses">Start locations in text based addresses.</param>
        /// <param name="endAddresses">End locations in text based addresses.</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="country">3 Digit ISO country code. (optional, default to USA)</param>
        /// <param name="optimizeBy">Specifies the type of optimizing to use for the route (time/distance). (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether to return the travel distance in the response or not. (optional, default to true)</param>
        /// <param name="destinationSrs">Coordinate system used for the returned routes. (optional)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether to return the travel time in the response or not. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to false)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to true)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <returns>ApiResponse of TravelCostMatrixResponse</returns>
        ApiResponse<TravelCostMatrixResponse> GetTravelCostMatrixByAddressWithHttpInfo (string startAddresses, string endAddresses, string db = null, string country = null, string optimizeBy = null, string returnDistance = null, string destinationSrs = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string majorRoads = null, string returnOptimalRoutesOnly = null, string historicTrafficTimeBucket = null);
        /// <summary>
        /// Gets Cost Matrix by Location
        /// </summary>
        /// <remarks>
        /// GeoRoute&#39;s &#39;Travel Cost Matrix By Location&#39; service calculates the travel time and distances between an array of start and end points based on location coordinates.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoints">The address to be searched.</param>
        /// <param name="endPoints">The address to be searched.</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="optimizeBy">Specifies whether routes should be optimized by time or distance. (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be returned in response. (optional, default to true)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of returned routes. (optional)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether time needs to be returned in response. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to false)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to true)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <returns>TravelCostMatrixResponse</returns>
        TravelCostMatrixResponse GetTravelCostMatrixByLocation (string startPoints, string endPoints, string db = null, string optimizeBy = null, string returnDistance = null, string destinationSrs = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string majorRoads = null, string returnOptimalRoutesOnly = null, string historicTrafficTimeBucket = null);

        /// <summary>
        /// Gets Cost Matrix by Location
        /// </summary>
        /// <remarks>
        /// GeoRoute&#39;s &#39;Travel Cost Matrix By Location&#39; service calculates the travel time and distances between an array of start and end points based on location coordinates.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoints">The address to be searched.</param>
        /// <param name="endPoints">The address to be searched.</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="optimizeBy">Specifies whether routes should be optimized by time or distance. (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be returned in response. (optional, default to true)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of returned routes. (optional)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether time needs to be returned in response. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to false)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to true)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <returns>ApiResponse of TravelCostMatrixResponse</returns>
        ApiResponse<TravelCostMatrixResponse> GetTravelCostMatrixByLocationWithHttpInfo (string startPoints, string endPoints, string db = null, string optimizeBy = null, string returnDistance = null, string destinationSrs = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string majorRoads = null, string returnOptimalRoutesOnly = null, string historicTrafficTimeBucket = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets Route by Address
        /// </summary>
        /// <remarks>
        /// Routing Directions for Single and Multiple Origin &amp; Destination Inputs. Accepts addresses as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddress">Starting address of the route.</param>
        /// <param name="endAddress">Ending address of the route.</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="country">Three digit ISO country code (optional, default to USA)</param>
        /// <param name="intermediateAddresses">List of intermediate addresses of the route. (optional)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to false)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="language">Language of travel directions. (optional, default to en)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to None)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to none)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to false)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to false)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to false)</param>
        /// <returns>Task of GeoRouteResponse</returns>
        System.Threading.Tasks.Task<GeoRouteResponse> GetRouteByAddressAsync (string startAddress, string endAddress, string db = null, string country = null, string intermediateAddresses = null, string oip = null, string destinationSrs = null, string optimizeBy = null, string returnDistance = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string language = null, string directionsStyle = null, string segmentGeometryStyle = null, string primaryNameOnly = null, string majorRoads = null, string historicTrafficTimeBucket = null, string returnDirectionGeometry = null);

        /// <summary>
        /// Gets Route by Address
        /// </summary>
        /// <remarks>
        /// Routing Directions for Single and Multiple Origin &amp; Destination Inputs. Accepts addresses as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddress">Starting address of the route.</param>
        /// <param name="endAddress">Ending address of the route.</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="country">Three digit ISO country code (optional, default to USA)</param>
        /// <param name="intermediateAddresses">List of intermediate addresses of the route. (optional)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to false)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="language">Language of travel directions. (optional, default to en)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to None)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to none)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to false)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to false)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (GeoRouteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoRouteResponse>> GetRouteByAddressAsyncWithHttpInfo (string startAddress, string endAddress, string db = null, string country = null, string intermediateAddresses = null, string oip = null, string destinationSrs = null, string optimizeBy = null, string returnDistance = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string language = null, string directionsStyle = null, string segmentGeometryStyle = null, string primaryNameOnly = null, string majorRoads = null, string historicTrafficTimeBucket = null, string returnDirectionGeometry = null);
        /// <summary>
        /// Gets Route by Location
        /// </summary>
        /// <remarks>
        /// Returns the fastest or shortest route based on a starting and ending location with optional intermediate points as input.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoint">Start Point in &#39;Lat,Long,coordsys&#39; format</param>
        /// <param name="endPoint">End Point in &#39;Lat,Long,coordsys&#39; format</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="intermediatePoints">List of intermediate points of the route. (optional)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to false)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="language">Specifies the language of travel directions. (optional, default to en)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to None)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to none)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to false)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to false)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to false)</param>
        /// <returns>Task of GeoRouteResponse</returns>
        System.Threading.Tasks.Task<GeoRouteResponse> GetRouteByLocationAsync (string startPoint, string endPoint, string db = null, string intermediatePoints = null, string oip = null, string destinationSrs = null, string optimizeBy = null, string returnDistance = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string language = null, string directionsStyle = null, string segmentGeometryStyle = null, string primaryNameOnly = null, string majorRoads = null, string historicTrafficTimeBucket = null, string returnDirectionGeometry = null);

        /// <summary>
        /// Gets Route by Location
        /// </summary>
        /// <remarks>
        /// Returns the fastest or shortest route based on a starting and ending location with optional intermediate points as input.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoint">Start Point in &#39;Lat,Long,coordsys&#39; format</param>
        /// <param name="endPoint">End Point in &#39;Lat,Long,coordsys&#39; format</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="intermediatePoints">List of intermediate points of the route. (optional)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to false)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="language">Specifies the language of travel directions. (optional, default to en)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to None)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to none)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to false)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to false)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (GeoRouteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoRouteResponse>> GetRouteByLocationAsyncWithHttpInfo (string startPoint, string endPoint, string db = null, string intermediatePoints = null, string oip = null, string destinationSrs = null, string optimizeBy = null, string returnDistance = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string language = null, string directionsStyle = null, string segmentGeometryStyle = null, string primaryNameOnly = null, string majorRoads = null, string historicTrafficTimeBucket = null, string returnDirectionGeometry = null);
        /// <summary>
        /// Gets Cost Matrix by Address
        /// </summary>
        /// <remarks>
        /// Calculates the travel time and distances between an array of start and end addresses.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddresses">Start locations in text based addresses.</param>
        /// <param name="endAddresses">End locations in text based addresses.</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="country">3 Digit ISO country code. (optional, default to USA)</param>
        /// <param name="optimizeBy">Specifies the type of optimizing to use for the route (time/distance). (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether to return the travel distance in the response or not. (optional, default to true)</param>
        /// <param name="destinationSrs">Coordinate system used for the returned routes. (optional)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether to return the travel time in the response or not. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to false)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to true)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <returns>Task of TravelCostMatrixResponse</returns>
        System.Threading.Tasks.Task<TravelCostMatrixResponse> GetTravelCostMatrixByAddressAsync (string startAddresses, string endAddresses, string db = null, string country = null, string optimizeBy = null, string returnDistance = null, string destinationSrs = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string majorRoads = null, string returnOptimalRoutesOnly = null, string historicTrafficTimeBucket = null);

        /// <summary>
        /// Gets Cost Matrix by Address
        /// </summary>
        /// <remarks>
        /// Calculates the travel time and distances between an array of start and end addresses.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddresses">Start locations in text based addresses.</param>
        /// <param name="endAddresses">End locations in text based addresses.</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="country">3 Digit ISO country code. (optional, default to USA)</param>
        /// <param name="optimizeBy">Specifies the type of optimizing to use for the route (time/distance). (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether to return the travel distance in the response or not. (optional, default to true)</param>
        /// <param name="destinationSrs">Coordinate system used for the returned routes. (optional)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether to return the travel time in the response or not. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to false)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to true)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <returns>Task of ApiResponse (TravelCostMatrixResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TravelCostMatrixResponse>> GetTravelCostMatrixByAddressAsyncWithHttpInfo (string startAddresses, string endAddresses, string db = null, string country = null, string optimizeBy = null, string returnDistance = null, string destinationSrs = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string majorRoads = null, string returnOptimalRoutesOnly = null, string historicTrafficTimeBucket = null);
        /// <summary>
        /// Gets Cost Matrix by Location
        /// </summary>
        /// <remarks>
        /// GeoRoute&#39;s &#39;Travel Cost Matrix By Location&#39; service calculates the travel time and distances between an array of start and end points based on location coordinates.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoints">The address to be searched.</param>
        /// <param name="endPoints">The address to be searched.</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="optimizeBy">Specifies whether routes should be optimized by time or distance. (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be returned in response. (optional, default to true)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of returned routes. (optional)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether time needs to be returned in response. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to false)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to true)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <returns>Task of TravelCostMatrixResponse</returns>
        System.Threading.Tasks.Task<TravelCostMatrixResponse> GetTravelCostMatrixByLocationAsync (string startPoints, string endPoints, string db = null, string optimizeBy = null, string returnDistance = null, string destinationSrs = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string majorRoads = null, string returnOptimalRoutesOnly = null, string historicTrafficTimeBucket = null);

        /// <summary>
        /// Gets Cost Matrix by Location
        /// </summary>
        /// <remarks>
        /// GeoRoute&#39;s &#39;Travel Cost Matrix By Location&#39; service calculates the travel time and distances between an array of start and end points based on location coordinates.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoints">The address to be searched.</param>
        /// <param name="endPoints">The address to be searched.</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="optimizeBy">Specifies whether routes should be optimized by time or distance. (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be returned in response. (optional, default to true)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of returned routes. (optional)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether time needs to be returned in response. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to false)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to true)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <returns>Task of ApiResponse (TravelCostMatrixResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TravelCostMatrixResponse>> GetTravelCostMatrixByLocationAsyncWithHttpInfo (string startPoints, string endPoints, string db = null, string optimizeBy = null, string returnDistance = null, string destinationSrs = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string majorRoads = null, string returnOptimalRoutesOnly = null, string historicTrafficTimeBucket = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LIAPIGeoRouteServiceApi : ILIAPIGeoRouteServiceApi
    {
        private pb.locationIntelligence.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LIAPIGeoRouteServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LIAPIGeoRouteServiceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = pb.locationIntelligence.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LIAPIGeoRouteServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LIAPIGeoRouteServiceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = pb.locationIntelligence.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public pb.locationIntelligence.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets Route by Address Routing Directions for Single and Multiple Origin &amp; Destination Inputs. Accepts addresses as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddress">Starting address of the route.</param>
        /// <param name="endAddress">Ending address of the route.</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="country">Three digit ISO country code (optional, default to USA)</param>
        /// <param name="intermediateAddresses">List of intermediate addresses of the route. (optional)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to false)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="language">Language of travel directions. (optional, default to en)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to None)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to none)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to false)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to false)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to false)</param>
        /// <returns>GeoRouteResponse</returns>
        public GeoRouteResponse GetRouteByAddress (string startAddress, string endAddress, string db = null, string country = null, string intermediateAddresses = null, string oip = null, string destinationSrs = null, string optimizeBy = null, string returnDistance = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string language = null, string directionsStyle = null, string segmentGeometryStyle = null, string primaryNameOnly = null, string majorRoads = null, string historicTrafficTimeBucket = null, string returnDirectionGeometry = null)
        {
             ApiResponse<GeoRouteResponse> localVarResponse = GetRouteByAddressWithHttpInfo(startAddress, endAddress, db, country, intermediateAddresses, oip, destinationSrs, optimizeBy, returnDistance, distanceUnit, returnTime, timeUnit, language, directionsStyle, segmentGeometryStyle, primaryNameOnly, majorRoads, historicTrafficTimeBucket, returnDirectionGeometry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Route by Address Routing Directions for Single and Multiple Origin &amp; Destination Inputs. Accepts addresses as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddress">Starting address of the route.</param>
        /// <param name="endAddress">Ending address of the route.</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="country">Three digit ISO country code (optional, default to USA)</param>
        /// <param name="intermediateAddresses">List of intermediate addresses of the route. (optional)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to false)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="language">Language of travel directions. (optional, default to en)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to None)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to none)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to false)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to false)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to false)</param>
        /// <returns>ApiResponse of GeoRouteResponse</returns>
        public ApiResponse< GeoRouteResponse > GetRouteByAddressWithHttpInfo (string startAddress, string endAddress, string db = null, string country = null, string intermediateAddresses = null, string oip = null, string destinationSrs = null, string optimizeBy = null, string returnDistance = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string language = null, string directionsStyle = null, string segmentGeometryStyle = null, string primaryNameOnly = null, string majorRoads = null, string historicTrafficTimeBucket = null, string returnDirectionGeometry = null)
        {
            // verify the required parameter 'startAddress' is set
            if (startAddress == null)
                throw new ApiException(400, "Missing required parameter 'startAddress' when calling LIAPIGeoRouteServiceApi->GetRouteByAddress");
            // verify the required parameter 'endAddress' is set
            if (endAddress == null)
                throw new ApiException(400, "Missing required parameter 'endAddress' when calling LIAPIGeoRouteServiceApi->GetRouteByAddress");

            var localVarPath = "/georoute/v1/route/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (startAddress != null) localVarQueryParams.Add("startAddress", Configuration.ApiClient.ParameterToString(startAddress)); // query parameter
            if (endAddress != null) localVarQueryParams.Add("endAddress", Configuration.ApiClient.ParameterToString(endAddress)); // query parameter
            if (db != null) localVarQueryParams.Add("db", Configuration.ApiClient.ParameterToString(db)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (intermediateAddresses != null) localVarQueryParams.Add("intermediateAddresses", Configuration.ApiClient.ParameterToString(intermediateAddresses)); // query parameter
            if (oip != null) localVarQueryParams.Add("oip", Configuration.ApiClient.ParameterToString(oip)); // query parameter
            if (destinationSrs != null) localVarQueryParams.Add("destinationSrs", Configuration.ApiClient.ParameterToString(destinationSrs)); // query parameter
            if (optimizeBy != null) localVarQueryParams.Add("optimizeBy", Configuration.ApiClient.ParameterToString(optimizeBy)); // query parameter
            if (returnDistance != null) localVarQueryParams.Add("returnDistance", Configuration.ApiClient.ParameterToString(returnDistance)); // query parameter
            if (distanceUnit != null) localVarQueryParams.Add("distanceUnit", Configuration.ApiClient.ParameterToString(distanceUnit)); // query parameter
            if (returnTime != null) localVarQueryParams.Add("returnTime", Configuration.ApiClient.ParameterToString(returnTime)); // query parameter
            if (timeUnit != null) localVarQueryParams.Add("timeUnit", Configuration.ApiClient.ParameterToString(timeUnit)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (directionsStyle != null) localVarQueryParams.Add("directionsStyle", Configuration.ApiClient.ParameterToString(directionsStyle)); // query parameter
            if (segmentGeometryStyle != null) localVarQueryParams.Add("segmentGeometryStyle", Configuration.ApiClient.ParameterToString(segmentGeometryStyle)); // query parameter
            if (primaryNameOnly != null) localVarQueryParams.Add("primaryNameOnly", Configuration.ApiClient.ParameterToString(primaryNameOnly)); // query parameter
            if (majorRoads != null) localVarQueryParams.Add("majorRoads", Configuration.ApiClient.ParameterToString(majorRoads)); // query parameter
            if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter
            if (returnDirectionGeometry != null) localVarQueryParams.Add("returnDirectionGeometry", Configuration.ApiClient.ParameterToString(returnDirectionGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRouteByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoRouteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoRouteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoRouteResponse)));
            
        }

        /// <summary>
        /// Gets Route by Address Routing Directions for Single and Multiple Origin &amp; Destination Inputs. Accepts addresses as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddress">Starting address of the route.</param>
        /// <param name="endAddress">Ending address of the route.</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="country">Three digit ISO country code (optional, default to USA)</param>
        /// <param name="intermediateAddresses">List of intermediate addresses of the route. (optional)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to false)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="language">Language of travel directions. (optional, default to en)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to None)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to none)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to false)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to false)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to false)</param>
        /// <returns>Task of GeoRouteResponse</returns>
        public async System.Threading.Tasks.Task<GeoRouteResponse> GetRouteByAddressAsync (string startAddress, string endAddress, string db = null, string country = null, string intermediateAddresses = null, string oip = null, string destinationSrs = null, string optimizeBy = null, string returnDistance = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string language = null, string directionsStyle = null, string segmentGeometryStyle = null, string primaryNameOnly = null, string majorRoads = null, string historicTrafficTimeBucket = null, string returnDirectionGeometry = null)
        {
             ApiResponse<GeoRouteResponse> localVarResponse = await GetRouteByAddressAsyncWithHttpInfo(startAddress, endAddress, db, country, intermediateAddresses, oip, destinationSrs, optimizeBy, returnDistance, distanceUnit, returnTime, timeUnit, language, directionsStyle, segmentGeometryStyle, primaryNameOnly, majorRoads, historicTrafficTimeBucket, returnDirectionGeometry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Route by Address Routing Directions for Single and Multiple Origin &amp; Destination Inputs. Accepts addresses as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddress">Starting address of the route.</param>
        /// <param name="endAddress">Ending address of the route.</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="country">Three digit ISO country code (optional, default to USA)</param>
        /// <param name="intermediateAddresses">List of intermediate addresses of the route. (optional)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to false)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="language">Language of travel directions. (optional, default to en)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to None)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to none)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to false)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to false)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (GeoRouteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeoRouteResponse>> GetRouteByAddressAsyncWithHttpInfo (string startAddress, string endAddress, string db = null, string country = null, string intermediateAddresses = null, string oip = null, string destinationSrs = null, string optimizeBy = null, string returnDistance = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string language = null, string directionsStyle = null, string segmentGeometryStyle = null, string primaryNameOnly = null, string majorRoads = null, string historicTrafficTimeBucket = null, string returnDirectionGeometry = null)
        {
            // verify the required parameter 'startAddress' is set
            if (startAddress == null)
                throw new ApiException(400, "Missing required parameter 'startAddress' when calling LIAPIGeoRouteServiceApi->GetRouteByAddress");
            // verify the required parameter 'endAddress' is set
            if (endAddress == null)
                throw new ApiException(400, "Missing required parameter 'endAddress' when calling LIAPIGeoRouteServiceApi->GetRouteByAddress");

            var localVarPath = "/georoute/v1/route/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (startAddress != null) localVarQueryParams.Add("startAddress", Configuration.ApiClient.ParameterToString(startAddress)); // query parameter
            if (endAddress != null) localVarQueryParams.Add("endAddress", Configuration.ApiClient.ParameterToString(endAddress)); // query parameter
            if (db != null) localVarQueryParams.Add("db", Configuration.ApiClient.ParameterToString(db)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (intermediateAddresses != null) localVarQueryParams.Add("intermediateAddresses", Configuration.ApiClient.ParameterToString(intermediateAddresses)); // query parameter
            if (oip != null) localVarQueryParams.Add("oip", Configuration.ApiClient.ParameterToString(oip)); // query parameter
            if (destinationSrs != null) localVarQueryParams.Add("destinationSrs", Configuration.ApiClient.ParameterToString(destinationSrs)); // query parameter
            if (optimizeBy != null) localVarQueryParams.Add("optimizeBy", Configuration.ApiClient.ParameterToString(optimizeBy)); // query parameter
            if (returnDistance != null) localVarQueryParams.Add("returnDistance", Configuration.ApiClient.ParameterToString(returnDistance)); // query parameter
            if (distanceUnit != null) localVarQueryParams.Add("distanceUnit", Configuration.ApiClient.ParameterToString(distanceUnit)); // query parameter
            if (returnTime != null) localVarQueryParams.Add("returnTime", Configuration.ApiClient.ParameterToString(returnTime)); // query parameter
            if (timeUnit != null) localVarQueryParams.Add("timeUnit", Configuration.ApiClient.ParameterToString(timeUnit)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (directionsStyle != null) localVarQueryParams.Add("directionsStyle", Configuration.ApiClient.ParameterToString(directionsStyle)); // query parameter
            if (segmentGeometryStyle != null) localVarQueryParams.Add("segmentGeometryStyle", Configuration.ApiClient.ParameterToString(segmentGeometryStyle)); // query parameter
            if (primaryNameOnly != null) localVarQueryParams.Add("primaryNameOnly", Configuration.ApiClient.ParameterToString(primaryNameOnly)); // query parameter
            if (majorRoads != null) localVarQueryParams.Add("majorRoads", Configuration.ApiClient.ParameterToString(majorRoads)); // query parameter
            if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter
            if (returnDirectionGeometry != null) localVarQueryParams.Add("returnDirectionGeometry", Configuration.ApiClient.ParameterToString(returnDirectionGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRouteByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoRouteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoRouteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoRouteResponse)));
            
        }

        /// <summary>
        /// Gets Route by Location Returns the fastest or shortest route based on a starting and ending location with optional intermediate points as input.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoint">Start Point in &#39;Lat,Long,coordsys&#39; format</param>
        /// <param name="endPoint">End Point in &#39;Lat,Long,coordsys&#39; format</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="intermediatePoints">List of intermediate points of the route. (optional)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to false)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="language">Specifies the language of travel directions. (optional, default to en)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to None)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to none)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to false)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to false)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to false)</param>
        /// <returns>GeoRouteResponse</returns>
        public GeoRouteResponse GetRouteByLocation (string startPoint, string endPoint, string db = null, string intermediatePoints = null, string oip = null, string destinationSrs = null, string optimizeBy = null, string returnDistance = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string language = null, string directionsStyle = null, string segmentGeometryStyle = null, string primaryNameOnly = null, string majorRoads = null, string historicTrafficTimeBucket = null, string returnDirectionGeometry = null)
        {
             ApiResponse<GeoRouteResponse> localVarResponse = GetRouteByLocationWithHttpInfo(startPoint, endPoint, db, intermediatePoints, oip, destinationSrs, optimizeBy, returnDistance, distanceUnit, returnTime, timeUnit, language, directionsStyle, segmentGeometryStyle, primaryNameOnly, majorRoads, historicTrafficTimeBucket, returnDirectionGeometry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Route by Location Returns the fastest or shortest route based on a starting and ending location with optional intermediate points as input.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoint">Start Point in &#39;Lat,Long,coordsys&#39; format</param>
        /// <param name="endPoint">End Point in &#39;Lat,Long,coordsys&#39; format</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="intermediatePoints">List of intermediate points of the route. (optional)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to false)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="language">Specifies the language of travel directions. (optional, default to en)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to None)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to none)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to false)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to false)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to false)</param>
        /// <returns>ApiResponse of GeoRouteResponse</returns>
        public ApiResponse< GeoRouteResponse > GetRouteByLocationWithHttpInfo (string startPoint, string endPoint, string db = null, string intermediatePoints = null, string oip = null, string destinationSrs = null, string optimizeBy = null, string returnDistance = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string language = null, string directionsStyle = null, string segmentGeometryStyle = null, string primaryNameOnly = null, string majorRoads = null, string historicTrafficTimeBucket = null, string returnDirectionGeometry = null)
        {
            // verify the required parameter 'startPoint' is set
            if (startPoint == null)
                throw new ApiException(400, "Missing required parameter 'startPoint' when calling LIAPIGeoRouteServiceApi->GetRouteByLocation");
            // verify the required parameter 'endPoint' is set
            if (endPoint == null)
                throw new ApiException(400, "Missing required parameter 'endPoint' when calling LIAPIGeoRouteServiceApi->GetRouteByLocation");

            var localVarPath = "/georoute/v1/route/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (startPoint != null) localVarQueryParams.Add("startPoint", Configuration.ApiClient.ParameterToString(startPoint)); // query parameter
            if (endPoint != null) localVarQueryParams.Add("endPoint", Configuration.ApiClient.ParameterToString(endPoint)); // query parameter
            if (db != null) localVarQueryParams.Add("db", Configuration.ApiClient.ParameterToString(db)); // query parameter
            if (intermediatePoints != null) localVarQueryParams.Add("intermediatePoints", Configuration.ApiClient.ParameterToString(intermediatePoints)); // query parameter
            if (oip != null) localVarQueryParams.Add("oip", Configuration.ApiClient.ParameterToString(oip)); // query parameter
            if (destinationSrs != null) localVarQueryParams.Add("destinationSrs", Configuration.ApiClient.ParameterToString(destinationSrs)); // query parameter
            if (optimizeBy != null) localVarQueryParams.Add("optimizeBy", Configuration.ApiClient.ParameterToString(optimizeBy)); // query parameter
            if (returnDistance != null) localVarQueryParams.Add("returnDistance", Configuration.ApiClient.ParameterToString(returnDistance)); // query parameter
            if (distanceUnit != null) localVarQueryParams.Add("distanceUnit", Configuration.ApiClient.ParameterToString(distanceUnit)); // query parameter
            if (returnTime != null) localVarQueryParams.Add("returnTime", Configuration.ApiClient.ParameterToString(returnTime)); // query parameter
            if (timeUnit != null) localVarQueryParams.Add("timeUnit", Configuration.ApiClient.ParameterToString(timeUnit)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (directionsStyle != null) localVarQueryParams.Add("directionsStyle", Configuration.ApiClient.ParameterToString(directionsStyle)); // query parameter
            if (segmentGeometryStyle != null) localVarQueryParams.Add("segmentGeometryStyle", Configuration.ApiClient.ParameterToString(segmentGeometryStyle)); // query parameter
            if (primaryNameOnly != null) localVarQueryParams.Add("primaryNameOnly", Configuration.ApiClient.ParameterToString(primaryNameOnly)); // query parameter
            if (majorRoads != null) localVarQueryParams.Add("majorRoads", Configuration.ApiClient.ParameterToString(majorRoads)); // query parameter
            if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter
            if (returnDirectionGeometry != null) localVarQueryParams.Add("returnDirectionGeometry", Configuration.ApiClient.ParameterToString(returnDirectionGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRouteByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoRouteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoRouteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoRouteResponse)));
            
        }

        /// <summary>
        /// Gets Route by Location Returns the fastest or shortest route based on a starting and ending location with optional intermediate points as input.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoint">Start Point in &#39;Lat,Long,coordsys&#39; format</param>
        /// <param name="endPoint">End Point in &#39;Lat,Long,coordsys&#39; format</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="intermediatePoints">List of intermediate points of the route. (optional)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to false)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="language">Specifies the language of travel directions. (optional, default to en)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to None)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to none)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to false)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to false)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to false)</param>
        /// <returns>Task of GeoRouteResponse</returns>
        public async System.Threading.Tasks.Task<GeoRouteResponse> GetRouteByLocationAsync (string startPoint, string endPoint, string db = null, string intermediatePoints = null, string oip = null, string destinationSrs = null, string optimizeBy = null, string returnDistance = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string language = null, string directionsStyle = null, string segmentGeometryStyle = null, string primaryNameOnly = null, string majorRoads = null, string historicTrafficTimeBucket = null, string returnDirectionGeometry = null)
        {
             ApiResponse<GeoRouteResponse> localVarResponse = await GetRouteByLocationAsyncWithHttpInfo(startPoint, endPoint, db, intermediatePoints, oip, destinationSrs, optimizeBy, returnDistance, distanceUnit, returnTime, timeUnit, language, directionsStyle, segmentGeometryStyle, primaryNameOnly, majorRoads, historicTrafficTimeBucket, returnDirectionGeometry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Route by Location Returns the fastest or shortest route based on a starting and ending location with optional intermediate points as input.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoint">Start Point in &#39;Lat,Long,coordsys&#39; format</param>
        /// <param name="endPoint">End Point in &#39;Lat,Long,coordsys&#39; format</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="intermediatePoints">List of intermediate points of the route. (optional)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to false)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="language">Specifies the language of travel directions. (optional, default to en)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to None)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to none)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to false)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to false)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (GeoRouteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeoRouteResponse>> GetRouteByLocationAsyncWithHttpInfo (string startPoint, string endPoint, string db = null, string intermediatePoints = null, string oip = null, string destinationSrs = null, string optimizeBy = null, string returnDistance = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string language = null, string directionsStyle = null, string segmentGeometryStyle = null, string primaryNameOnly = null, string majorRoads = null, string historicTrafficTimeBucket = null, string returnDirectionGeometry = null)
        {
            // verify the required parameter 'startPoint' is set
            if (startPoint == null)
                throw new ApiException(400, "Missing required parameter 'startPoint' when calling LIAPIGeoRouteServiceApi->GetRouteByLocation");
            // verify the required parameter 'endPoint' is set
            if (endPoint == null)
                throw new ApiException(400, "Missing required parameter 'endPoint' when calling LIAPIGeoRouteServiceApi->GetRouteByLocation");

            var localVarPath = "/georoute/v1/route/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (startPoint != null) localVarQueryParams.Add("startPoint", Configuration.ApiClient.ParameterToString(startPoint)); // query parameter
            if (endPoint != null) localVarQueryParams.Add("endPoint", Configuration.ApiClient.ParameterToString(endPoint)); // query parameter
            if (db != null) localVarQueryParams.Add("db", Configuration.ApiClient.ParameterToString(db)); // query parameter
            if (intermediatePoints != null) localVarQueryParams.Add("intermediatePoints", Configuration.ApiClient.ParameterToString(intermediatePoints)); // query parameter
            if (oip != null) localVarQueryParams.Add("oip", Configuration.ApiClient.ParameterToString(oip)); // query parameter
            if (destinationSrs != null) localVarQueryParams.Add("destinationSrs", Configuration.ApiClient.ParameterToString(destinationSrs)); // query parameter
            if (optimizeBy != null) localVarQueryParams.Add("optimizeBy", Configuration.ApiClient.ParameterToString(optimizeBy)); // query parameter
            if (returnDistance != null) localVarQueryParams.Add("returnDistance", Configuration.ApiClient.ParameterToString(returnDistance)); // query parameter
            if (distanceUnit != null) localVarQueryParams.Add("distanceUnit", Configuration.ApiClient.ParameterToString(distanceUnit)); // query parameter
            if (returnTime != null) localVarQueryParams.Add("returnTime", Configuration.ApiClient.ParameterToString(returnTime)); // query parameter
            if (timeUnit != null) localVarQueryParams.Add("timeUnit", Configuration.ApiClient.ParameterToString(timeUnit)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (directionsStyle != null) localVarQueryParams.Add("directionsStyle", Configuration.ApiClient.ParameterToString(directionsStyle)); // query parameter
            if (segmentGeometryStyle != null) localVarQueryParams.Add("segmentGeometryStyle", Configuration.ApiClient.ParameterToString(segmentGeometryStyle)); // query parameter
            if (primaryNameOnly != null) localVarQueryParams.Add("primaryNameOnly", Configuration.ApiClient.ParameterToString(primaryNameOnly)); // query parameter
            if (majorRoads != null) localVarQueryParams.Add("majorRoads", Configuration.ApiClient.ParameterToString(majorRoads)); // query parameter
            if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter
            if (returnDirectionGeometry != null) localVarQueryParams.Add("returnDirectionGeometry", Configuration.ApiClient.ParameterToString(returnDirectionGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRouteByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoRouteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoRouteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoRouteResponse)));
            
        }

        /// <summary>
        /// Gets Cost Matrix by Address Calculates the travel time and distances between an array of start and end addresses.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddresses">Start locations in text based addresses.</param>
        /// <param name="endAddresses">End locations in text based addresses.</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="country">3 Digit ISO country code. (optional, default to USA)</param>
        /// <param name="optimizeBy">Specifies the type of optimizing to use for the route (time/distance). (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether to return the travel distance in the response or not. (optional, default to true)</param>
        /// <param name="destinationSrs">Coordinate system used for the returned routes. (optional)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether to return the travel time in the response or not. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to false)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to true)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <returns>TravelCostMatrixResponse</returns>
        public TravelCostMatrixResponse GetTravelCostMatrixByAddress (string startAddresses, string endAddresses, string db = null, string country = null, string optimizeBy = null, string returnDistance = null, string destinationSrs = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string majorRoads = null, string returnOptimalRoutesOnly = null, string historicTrafficTimeBucket = null)
        {
             ApiResponse<TravelCostMatrixResponse> localVarResponse = GetTravelCostMatrixByAddressWithHttpInfo(startAddresses, endAddresses, db, country, optimizeBy, returnDistance, destinationSrs, distanceUnit, returnTime, timeUnit, majorRoads, returnOptimalRoutesOnly, historicTrafficTimeBucket);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Cost Matrix by Address Calculates the travel time and distances between an array of start and end addresses.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddresses">Start locations in text based addresses.</param>
        /// <param name="endAddresses">End locations in text based addresses.</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="country">3 Digit ISO country code. (optional, default to USA)</param>
        /// <param name="optimizeBy">Specifies the type of optimizing to use for the route (time/distance). (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether to return the travel distance in the response or not. (optional, default to true)</param>
        /// <param name="destinationSrs">Coordinate system used for the returned routes. (optional)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether to return the travel time in the response or not. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to false)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to true)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <returns>ApiResponse of TravelCostMatrixResponse</returns>
        public ApiResponse< TravelCostMatrixResponse > GetTravelCostMatrixByAddressWithHttpInfo (string startAddresses, string endAddresses, string db = null, string country = null, string optimizeBy = null, string returnDistance = null, string destinationSrs = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string majorRoads = null, string returnOptimalRoutesOnly = null, string historicTrafficTimeBucket = null)
        {
            // verify the required parameter 'startAddresses' is set
            if (startAddresses == null)
                throw new ApiException(400, "Missing required parameter 'startAddresses' when calling LIAPIGeoRouteServiceApi->GetTravelCostMatrixByAddress");
            // verify the required parameter 'endAddresses' is set
            if (endAddresses == null)
                throw new ApiException(400, "Missing required parameter 'endAddresses' when calling LIAPIGeoRouteServiceApi->GetTravelCostMatrixByAddress");

            var localVarPath = "/georoute/v1/travelcostmatrix/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (startAddresses != null) localVarQueryParams.Add("startAddresses", Configuration.ApiClient.ParameterToString(startAddresses)); // query parameter
            if (endAddresses != null) localVarQueryParams.Add("endAddresses", Configuration.ApiClient.ParameterToString(endAddresses)); // query parameter
            if (db != null) localVarQueryParams.Add("db", Configuration.ApiClient.ParameterToString(db)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (optimizeBy != null) localVarQueryParams.Add("optimizeBy", Configuration.ApiClient.ParameterToString(optimizeBy)); // query parameter
            if (returnDistance != null) localVarQueryParams.Add("returnDistance", Configuration.ApiClient.ParameterToString(returnDistance)); // query parameter
            if (destinationSrs != null) localVarQueryParams.Add("destinationSrs", Configuration.ApiClient.ParameterToString(destinationSrs)); // query parameter
            if (distanceUnit != null) localVarQueryParams.Add("distanceUnit", Configuration.ApiClient.ParameterToString(distanceUnit)); // query parameter
            if (returnTime != null) localVarQueryParams.Add("returnTime", Configuration.ApiClient.ParameterToString(returnTime)); // query parameter
            if (timeUnit != null) localVarQueryParams.Add("timeUnit", Configuration.ApiClient.ParameterToString(timeUnit)); // query parameter
            if (majorRoads != null) localVarQueryParams.Add("majorRoads", Configuration.ApiClient.ParameterToString(majorRoads)); // query parameter
            if (returnOptimalRoutesOnly != null) localVarQueryParams.Add("returnOptimalRoutesOnly", Configuration.ApiClient.ParameterToString(returnOptimalRoutesOnly)); // query parameter
            if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTravelCostMatrixByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TravelCostMatrixResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TravelCostMatrixResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TravelCostMatrixResponse)));
            
        }

        /// <summary>
        /// Gets Cost Matrix by Address Calculates the travel time and distances between an array of start and end addresses.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddresses">Start locations in text based addresses.</param>
        /// <param name="endAddresses">End locations in text based addresses.</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="country">3 Digit ISO country code. (optional, default to USA)</param>
        /// <param name="optimizeBy">Specifies the type of optimizing to use for the route (time/distance). (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether to return the travel distance in the response or not. (optional, default to true)</param>
        /// <param name="destinationSrs">Coordinate system used for the returned routes. (optional)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether to return the travel time in the response or not. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to false)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to true)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <returns>Task of TravelCostMatrixResponse</returns>
        public async System.Threading.Tasks.Task<TravelCostMatrixResponse> GetTravelCostMatrixByAddressAsync (string startAddresses, string endAddresses, string db = null, string country = null, string optimizeBy = null, string returnDistance = null, string destinationSrs = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string majorRoads = null, string returnOptimalRoutesOnly = null, string historicTrafficTimeBucket = null)
        {
             ApiResponse<TravelCostMatrixResponse> localVarResponse = await GetTravelCostMatrixByAddressAsyncWithHttpInfo(startAddresses, endAddresses, db, country, optimizeBy, returnDistance, destinationSrs, distanceUnit, returnTime, timeUnit, majorRoads, returnOptimalRoutesOnly, historicTrafficTimeBucket);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Cost Matrix by Address Calculates the travel time and distances between an array of start and end addresses.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddresses">Start locations in text based addresses.</param>
        /// <param name="endAddresses">End locations in text based addresses.</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="country">3 Digit ISO country code. (optional, default to USA)</param>
        /// <param name="optimizeBy">Specifies the type of optimizing to use for the route (time/distance). (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether to return the travel distance in the response or not. (optional, default to true)</param>
        /// <param name="destinationSrs">Coordinate system used for the returned routes. (optional)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether to return the travel time in the response or not. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to false)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to true)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <returns>Task of ApiResponse (TravelCostMatrixResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TravelCostMatrixResponse>> GetTravelCostMatrixByAddressAsyncWithHttpInfo (string startAddresses, string endAddresses, string db = null, string country = null, string optimizeBy = null, string returnDistance = null, string destinationSrs = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string majorRoads = null, string returnOptimalRoutesOnly = null, string historicTrafficTimeBucket = null)
        {
            // verify the required parameter 'startAddresses' is set
            if (startAddresses == null)
                throw new ApiException(400, "Missing required parameter 'startAddresses' when calling LIAPIGeoRouteServiceApi->GetTravelCostMatrixByAddress");
            // verify the required parameter 'endAddresses' is set
            if (endAddresses == null)
                throw new ApiException(400, "Missing required parameter 'endAddresses' when calling LIAPIGeoRouteServiceApi->GetTravelCostMatrixByAddress");

            var localVarPath = "/georoute/v1/travelcostmatrix/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (startAddresses != null) localVarQueryParams.Add("startAddresses", Configuration.ApiClient.ParameterToString(startAddresses)); // query parameter
            if (endAddresses != null) localVarQueryParams.Add("endAddresses", Configuration.ApiClient.ParameterToString(endAddresses)); // query parameter
            if (db != null) localVarQueryParams.Add("db", Configuration.ApiClient.ParameterToString(db)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (optimizeBy != null) localVarQueryParams.Add("optimizeBy", Configuration.ApiClient.ParameterToString(optimizeBy)); // query parameter
            if (returnDistance != null) localVarQueryParams.Add("returnDistance", Configuration.ApiClient.ParameterToString(returnDistance)); // query parameter
            if (destinationSrs != null) localVarQueryParams.Add("destinationSrs", Configuration.ApiClient.ParameterToString(destinationSrs)); // query parameter
            if (distanceUnit != null) localVarQueryParams.Add("distanceUnit", Configuration.ApiClient.ParameterToString(distanceUnit)); // query parameter
            if (returnTime != null) localVarQueryParams.Add("returnTime", Configuration.ApiClient.ParameterToString(returnTime)); // query parameter
            if (timeUnit != null) localVarQueryParams.Add("timeUnit", Configuration.ApiClient.ParameterToString(timeUnit)); // query parameter
            if (majorRoads != null) localVarQueryParams.Add("majorRoads", Configuration.ApiClient.ParameterToString(majorRoads)); // query parameter
            if (returnOptimalRoutesOnly != null) localVarQueryParams.Add("returnOptimalRoutesOnly", Configuration.ApiClient.ParameterToString(returnOptimalRoutesOnly)); // query parameter
            if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTravelCostMatrixByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TravelCostMatrixResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TravelCostMatrixResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TravelCostMatrixResponse)));
            
        }

        /// <summary>
        /// Gets Cost Matrix by Location GeoRoute&#39;s &#39;Travel Cost Matrix By Location&#39; service calculates the travel time and distances between an array of start and end points based on location coordinates.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoints">The address to be searched.</param>
        /// <param name="endPoints">The address to be searched.</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="optimizeBy">Specifies whether routes should be optimized by time or distance. (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be returned in response. (optional, default to true)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of returned routes. (optional)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether time needs to be returned in response. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to false)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to true)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <returns>TravelCostMatrixResponse</returns>
        public TravelCostMatrixResponse GetTravelCostMatrixByLocation (string startPoints, string endPoints, string db = null, string optimizeBy = null, string returnDistance = null, string destinationSrs = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string majorRoads = null, string returnOptimalRoutesOnly = null, string historicTrafficTimeBucket = null)
        {
             ApiResponse<TravelCostMatrixResponse> localVarResponse = GetTravelCostMatrixByLocationWithHttpInfo(startPoints, endPoints, db, optimizeBy, returnDistance, destinationSrs, distanceUnit, returnTime, timeUnit, majorRoads, returnOptimalRoutesOnly, historicTrafficTimeBucket);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Cost Matrix by Location GeoRoute&#39;s &#39;Travel Cost Matrix By Location&#39; service calculates the travel time and distances between an array of start and end points based on location coordinates.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoints">The address to be searched.</param>
        /// <param name="endPoints">The address to be searched.</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="optimizeBy">Specifies whether routes should be optimized by time or distance. (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be returned in response. (optional, default to true)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of returned routes. (optional)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether time needs to be returned in response. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to false)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to true)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <returns>ApiResponse of TravelCostMatrixResponse</returns>
        public ApiResponse< TravelCostMatrixResponse > GetTravelCostMatrixByLocationWithHttpInfo (string startPoints, string endPoints, string db = null, string optimizeBy = null, string returnDistance = null, string destinationSrs = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string majorRoads = null, string returnOptimalRoutesOnly = null, string historicTrafficTimeBucket = null)
        {
            // verify the required parameter 'startPoints' is set
            if (startPoints == null)
                throw new ApiException(400, "Missing required parameter 'startPoints' when calling LIAPIGeoRouteServiceApi->GetTravelCostMatrixByLocation");
            // verify the required parameter 'endPoints' is set
            if (endPoints == null)
                throw new ApiException(400, "Missing required parameter 'endPoints' when calling LIAPIGeoRouteServiceApi->GetTravelCostMatrixByLocation");

            var localVarPath = "/georoute/v1/travelcostmatrix/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (startPoints != null) localVarQueryParams.Add("startPoints", Configuration.ApiClient.ParameterToString(startPoints)); // query parameter
            if (endPoints != null) localVarQueryParams.Add("endPoints", Configuration.ApiClient.ParameterToString(endPoints)); // query parameter
            if (db != null) localVarQueryParams.Add("db", Configuration.ApiClient.ParameterToString(db)); // query parameter
            if (optimizeBy != null) localVarQueryParams.Add("optimizeBy", Configuration.ApiClient.ParameterToString(optimizeBy)); // query parameter
            if (returnDistance != null) localVarQueryParams.Add("returnDistance", Configuration.ApiClient.ParameterToString(returnDistance)); // query parameter
            if (destinationSrs != null) localVarQueryParams.Add("destinationSrs", Configuration.ApiClient.ParameterToString(destinationSrs)); // query parameter
            if (distanceUnit != null) localVarQueryParams.Add("distanceUnit", Configuration.ApiClient.ParameterToString(distanceUnit)); // query parameter
            if (returnTime != null) localVarQueryParams.Add("returnTime", Configuration.ApiClient.ParameterToString(returnTime)); // query parameter
            if (timeUnit != null) localVarQueryParams.Add("timeUnit", Configuration.ApiClient.ParameterToString(timeUnit)); // query parameter
            if (majorRoads != null) localVarQueryParams.Add("majorRoads", Configuration.ApiClient.ParameterToString(majorRoads)); // query parameter
            if (returnOptimalRoutesOnly != null) localVarQueryParams.Add("returnOptimalRoutesOnly", Configuration.ApiClient.ParameterToString(returnOptimalRoutesOnly)); // query parameter
            if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTravelCostMatrixByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TravelCostMatrixResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TravelCostMatrixResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TravelCostMatrixResponse)));
            
        }

        /// <summary>
        /// Gets Cost Matrix by Location GeoRoute&#39;s &#39;Travel Cost Matrix By Location&#39; service calculates the travel time and distances between an array of start and end points based on location coordinates.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoints">The address to be searched.</param>
        /// <param name="endPoints">The address to be searched.</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="optimizeBy">Specifies whether routes should be optimized by time or distance. (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be returned in response. (optional, default to true)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of returned routes. (optional)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether time needs to be returned in response. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to false)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to true)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <returns>Task of TravelCostMatrixResponse</returns>
        public async System.Threading.Tasks.Task<TravelCostMatrixResponse> GetTravelCostMatrixByLocationAsync (string startPoints, string endPoints, string db = null, string optimizeBy = null, string returnDistance = null, string destinationSrs = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string majorRoads = null, string returnOptimalRoutesOnly = null, string historicTrafficTimeBucket = null)
        {
             ApiResponse<TravelCostMatrixResponse> localVarResponse = await GetTravelCostMatrixByLocationAsyncWithHttpInfo(startPoints, endPoints, db, optimizeBy, returnDistance, destinationSrs, distanceUnit, returnTime, timeUnit, majorRoads, returnOptimalRoutesOnly, historicTrafficTimeBucket);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Cost Matrix by Location GeoRoute&#39;s &#39;Travel Cost Matrix By Location&#39; service calculates the travel time and distances between an array of start and end points based on location coordinates.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoints">The address to be searched.</param>
        /// <param name="endPoints">The address to be searched.</param>
        /// <param name="db">Mode of commute. (optional, default to driving)</param>
        /// <param name="optimizeBy">Specifies whether routes should be optimized by time or distance. (optional, default to time)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be returned in response. (optional, default to true)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of returned routes. (optional)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to m)</param>
        /// <param name="returnTime">Specifies whether time needs to be returned in response. (optional, default to true)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to min)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to false)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to true)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to None)</param>
        /// <returns>Task of ApiResponse (TravelCostMatrixResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TravelCostMatrixResponse>> GetTravelCostMatrixByLocationAsyncWithHttpInfo (string startPoints, string endPoints, string db = null, string optimizeBy = null, string returnDistance = null, string destinationSrs = null, string distanceUnit = null, string returnTime = null, string timeUnit = null, string majorRoads = null, string returnOptimalRoutesOnly = null, string historicTrafficTimeBucket = null)
        {
            // verify the required parameter 'startPoints' is set
            if (startPoints == null)
                throw new ApiException(400, "Missing required parameter 'startPoints' when calling LIAPIGeoRouteServiceApi->GetTravelCostMatrixByLocation");
            // verify the required parameter 'endPoints' is set
            if (endPoints == null)
                throw new ApiException(400, "Missing required parameter 'endPoints' when calling LIAPIGeoRouteServiceApi->GetTravelCostMatrixByLocation");

            var localVarPath = "/georoute/v1/travelcostmatrix/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (startPoints != null) localVarQueryParams.Add("startPoints", Configuration.ApiClient.ParameterToString(startPoints)); // query parameter
            if (endPoints != null) localVarQueryParams.Add("endPoints", Configuration.ApiClient.ParameterToString(endPoints)); // query parameter
            if (db != null) localVarQueryParams.Add("db", Configuration.ApiClient.ParameterToString(db)); // query parameter
            if (optimizeBy != null) localVarQueryParams.Add("optimizeBy", Configuration.ApiClient.ParameterToString(optimizeBy)); // query parameter
            if (returnDistance != null) localVarQueryParams.Add("returnDistance", Configuration.ApiClient.ParameterToString(returnDistance)); // query parameter
            if (destinationSrs != null) localVarQueryParams.Add("destinationSrs", Configuration.ApiClient.ParameterToString(destinationSrs)); // query parameter
            if (distanceUnit != null) localVarQueryParams.Add("distanceUnit", Configuration.ApiClient.ParameterToString(distanceUnit)); // query parameter
            if (returnTime != null) localVarQueryParams.Add("returnTime", Configuration.ApiClient.ParameterToString(returnTime)); // query parameter
            if (timeUnit != null) localVarQueryParams.Add("timeUnit", Configuration.ApiClient.ParameterToString(timeUnit)); // query parameter
            if (majorRoads != null) localVarQueryParams.Add("majorRoads", Configuration.ApiClient.ParameterToString(majorRoads)); // query parameter
            if (returnOptimalRoutesOnly != null) localVarQueryParams.Add("returnOptimalRoutesOnly", Configuration.ApiClient.ParameterToString(returnOptimalRoutesOnly)); // query parameter
            if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTravelCostMatrixByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TravelCostMatrixResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TravelCostMatrixResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TravelCostMatrixResponse)));
            
        }

    }
}
