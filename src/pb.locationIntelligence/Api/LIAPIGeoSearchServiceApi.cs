/* 
 * Location Intelligence APIs
 *
 * Incorporate our extensive geodata into everyday applications, business processes and workflows.
 *
 * OpenAPI spec version: 4.6.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using pb.locationIntelligence.Client;
using pb.locationIntelligence.Model;

namespace pb.locationIntelligence.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILIAPIGeoSearchServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets LocationList
        /// </summary>
        /// <remarks>
        /// Gets LocationList
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">The input to be searched.</param>
        /// <param name="latitude">Latitude of the location. Either the latitude or the longitude must be provided. (optional)</param>
        /// <param name="longitude">Longitude of the location. Either the latitude or the longitude must be provided. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="maxCandidates">Maximum number of addresses that can be retrieved. (optional)</param>
        /// <param name="country">Country ISO code. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="matchOnAddressNumber">Option so that we force api to match on address number (optional)</param>
        /// <param name="autoDetectLocation">Option to allow API to detect origin of API request automatically (optional, default to true)</param>
        /// <param name="ipAddress"> (optional)</param>
        /// <param name="areaName1">State province of the input to be searched (optional)</param>
        /// <param name="areaName3">City of the input to be searched (optional)</param>
        /// <param name="postCode">Postal Code of the input to be searched (optional)</param>
        /// <returns>GeosearchLocations</returns>
        GeosearchLocations GeoSearch (string searchText, string latitude = null, string longitude = null, string searchRadius = null, string searchRadiusUnit = null, string maxCandidates = null, string country = null, string matchOnAddressNumber = null, string autoDetectLocation = null, string ipAddress = null, string areaName1 = null, string areaName3 = null, string postCode = null);

        /// <summary>
        /// Gets LocationList
        /// </summary>
        /// <remarks>
        /// Gets LocationList
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">The input to be searched.</param>
        /// <param name="latitude">Latitude of the location. Either the latitude or the longitude must be provided. (optional)</param>
        /// <param name="longitude">Longitude of the location. Either the latitude or the longitude must be provided. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="maxCandidates">Maximum number of addresses that can be retrieved. (optional)</param>
        /// <param name="country">Country ISO code. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="matchOnAddressNumber">Option so that we force api to match on address number (optional)</param>
        /// <param name="autoDetectLocation">Option to allow API to detect origin of API request automatically (optional, default to true)</param>
        /// <param name="ipAddress"> (optional)</param>
        /// <param name="areaName1">State province of the input to be searched (optional)</param>
        /// <param name="areaName3">City of the input to be searched (optional)</param>
        /// <param name="postCode">Postal Code of the input to be searched (optional)</param>
        /// <returns>ApiResponse of GeosearchLocations</returns>
        ApiResponse<GeosearchLocations> GeoSearchWithHttpInfo (string searchText, string latitude = null, string longitude = null, string searchRadius = null, string searchRadiusUnit = null, string maxCandidates = null, string country = null, string matchOnAddressNumber = null, string autoDetectLocation = null, string ipAddress = null, string areaName1 = null, string areaName3 = null, string postCode = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets LocationList
        /// </summary>
        /// <remarks>
        /// Gets LocationList
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">The input to be searched.</param>
        /// <param name="latitude">Latitude of the location. Either the latitude or the longitude must be provided. (optional)</param>
        /// <param name="longitude">Longitude of the location. Either the latitude or the longitude must be provided. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="maxCandidates">Maximum number of addresses that can be retrieved. (optional)</param>
        /// <param name="country">Country ISO code. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="matchOnAddressNumber">Option so that we force api to match on address number (optional)</param>
        /// <param name="autoDetectLocation">Option to allow API to detect origin of API request automatically (optional, default to true)</param>
        /// <param name="ipAddress"> (optional)</param>
        /// <param name="areaName1">State province of the input to be searched (optional)</param>
        /// <param name="areaName3">City of the input to be searched (optional)</param>
        /// <param name="postCode">Postal Code of the input to be searched (optional)</param>
        /// <returns>Task of GeosearchLocations</returns>
        System.Threading.Tasks.Task<GeosearchLocations> GeoSearchAsync (string searchText, string latitude = null, string longitude = null, string searchRadius = null, string searchRadiusUnit = null, string maxCandidates = null, string country = null, string matchOnAddressNumber = null, string autoDetectLocation = null, string ipAddress = null, string areaName1 = null, string areaName3 = null, string postCode = null);

        /// <summary>
        /// Gets LocationList
        /// </summary>
        /// <remarks>
        /// Gets LocationList
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">The input to be searched.</param>
        /// <param name="latitude">Latitude of the location. Either the latitude or the longitude must be provided. (optional)</param>
        /// <param name="longitude">Longitude of the location. Either the latitude or the longitude must be provided. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="maxCandidates">Maximum number of addresses that can be retrieved. (optional)</param>
        /// <param name="country">Country ISO code. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="matchOnAddressNumber">Option so that we force api to match on address number (optional)</param>
        /// <param name="autoDetectLocation">Option to allow API to detect origin of API request automatically (optional, default to true)</param>
        /// <param name="ipAddress"> (optional)</param>
        /// <param name="areaName1">State province of the input to be searched (optional)</param>
        /// <param name="areaName3">City of the input to be searched (optional)</param>
        /// <param name="postCode">Postal Code of the input to be searched (optional)</param>
        /// <returns>Task of ApiResponse (GeosearchLocations)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeosearchLocations>> GeoSearchAsyncWithHttpInfo (string searchText, string latitude = null, string longitude = null, string searchRadius = null, string searchRadiusUnit = null, string maxCandidates = null, string country = null, string matchOnAddressNumber = null, string autoDetectLocation = null, string ipAddress = null, string areaName1 = null, string areaName3 = null, string postCode = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LIAPIGeoSearchServiceApi : ILIAPIGeoSearchServiceApi
    {
        private pb.locationIntelligence.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LIAPIGeoSearchServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LIAPIGeoSearchServiceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = pb.locationIntelligence.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LIAPIGeoSearchServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LIAPIGeoSearchServiceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = pb.locationIntelligence.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public pb.locationIntelligence.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets LocationList Gets LocationList
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">The input to be searched.</param>
        /// <param name="latitude">Latitude of the location. Either the latitude or the longitude must be provided. (optional)</param>
        /// <param name="longitude">Longitude of the location. Either the latitude or the longitude must be provided. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="maxCandidates">Maximum number of addresses that can be retrieved. (optional)</param>
        /// <param name="country">Country ISO code. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="matchOnAddressNumber">Option so that we force api to match on address number (optional)</param>
        /// <param name="autoDetectLocation">Option to allow API to detect origin of API request automatically (optional, default to true)</param>
        /// <param name="ipAddress"> (optional)</param>
        /// <param name="areaName1">State province of the input to be searched (optional)</param>
        /// <param name="areaName3">City of the input to be searched (optional)</param>
        /// <param name="postCode">Postal Code of the input to be searched (optional)</param>
        /// <returns>GeosearchLocations</returns>
        public GeosearchLocations GeoSearch (string searchText, string latitude = null, string longitude = null, string searchRadius = null, string searchRadiusUnit = null, string maxCandidates = null, string country = null, string matchOnAddressNumber = null, string autoDetectLocation = null, string ipAddress = null, string areaName1 = null, string areaName3 = null, string postCode = null)
        {
             ApiResponse<GeosearchLocations> localVarResponse = GeoSearchWithHttpInfo(searchText, latitude, longitude, searchRadius, searchRadiusUnit, maxCandidates, country, matchOnAddressNumber, autoDetectLocation, ipAddress, areaName1, areaName3, postCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets LocationList Gets LocationList
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">The input to be searched.</param>
        /// <param name="latitude">Latitude of the location. Either the latitude or the longitude must be provided. (optional)</param>
        /// <param name="longitude">Longitude of the location. Either the latitude or the longitude must be provided. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="maxCandidates">Maximum number of addresses that can be retrieved. (optional)</param>
        /// <param name="country">Country ISO code. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="matchOnAddressNumber">Option so that we force api to match on address number (optional)</param>
        /// <param name="autoDetectLocation">Option to allow API to detect origin of API request automatically (optional, default to true)</param>
        /// <param name="ipAddress"> (optional)</param>
        /// <param name="areaName1">State province of the input to be searched (optional)</param>
        /// <param name="areaName3">City of the input to be searched (optional)</param>
        /// <param name="postCode">Postal Code of the input to be searched (optional)</param>
        /// <returns>ApiResponse of GeosearchLocations</returns>
        public ApiResponse< GeosearchLocations > GeoSearchWithHttpInfo (string searchText, string latitude = null, string longitude = null, string searchRadius = null, string searchRadiusUnit = null, string maxCandidates = null, string country = null, string matchOnAddressNumber = null, string autoDetectLocation = null, string ipAddress = null, string areaName1 = null, string areaName3 = null, string postCode = null)
        {
            // verify the required parameter 'searchText' is set
            if (searchText == null)
                throw new ApiException(400, "Missing required parameter 'searchText' when calling LIAPIGeoSearchServiceApi->GeoSearch");

            var localVarPath = "/geosearch/v1/locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (searchText != null) localVarQueryParams.Add("searchText", Configuration.ApiClient.ParameterToString(searchText)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (matchOnAddressNumber != null) localVarQueryParams.Add("matchOnAddressNumber", Configuration.ApiClient.ParameterToString(matchOnAddressNumber)); // query parameter
            if (autoDetectLocation != null) localVarQueryParams.Add("autoDetectLocation", Configuration.ApiClient.ParameterToString(autoDetectLocation)); // query parameter
            if (ipAddress != null) localVarQueryParams.Add("ipAddress", Configuration.ApiClient.ParameterToString(ipAddress)); // query parameter
            if (areaName1 != null) localVarQueryParams.Add("areaName1", Configuration.ApiClient.ParameterToString(areaName1)); // query parameter
            if (areaName3 != null) localVarQueryParams.Add("areaName3", Configuration.ApiClient.ParameterToString(areaName3)); // query parameter
            if (postCode != null) localVarQueryParams.Add("postCode", Configuration.ApiClient.ParameterToString(postCode)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeoSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeosearchLocations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeosearchLocations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeosearchLocations)));
            
        }

        /// <summary>
        /// Gets LocationList Gets LocationList
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">The input to be searched.</param>
        /// <param name="latitude">Latitude of the location. Either the latitude or the longitude must be provided. (optional)</param>
        /// <param name="longitude">Longitude of the location. Either the latitude or the longitude must be provided. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="maxCandidates">Maximum number of addresses that can be retrieved. (optional)</param>
        /// <param name="country">Country ISO code. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="matchOnAddressNumber">Option so that we force api to match on address number (optional)</param>
        /// <param name="autoDetectLocation">Option to allow API to detect origin of API request automatically (optional, default to true)</param>
        /// <param name="ipAddress"> (optional)</param>
        /// <param name="areaName1">State province of the input to be searched (optional)</param>
        /// <param name="areaName3">City of the input to be searched (optional)</param>
        /// <param name="postCode">Postal Code of the input to be searched (optional)</param>
        /// <returns>Task of GeosearchLocations</returns>
        public async System.Threading.Tasks.Task<GeosearchLocations> GeoSearchAsync (string searchText, string latitude = null, string longitude = null, string searchRadius = null, string searchRadiusUnit = null, string maxCandidates = null, string country = null, string matchOnAddressNumber = null, string autoDetectLocation = null, string ipAddress = null, string areaName1 = null, string areaName3 = null, string postCode = null)
        {
             ApiResponse<GeosearchLocations> localVarResponse = await GeoSearchAsyncWithHttpInfo(searchText, latitude, longitude, searchRadius, searchRadiusUnit, maxCandidates, country, matchOnAddressNumber, autoDetectLocation, ipAddress, areaName1, areaName3, postCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets LocationList Gets LocationList
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">The input to be searched.</param>
        /// <param name="latitude">Latitude of the location. Either the latitude or the longitude must be provided. (optional)</param>
        /// <param name="longitude">Longitude of the location. Either the latitude or the longitude must be provided. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="maxCandidates">Maximum number of addresses that can be retrieved. (optional)</param>
        /// <param name="country">Country ISO code. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="matchOnAddressNumber">Option so that we force api to match on address number (optional)</param>
        /// <param name="autoDetectLocation">Option to allow API to detect origin of API request automatically (optional, default to true)</param>
        /// <param name="ipAddress"> (optional)</param>
        /// <param name="areaName1">State province of the input to be searched (optional)</param>
        /// <param name="areaName3">City of the input to be searched (optional)</param>
        /// <param name="postCode">Postal Code of the input to be searched (optional)</param>
        /// <returns>Task of ApiResponse (GeosearchLocations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeosearchLocations>> GeoSearchAsyncWithHttpInfo (string searchText, string latitude = null, string longitude = null, string searchRadius = null, string searchRadiusUnit = null, string maxCandidates = null, string country = null, string matchOnAddressNumber = null, string autoDetectLocation = null, string ipAddress = null, string areaName1 = null, string areaName3 = null, string postCode = null)
        {
            // verify the required parameter 'searchText' is set
            if (searchText == null)
                throw new ApiException(400, "Missing required parameter 'searchText' when calling LIAPIGeoSearchServiceApi->GeoSearch");

            var localVarPath = "/geosearch/v1/locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (searchText != null) localVarQueryParams.Add("searchText", Configuration.ApiClient.ParameterToString(searchText)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (matchOnAddressNumber != null) localVarQueryParams.Add("matchOnAddressNumber", Configuration.ApiClient.ParameterToString(matchOnAddressNumber)); // query parameter
            if (autoDetectLocation != null) localVarQueryParams.Add("autoDetectLocation", Configuration.ApiClient.ParameterToString(autoDetectLocation)); // query parameter
            if (ipAddress != null) localVarQueryParams.Add("ipAddress", Configuration.ApiClient.ParameterToString(ipAddress)); // query parameter
            if (areaName1 != null) localVarQueryParams.Add("areaName1", Configuration.ApiClient.ParameterToString(areaName1)); // query parameter
            if (areaName3 != null) localVarQueryParams.Add("areaName3", Configuration.ApiClient.ParameterToString(areaName3)); // query parameter
            if (postCode != null) localVarQueryParams.Add("postCode", Configuration.ApiClient.ParameterToString(postCode)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeoSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeosearchLocations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeosearchLocations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeosearchLocations)));
            
        }

    }
}
