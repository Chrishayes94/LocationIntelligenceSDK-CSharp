/* 
 * Location Intelligence APIs
 *
 * Incorporate our extensive geodata into everyday applications, business processes and workflows.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using pb.locationIntelligence.Client;
using pb.locationIntelligence.Model;

namespace pb.locationIntelligence.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILIAPIGeoTaxServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Post Tax By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Tax By Address&#39; service. It accepts a single address, purchase amount or a list of addresses, purchase amounts and retrieve applicable taxes.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxAddressRequest Class Object having tax request.</param>
        /// <returns>TaxResponses</returns>
        TaxResponses GetBatchTaxByAddress (string taxRateTypeId, TaxAddressRequest body);

        /// <summary>
        /// Post Tax By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Tax By Address&#39; service. It accepts a single address, purchase amount or a list of addresses, purchase amounts and retrieve applicable taxes.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxAddressRequest Class Object having tax request.</param>
        /// <returns>ApiResponse of TaxResponses</returns>
        ApiResponse<TaxResponses> GetBatchTaxByAddressWithHttpInfo (string taxRateTypeId, TaxAddressRequest body);
        /// <summary>
        /// Post Tax By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Tax By Location&#39; service. It accepts a single location coordinate, purchase amount or a list of location coordinates, purchase amounts and retrieve applicable tax.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxAddressRequest Class Object having tax request.</param>
        /// <returns>TaxResponses</returns>
        TaxResponses GetBatchTaxByLocation (string taxRateTypeId, TaxLocationRequest body);

        /// <summary>
        /// Post Tax By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Tax By Location&#39; service. It accepts a single location coordinate, purchase amount or a list of location coordinates, purchase amounts and retrieve applicable tax.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxAddressRequest Class Object having tax request.</param>
        /// <returns>ApiResponse of TaxResponses</returns>
        ApiResponse<TaxResponses> GetBatchTaxByLocationWithHttpInfo (string taxRateTypeId, TaxLocationRequest body);
        /// <summary>
        /// Post Taxrate By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Taxrate By Address&#39; service. It accepts a single address or a list of addresses and retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxRateAddressRequest Class Object having tax rate request.</param>
        /// <returns>TaxResponses</returns>
        TaxResponses GetBatchTaxRateByAddress (string taxRateTypeId, TaxRateAddressRequest body);

        /// <summary>
        /// Post Taxrate By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Taxrate By Address&#39; service. It accepts a single address or a list of addresses and retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxRateAddressRequest Class Object having tax rate request.</param>
        /// <returns>ApiResponse of TaxResponses</returns>
        ApiResponse<TaxResponses> GetBatchTaxRateByAddressWithHttpInfo (string taxRateTypeId, TaxRateAddressRequest body);
        /// <summary>
        /// Post Taxrate By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Taxrate By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxRateLocationRequest Class Object having tax rate request.</param>
        /// <returns>TaxResponses</returns>
        TaxResponses GetBatchTaxRateByLocation (string taxRateTypeId, TaxRateLocationRequest body);

        /// <summary>
        /// Post Taxrate By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Taxrate By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxRateLocationRequest Class Object having tax rate request.</param>
        /// <returns>ApiResponse of TaxResponses</returns>
        ApiResponse<TaxResponses> GetBatchTaxRateByLocationWithHttpInfo (string taxRateTypeId, TaxRateLocationRequest body);
        /// <summary>
        /// Get Tax By Address
        /// </summary>
        /// <remarks>
        /// This service calculates and returns taxes applicable at a specific address. Address, purchase amount and supported tax rate type are inputs to the service.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="address">The address to be searched.</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated.</param>
        /// <returns>TaxResponse</returns>
        TaxResponse GetSpecificTaxByAddress (string taxRateTypeId, string address, string purchaseAmount);

        /// <summary>
        /// Get Tax By Address
        /// </summary>
        /// <remarks>
        /// This service calculates and returns taxes applicable at a specific address. Address, purchase amount and supported tax rate type are inputs to the service.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="address">The address to be searched.</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated.</param>
        /// <returns>ApiResponse of TaxResponse</returns>
        ApiResponse<TaxResponse> GetSpecificTaxByAddressWithHttpInfo (string taxRateTypeId, string address, string purchaseAmount);
        /// <summary>
        /// Get Tax By Location
        /// </summary>
        /// <remarks>
        /// This service calculates and returns tax applicable at a specific location. Longitude, latitude, purchase amount and supported tax rate type are inputs to the service.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated.</param>
        /// <returns>TaxResponse</returns>
        TaxResponse GetSpecificTaxByLocation (string taxRateTypeId, string latitude, string longitude, string purchaseAmount);

        /// <summary>
        /// Get Tax By Location
        /// </summary>
        /// <remarks>
        /// This service calculates and returns tax applicable at a specific location. Longitude, latitude, purchase amount and supported tax rate type are inputs to the service.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated.</param>
        /// <returns>ApiResponse of TaxResponse</returns>
        ApiResponse<TaxResponse> GetSpecificTaxByLocationWithHttpInfo (string taxRateTypeId, string latitude, string longitude, string purchaseAmount);
        /// <summary>
        /// Get Taxrate By Address
        /// </summary>
        /// <remarks>
        /// Retrieves tax rates applicable to a specific address. This service accepts address and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="address">The address to be searched.</param>
        /// <returns>TaxResponse</returns>
        TaxResponse GetSpecificTaxRateByAddress (string taxRateTypeId, string address);

        /// <summary>
        /// Get Taxrate By Address
        /// </summary>
        /// <remarks>
        /// Retrieves tax rates applicable to a specific address. This service accepts address and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="address">The address to be searched.</param>
        /// <returns>ApiResponse of TaxResponse</returns>
        ApiResponse<TaxResponse> GetSpecificTaxRateByAddressWithHttpInfo (string taxRateTypeId, string address);
        /// <summary>
        /// Get Taxrate By Location
        /// </summary>
        /// <remarks>
        /// Retrieves tax rates applicable to a specific location. This service accepts longitude, latitude and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="longitude">Longitude of the location.</param>
        /// <returns>TaxResponse</returns>
        TaxResponse GetSpecificTaxRateByLocation (string taxRateTypeId, string latitude, string longitude);

        /// <summary>
        /// Get Taxrate By Location
        /// </summary>
        /// <remarks>
        /// Retrieves tax rates applicable to a specific location. This service accepts longitude, latitude and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="longitude">Longitude of the location.</param>
        /// <returns>ApiResponse of TaxResponse</returns>
        ApiResponse<TaxResponse> GetSpecificTaxRateByLocationWithHttpInfo (string taxRateTypeId, string latitude, string longitude);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Post Tax By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Tax By Address&#39; service. It accepts a single address, purchase amount or a list of addresses, purchase amounts and retrieve applicable taxes.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxAddressRequest Class Object having tax request.</param>
        /// <returns>Task of TaxResponses</returns>
        System.Threading.Tasks.Task<TaxResponses> GetBatchTaxByAddressAsync (string taxRateTypeId, TaxAddressRequest body);

        /// <summary>
        /// Post Tax By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Tax By Address&#39; service. It accepts a single address, purchase amount or a list of addresses, purchase amounts and retrieve applicable taxes.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxAddressRequest Class Object having tax request.</param>
        /// <returns>Task of ApiResponse (TaxResponses)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxResponses>> GetBatchTaxByAddressAsyncWithHttpInfo (string taxRateTypeId, TaxAddressRequest body);
        /// <summary>
        /// Post Tax By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Tax By Location&#39; service. It accepts a single location coordinate, purchase amount or a list of location coordinates, purchase amounts and retrieve applicable tax.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxAddressRequest Class Object having tax request.</param>
        /// <returns>Task of TaxResponses</returns>
        System.Threading.Tasks.Task<TaxResponses> GetBatchTaxByLocationAsync (string taxRateTypeId, TaxLocationRequest body);

        /// <summary>
        /// Post Tax By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Tax By Location&#39; service. It accepts a single location coordinate, purchase amount or a list of location coordinates, purchase amounts and retrieve applicable tax.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxAddressRequest Class Object having tax request.</param>
        /// <returns>Task of ApiResponse (TaxResponses)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxResponses>> GetBatchTaxByLocationAsyncWithHttpInfo (string taxRateTypeId, TaxLocationRequest body);
        /// <summary>
        /// Post Taxrate By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Taxrate By Address&#39; service. It accepts a single address or a list of addresses and retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxRateAddressRequest Class Object having tax rate request.</param>
        /// <returns>Task of TaxResponses</returns>
        System.Threading.Tasks.Task<TaxResponses> GetBatchTaxRateByAddressAsync (string taxRateTypeId, TaxRateAddressRequest body);

        /// <summary>
        /// Post Taxrate By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Taxrate By Address&#39; service. It accepts a single address or a list of addresses and retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxRateAddressRequest Class Object having tax rate request.</param>
        /// <returns>Task of ApiResponse (TaxResponses)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxResponses>> GetBatchTaxRateByAddressAsyncWithHttpInfo (string taxRateTypeId, TaxRateAddressRequest body);
        /// <summary>
        /// Post Taxrate By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Taxrate By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxRateLocationRequest Class Object having tax rate request.</param>
        /// <returns>Task of TaxResponses</returns>
        System.Threading.Tasks.Task<TaxResponses> GetBatchTaxRateByLocationAsync (string taxRateTypeId, TaxRateLocationRequest body);

        /// <summary>
        /// Post Taxrate By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Taxrate By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxRateLocationRequest Class Object having tax rate request.</param>
        /// <returns>Task of ApiResponse (TaxResponses)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxResponses>> GetBatchTaxRateByLocationAsyncWithHttpInfo (string taxRateTypeId, TaxRateLocationRequest body);
        /// <summary>
        /// Get Tax By Address
        /// </summary>
        /// <remarks>
        /// This service calculates and returns taxes applicable at a specific address. Address, purchase amount and supported tax rate type are inputs to the service.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="address">The address to be searched.</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated.</param>
        /// <returns>Task of TaxResponse</returns>
        System.Threading.Tasks.Task<TaxResponse> GetSpecificTaxByAddressAsync (string taxRateTypeId, string address, string purchaseAmount);

        /// <summary>
        /// Get Tax By Address
        /// </summary>
        /// <remarks>
        /// This service calculates and returns taxes applicable at a specific address. Address, purchase amount and supported tax rate type are inputs to the service.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="address">The address to be searched.</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated.</param>
        /// <returns>Task of ApiResponse (TaxResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxResponse>> GetSpecificTaxByAddressAsyncWithHttpInfo (string taxRateTypeId, string address, string purchaseAmount);
        /// <summary>
        /// Get Tax By Location
        /// </summary>
        /// <remarks>
        /// This service calculates and returns tax applicable at a specific location. Longitude, latitude, purchase amount and supported tax rate type are inputs to the service.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated.</param>
        /// <returns>Task of TaxResponse</returns>
        System.Threading.Tasks.Task<TaxResponse> GetSpecificTaxByLocationAsync (string taxRateTypeId, string latitude, string longitude, string purchaseAmount);

        /// <summary>
        /// Get Tax By Location
        /// </summary>
        /// <remarks>
        /// This service calculates and returns tax applicable at a specific location. Longitude, latitude, purchase amount and supported tax rate type are inputs to the service.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated.</param>
        /// <returns>Task of ApiResponse (TaxResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxResponse>> GetSpecificTaxByLocationAsyncWithHttpInfo (string taxRateTypeId, string latitude, string longitude, string purchaseAmount);
        /// <summary>
        /// Get Taxrate By Address
        /// </summary>
        /// <remarks>
        /// Retrieves tax rates applicable to a specific address. This service accepts address and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="address">The address to be searched.</param>
        /// <returns>Task of TaxResponse</returns>
        System.Threading.Tasks.Task<TaxResponse> GetSpecificTaxRateByAddressAsync (string taxRateTypeId, string address);

        /// <summary>
        /// Get Taxrate By Address
        /// </summary>
        /// <remarks>
        /// Retrieves tax rates applicable to a specific address. This service accepts address and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="address">The address to be searched.</param>
        /// <returns>Task of ApiResponse (TaxResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxResponse>> GetSpecificTaxRateByAddressAsyncWithHttpInfo (string taxRateTypeId, string address);
        /// <summary>
        /// Get Taxrate By Location
        /// </summary>
        /// <remarks>
        /// Retrieves tax rates applicable to a specific location. This service accepts longitude, latitude and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="longitude">Longitude of the location.</param>
        /// <returns>Task of TaxResponse</returns>
        System.Threading.Tasks.Task<TaxResponse> GetSpecificTaxRateByLocationAsync (string taxRateTypeId, string latitude, string longitude);

        /// <summary>
        /// Get Taxrate By Location
        /// </summary>
        /// <remarks>
        /// Retrieves tax rates applicable to a specific location. This service accepts longitude, latitude and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="longitude">Longitude of the location.</param>
        /// <returns>Task of ApiResponse (TaxResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxResponse>> GetSpecificTaxRateByLocationAsyncWithHttpInfo (string taxRateTypeId, string latitude, string longitude);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LIAPIGeoTaxServiceApi : ILIAPIGeoTaxServiceApi
    {
        private pb.locationIntelligence.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LIAPIGeoTaxServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LIAPIGeoTaxServiceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = pb.locationIntelligence.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LIAPIGeoTaxServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LIAPIGeoTaxServiceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = pb.locationIntelligence.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public pb.locationIntelligence.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Post Tax By Address This is a Batch offering for &#39;Tax By Address&#39; service. It accepts a single address, purchase amount or a list of addresses, purchase amounts and retrieve applicable taxes.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxAddressRequest Class Object having tax request.</param>
        /// <returns>TaxResponses</returns>
        public TaxResponses GetBatchTaxByAddress (string taxRateTypeId, TaxAddressRequest body)
        {
             ApiResponse<TaxResponses> localVarResponse = GetBatchTaxByAddressWithHttpInfo(taxRateTypeId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Tax By Address This is a Batch offering for &#39;Tax By Address&#39; service. It accepts a single address, purchase amount or a list of addresses, purchase amounts and retrieve applicable taxes.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxAddressRequest Class Object having tax request.</param>
        /// <returns>ApiResponse of TaxResponses</returns>
        public ApiResponse< TaxResponses > GetBatchTaxByAddressWithHttpInfo (string taxRateTypeId, TaxAddressRequest body)
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LIAPIGeoTaxServiceApi->GetBatchTaxByAddress");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LIAPIGeoTaxServiceApi->GetBatchTaxByAddress");

            var localVarPath = "/geotax/v1/tax/{taxRateTypeId}/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchTaxByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxResponses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxResponses)));
            
        }

        /// <summary>
        /// Post Tax By Address This is a Batch offering for &#39;Tax By Address&#39; service. It accepts a single address, purchase amount or a list of addresses, purchase amounts and retrieve applicable taxes.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxAddressRequest Class Object having tax request.</param>
        /// <returns>Task of TaxResponses</returns>
        public async System.Threading.Tasks.Task<TaxResponses> GetBatchTaxByAddressAsync (string taxRateTypeId, TaxAddressRequest body)
        {
             ApiResponse<TaxResponses> localVarResponse = await GetBatchTaxByAddressAsyncWithHttpInfo(taxRateTypeId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Tax By Address This is a Batch offering for &#39;Tax By Address&#39; service. It accepts a single address, purchase amount or a list of addresses, purchase amounts and retrieve applicable taxes.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxAddressRequest Class Object having tax request.</param>
        /// <returns>Task of ApiResponse (TaxResponses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxResponses>> GetBatchTaxByAddressAsyncWithHttpInfo (string taxRateTypeId, TaxAddressRequest body)
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LIAPIGeoTaxServiceApi->GetBatchTaxByAddress");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LIAPIGeoTaxServiceApi->GetBatchTaxByAddress");

            var localVarPath = "/geotax/v1/tax/{taxRateTypeId}/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchTaxByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxResponses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxResponses)));
            
        }

        /// <summary>
        /// Post Tax By Location This is a Batch offering for &#39;Tax By Location&#39; service. It accepts a single location coordinate, purchase amount or a list of location coordinates, purchase amounts and retrieve applicable tax.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxAddressRequest Class Object having tax request.</param>
        /// <returns>TaxResponses</returns>
        public TaxResponses GetBatchTaxByLocation (string taxRateTypeId, TaxLocationRequest body)
        {
             ApiResponse<TaxResponses> localVarResponse = GetBatchTaxByLocationWithHttpInfo(taxRateTypeId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Tax By Location This is a Batch offering for &#39;Tax By Location&#39; service. It accepts a single location coordinate, purchase amount or a list of location coordinates, purchase amounts and retrieve applicable tax.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxAddressRequest Class Object having tax request.</param>
        /// <returns>ApiResponse of TaxResponses</returns>
        public ApiResponse< TaxResponses > GetBatchTaxByLocationWithHttpInfo (string taxRateTypeId, TaxLocationRequest body)
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LIAPIGeoTaxServiceApi->GetBatchTaxByLocation");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LIAPIGeoTaxServiceApi->GetBatchTaxByLocation");

            var localVarPath = "/geotax/v1/tax/{taxRateTypeId}/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchTaxByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxResponses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxResponses)));
            
        }

        /// <summary>
        /// Post Tax By Location This is a Batch offering for &#39;Tax By Location&#39; service. It accepts a single location coordinate, purchase amount or a list of location coordinates, purchase amounts and retrieve applicable tax.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxAddressRequest Class Object having tax request.</param>
        /// <returns>Task of TaxResponses</returns>
        public async System.Threading.Tasks.Task<TaxResponses> GetBatchTaxByLocationAsync (string taxRateTypeId, TaxLocationRequest body)
        {
             ApiResponse<TaxResponses> localVarResponse = await GetBatchTaxByLocationAsyncWithHttpInfo(taxRateTypeId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Tax By Location This is a Batch offering for &#39;Tax By Location&#39; service. It accepts a single location coordinate, purchase amount or a list of location coordinates, purchase amounts and retrieve applicable tax.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxAddressRequest Class Object having tax request.</param>
        /// <returns>Task of ApiResponse (TaxResponses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxResponses>> GetBatchTaxByLocationAsyncWithHttpInfo (string taxRateTypeId, TaxLocationRequest body)
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LIAPIGeoTaxServiceApi->GetBatchTaxByLocation");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LIAPIGeoTaxServiceApi->GetBatchTaxByLocation");

            var localVarPath = "/geotax/v1/tax/{taxRateTypeId}/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchTaxByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxResponses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxResponses)));
            
        }

        /// <summary>
        /// Post Taxrate By Address This is a Batch offering for &#39;Taxrate By Address&#39; service. It accepts a single address or a list of addresses and retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxRateAddressRequest Class Object having tax rate request.</param>
        /// <returns>TaxResponses</returns>
        public TaxResponses GetBatchTaxRateByAddress (string taxRateTypeId, TaxRateAddressRequest body)
        {
             ApiResponse<TaxResponses> localVarResponse = GetBatchTaxRateByAddressWithHttpInfo(taxRateTypeId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Taxrate By Address This is a Batch offering for &#39;Taxrate By Address&#39; service. It accepts a single address or a list of addresses and retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxRateAddressRequest Class Object having tax rate request.</param>
        /// <returns>ApiResponse of TaxResponses</returns>
        public ApiResponse< TaxResponses > GetBatchTaxRateByAddressWithHttpInfo (string taxRateTypeId, TaxRateAddressRequest body)
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LIAPIGeoTaxServiceApi->GetBatchTaxRateByAddress");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LIAPIGeoTaxServiceApi->GetBatchTaxRateByAddress");

            var localVarPath = "/geotax/v1/taxrate/{taxRateTypeId}/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchTaxRateByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxResponses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxResponses)));
            
        }

        /// <summary>
        /// Post Taxrate By Address This is a Batch offering for &#39;Taxrate By Address&#39; service. It accepts a single address or a list of addresses and retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxRateAddressRequest Class Object having tax rate request.</param>
        /// <returns>Task of TaxResponses</returns>
        public async System.Threading.Tasks.Task<TaxResponses> GetBatchTaxRateByAddressAsync (string taxRateTypeId, TaxRateAddressRequest body)
        {
             ApiResponse<TaxResponses> localVarResponse = await GetBatchTaxRateByAddressAsyncWithHttpInfo(taxRateTypeId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Taxrate By Address This is a Batch offering for &#39;Taxrate By Address&#39; service. It accepts a single address or a list of addresses and retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxRateAddressRequest Class Object having tax rate request.</param>
        /// <returns>Task of ApiResponse (TaxResponses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxResponses>> GetBatchTaxRateByAddressAsyncWithHttpInfo (string taxRateTypeId, TaxRateAddressRequest body)
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LIAPIGeoTaxServiceApi->GetBatchTaxRateByAddress");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LIAPIGeoTaxServiceApi->GetBatchTaxRateByAddress");

            var localVarPath = "/geotax/v1/taxrate/{taxRateTypeId}/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchTaxRateByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxResponses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxResponses)));
            
        }

        /// <summary>
        /// Post Taxrate By Location This is a Batch offering for &#39;Taxrate By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxRateLocationRequest Class Object having tax rate request.</param>
        /// <returns>TaxResponses</returns>
        public TaxResponses GetBatchTaxRateByLocation (string taxRateTypeId, TaxRateLocationRequest body)
        {
             ApiResponse<TaxResponses> localVarResponse = GetBatchTaxRateByLocationWithHttpInfo(taxRateTypeId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Taxrate By Location This is a Batch offering for &#39;Taxrate By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxRateLocationRequest Class Object having tax rate request.</param>
        /// <returns>ApiResponse of TaxResponses</returns>
        public ApiResponse< TaxResponses > GetBatchTaxRateByLocationWithHttpInfo (string taxRateTypeId, TaxRateLocationRequest body)
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LIAPIGeoTaxServiceApi->GetBatchTaxRateByLocation");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LIAPIGeoTaxServiceApi->GetBatchTaxRateByLocation");

            var localVarPath = "/geotax/v1/taxrate/{taxRateTypeId}/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchTaxRateByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxResponses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxResponses)));
            
        }

        /// <summary>
        /// Post Taxrate By Location This is a Batch offering for &#39;Taxrate By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxRateLocationRequest Class Object having tax rate request.</param>
        /// <returns>Task of TaxResponses</returns>
        public async System.Threading.Tasks.Task<TaxResponses> GetBatchTaxRateByLocationAsync (string taxRateTypeId, TaxRateLocationRequest body)
        {
             ApiResponse<TaxResponses> localVarResponse = await GetBatchTaxRateByLocationAsyncWithHttpInfo(taxRateTypeId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Taxrate By Location This is a Batch offering for &#39;Taxrate By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="body">TaxRateLocationRequest Class Object having tax rate request.</param>
        /// <returns>Task of ApiResponse (TaxResponses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxResponses>> GetBatchTaxRateByLocationAsyncWithHttpInfo (string taxRateTypeId, TaxRateLocationRequest body)
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LIAPIGeoTaxServiceApi->GetBatchTaxRateByLocation");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LIAPIGeoTaxServiceApi->GetBatchTaxRateByLocation");

            var localVarPath = "/geotax/v1/taxrate/{taxRateTypeId}/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchTaxRateByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxResponses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxResponses)));
            
        }

        /// <summary>
        /// Get Tax By Address This service calculates and returns taxes applicable at a specific address. Address, purchase amount and supported tax rate type are inputs to the service.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="address">The address to be searched.</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated.</param>
        /// <returns>TaxResponse</returns>
        public TaxResponse GetSpecificTaxByAddress (string taxRateTypeId, string address, string purchaseAmount)
        {
             ApiResponse<TaxResponse> localVarResponse = GetSpecificTaxByAddressWithHttpInfo(taxRateTypeId, address, purchaseAmount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tax By Address This service calculates and returns taxes applicable at a specific address. Address, purchase amount and supported tax rate type are inputs to the service.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="address">The address to be searched.</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated.</param>
        /// <returns>ApiResponse of TaxResponse</returns>
        public ApiResponse< TaxResponse > GetSpecificTaxByAddressWithHttpInfo (string taxRateTypeId, string address, string purchaseAmount)
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LIAPIGeoTaxServiceApi->GetSpecificTaxByAddress");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LIAPIGeoTaxServiceApi->GetSpecificTaxByAddress");
            // verify the required parameter 'purchaseAmount' is set
            if (purchaseAmount == null)
                throw new ApiException(400, "Missing required parameter 'purchaseAmount' when calling LIAPIGeoTaxServiceApi->GetSpecificTaxByAddress");

            var localVarPath = "/geotax/v1/tax/{taxRateTypeId}/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (purchaseAmount != null) localVarQueryParams.Add("purchaseAmount", Configuration.ApiClient.ParameterToString(purchaseAmount)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificTaxByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxResponse)));
            
        }

        /// <summary>
        /// Get Tax By Address This service calculates and returns taxes applicable at a specific address. Address, purchase amount and supported tax rate type are inputs to the service.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="address">The address to be searched.</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated.</param>
        /// <returns>Task of TaxResponse</returns>
        public async System.Threading.Tasks.Task<TaxResponse> GetSpecificTaxByAddressAsync (string taxRateTypeId, string address, string purchaseAmount)
        {
             ApiResponse<TaxResponse> localVarResponse = await GetSpecificTaxByAddressAsyncWithHttpInfo(taxRateTypeId, address, purchaseAmount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Tax By Address This service calculates and returns taxes applicable at a specific address. Address, purchase amount and supported tax rate type are inputs to the service.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="address">The address to be searched.</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated.</param>
        /// <returns>Task of ApiResponse (TaxResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxResponse>> GetSpecificTaxByAddressAsyncWithHttpInfo (string taxRateTypeId, string address, string purchaseAmount)
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LIAPIGeoTaxServiceApi->GetSpecificTaxByAddress");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LIAPIGeoTaxServiceApi->GetSpecificTaxByAddress");
            // verify the required parameter 'purchaseAmount' is set
            if (purchaseAmount == null)
                throw new ApiException(400, "Missing required parameter 'purchaseAmount' when calling LIAPIGeoTaxServiceApi->GetSpecificTaxByAddress");

            var localVarPath = "/geotax/v1/tax/{taxRateTypeId}/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (purchaseAmount != null) localVarQueryParams.Add("purchaseAmount", Configuration.ApiClient.ParameterToString(purchaseAmount)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificTaxByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxResponse)));
            
        }

        /// <summary>
        /// Get Tax By Location This service calculates and returns tax applicable at a specific location. Longitude, latitude, purchase amount and supported tax rate type are inputs to the service.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated.</param>
        /// <returns>TaxResponse</returns>
        public TaxResponse GetSpecificTaxByLocation (string taxRateTypeId, string latitude, string longitude, string purchaseAmount)
        {
             ApiResponse<TaxResponse> localVarResponse = GetSpecificTaxByLocationWithHttpInfo(taxRateTypeId, latitude, longitude, purchaseAmount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tax By Location This service calculates and returns tax applicable at a specific location. Longitude, latitude, purchase amount and supported tax rate type are inputs to the service.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated.</param>
        /// <returns>ApiResponse of TaxResponse</returns>
        public ApiResponse< TaxResponse > GetSpecificTaxByLocationWithHttpInfo (string taxRateTypeId, string latitude, string longitude, string purchaseAmount)
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LIAPIGeoTaxServiceApi->GetSpecificTaxByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LIAPIGeoTaxServiceApi->GetSpecificTaxByLocation");
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LIAPIGeoTaxServiceApi->GetSpecificTaxByLocation");
            // verify the required parameter 'purchaseAmount' is set
            if (purchaseAmount == null)
                throw new ApiException(400, "Missing required parameter 'purchaseAmount' when calling LIAPIGeoTaxServiceApi->GetSpecificTaxByLocation");

            var localVarPath = "/geotax/v1/tax/{taxRateTypeId}/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (purchaseAmount != null) localVarQueryParams.Add("purchaseAmount", Configuration.ApiClient.ParameterToString(purchaseAmount)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificTaxByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxResponse)));
            
        }

        /// <summary>
        /// Get Tax By Location This service calculates and returns tax applicable at a specific location. Longitude, latitude, purchase amount and supported tax rate type are inputs to the service.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated.</param>
        /// <returns>Task of TaxResponse</returns>
        public async System.Threading.Tasks.Task<TaxResponse> GetSpecificTaxByLocationAsync (string taxRateTypeId, string latitude, string longitude, string purchaseAmount)
        {
             ApiResponse<TaxResponse> localVarResponse = await GetSpecificTaxByLocationAsyncWithHttpInfo(taxRateTypeId, latitude, longitude, purchaseAmount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Tax By Location This service calculates and returns tax applicable at a specific location. Longitude, latitude, purchase amount and supported tax rate type are inputs to the service.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated.</param>
        /// <returns>Task of ApiResponse (TaxResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxResponse>> GetSpecificTaxByLocationAsyncWithHttpInfo (string taxRateTypeId, string latitude, string longitude, string purchaseAmount)
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LIAPIGeoTaxServiceApi->GetSpecificTaxByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LIAPIGeoTaxServiceApi->GetSpecificTaxByLocation");
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LIAPIGeoTaxServiceApi->GetSpecificTaxByLocation");
            // verify the required parameter 'purchaseAmount' is set
            if (purchaseAmount == null)
                throw new ApiException(400, "Missing required parameter 'purchaseAmount' when calling LIAPIGeoTaxServiceApi->GetSpecificTaxByLocation");

            var localVarPath = "/geotax/v1/tax/{taxRateTypeId}/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (purchaseAmount != null) localVarQueryParams.Add("purchaseAmount", Configuration.ApiClient.ParameterToString(purchaseAmount)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificTaxByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxResponse)));
            
        }

        /// <summary>
        /// Get Taxrate By Address Retrieves tax rates applicable to a specific address. This service accepts address and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="address">The address to be searched.</param>
        /// <returns>TaxResponse</returns>
        public TaxResponse GetSpecificTaxRateByAddress (string taxRateTypeId, string address)
        {
             ApiResponse<TaxResponse> localVarResponse = GetSpecificTaxRateByAddressWithHttpInfo(taxRateTypeId, address);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Taxrate By Address Retrieves tax rates applicable to a specific address. This service accepts address and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="address">The address to be searched.</param>
        /// <returns>ApiResponse of TaxResponse</returns>
        public ApiResponse< TaxResponse > GetSpecificTaxRateByAddressWithHttpInfo (string taxRateTypeId, string address)
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LIAPIGeoTaxServiceApi->GetSpecificTaxRateByAddress");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LIAPIGeoTaxServiceApi->GetSpecificTaxRateByAddress");

            var localVarPath = "/geotax/v1/taxrate/{taxRateTypeId}/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificTaxRateByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxResponse)));
            
        }

        /// <summary>
        /// Get Taxrate By Address Retrieves tax rates applicable to a specific address. This service accepts address and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="address">The address to be searched.</param>
        /// <returns>Task of TaxResponse</returns>
        public async System.Threading.Tasks.Task<TaxResponse> GetSpecificTaxRateByAddressAsync (string taxRateTypeId, string address)
        {
             ApiResponse<TaxResponse> localVarResponse = await GetSpecificTaxRateByAddressAsyncWithHttpInfo(taxRateTypeId, address);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Taxrate By Address Retrieves tax rates applicable to a specific address. This service accepts address and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="address">The address to be searched.</param>
        /// <returns>Task of ApiResponse (TaxResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxResponse>> GetSpecificTaxRateByAddressAsyncWithHttpInfo (string taxRateTypeId, string address)
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LIAPIGeoTaxServiceApi->GetSpecificTaxRateByAddress");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LIAPIGeoTaxServiceApi->GetSpecificTaxRateByAddress");

            var localVarPath = "/geotax/v1/taxrate/{taxRateTypeId}/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificTaxRateByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxResponse)));
            
        }

        /// <summary>
        /// Get Taxrate By Location Retrieves tax rates applicable to a specific location. This service accepts longitude, latitude and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="longitude">Longitude of the location.</param>
        /// <returns>TaxResponse</returns>
        public TaxResponse GetSpecificTaxRateByLocation (string taxRateTypeId, string latitude, string longitude)
        {
             ApiResponse<TaxResponse> localVarResponse = GetSpecificTaxRateByLocationWithHttpInfo(taxRateTypeId, latitude, longitude);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Taxrate By Location Retrieves tax rates applicable to a specific location. This service accepts longitude, latitude and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="longitude">Longitude of the location.</param>
        /// <returns>ApiResponse of TaxResponse</returns>
        public ApiResponse< TaxResponse > GetSpecificTaxRateByLocationWithHttpInfo (string taxRateTypeId, string latitude, string longitude)
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LIAPIGeoTaxServiceApi->GetSpecificTaxRateByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LIAPIGeoTaxServiceApi->GetSpecificTaxRateByLocation");
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LIAPIGeoTaxServiceApi->GetSpecificTaxRateByLocation");

            var localVarPath = "/geotax/v1/taxrate/{taxRateTypeId}/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificTaxRateByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxResponse)));
            
        }

        /// <summary>
        /// Get Taxrate By Location Retrieves tax rates applicable to a specific location. This service accepts longitude, latitude and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="longitude">Longitude of the location.</param>
        /// <returns>Task of TaxResponse</returns>
        public async System.Threading.Tasks.Task<TaxResponse> GetSpecificTaxRateByLocationAsync (string taxRateTypeId, string latitude, string longitude)
        {
             ApiResponse<TaxResponse> localVarResponse = await GetSpecificTaxRateByLocationAsyncWithHttpInfo(taxRateTypeId, latitude, longitude);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Taxrate By Location Retrieves tax rates applicable to a specific location. This service accepts longitude, latitude and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="longitude">Longitude of the location.</param>
        /// <returns>Task of ApiResponse (TaxResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxResponse>> GetSpecificTaxRateByLocationAsyncWithHttpInfo (string taxRateTypeId, string latitude, string longitude)
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LIAPIGeoTaxServiceApi->GetSpecificTaxRateByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LIAPIGeoTaxServiceApi->GetSpecificTaxRateByLocation");
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LIAPIGeoTaxServiceApi->GetSpecificTaxRateByLocation");

            var localVarPath = "/geotax/v1/taxrate/{taxRateTypeId}/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificTaxRateByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxResponse)));
            
        }

    }
}
