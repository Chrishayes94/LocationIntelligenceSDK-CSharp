/* 
 * Location Intelligence APIs
 *
 * Incorporate our extensive geodata into everyday applications, business processes and workflows.
 *
 * OpenAPI spec version: 8.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using pb.locationIntelligence.Client;
using pb.locationIntelligence.Model;

namespace pb.locationIntelligence.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILIAPIGeoPropertyServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets GeoPropertyResponse
        /// </summary>
        /// <remarks>
        /// Gets GeoPropertyResponse
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <returns>GeoPropertyResponse</returns>
        GeoPropertyResponse GetGeoPropertyByAddress (string address);

        /// <summary>
        /// Gets GeoPropertyResponse
        /// </summary>
        /// <remarks>
        /// Gets GeoPropertyResponse
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <returns>ApiResponse of GeoPropertyResponse</returns>
        ApiResponse<GeoPropertyResponse> GetGeoPropertyByAddressWithHttpInfo (string address);
        /// <summary>
        /// Gets GeoPropertyResponses
        /// </summary>
        /// <remarks>
        /// Gets GeoPropertyResponses
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>GeoPropertyResponses</returns>
        GeoPropertyResponses GetGeoPropertyByAddressBatch (GeoPropertyAddressRequest body = null);

        /// <summary>
        /// Gets GeoPropertyResponses
        /// </summary>
        /// <remarks>
        /// Gets GeoPropertyResponses
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GeoPropertyResponses</returns>
        ApiResponse<GeoPropertyResponses> GetGeoPropertyByAddressBatchWithHttpInfo (GeoPropertyAddressRequest body = null);
        /// <summary>
        /// Gets GeoPropertyResponse
        /// </summary>
        /// <remarks>
        /// Gets GeoPropertyResponse
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">free form text</param>
        /// <returns>GeoPropertyPBKeyResponse</returns>
        GeoPropertyPBKeyResponse GetGeoPropertyByPBKey (string pbKey);

        /// <summary>
        /// Gets GeoPropertyResponse
        /// </summary>
        /// <remarks>
        /// Gets GeoPropertyResponse
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">free form text</param>
        /// <returns>ApiResponse of GeoPropertyPBKeyResponse</returns>
        ApiResponse<GeoPropertyPBKeyResponse> GetGeoPropertyByPBKeyWithHttpInfo (string pbKey);
        /// <summary>
        /// Gets GeoPropertyResponses
        /// </summary>
        /// <remarks>
        /// Gets GeoPropertyResponses
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>GeoPropertyPBKeyResponses</returns>
        GeoPropertyPBKeyResponses GetGeoPropertyByPBKeyBatch (GeoPropertyPBKeyRequest body = null);

        /// <summary>
        /// Gets GeoPropertyResponses
        /// </summary>
        /// <remarks>
        /// Gets GeoPropertyResponses
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GeoPropertyPBKeyResponses</returns>
        ApiResponse<GeoPropertyPBKeyResponses> GetGeoPropertyByPBKeyBatchWithHttpInfo (GeoPropertyPBKeyRequest body = null);
        /// <summary>
        /// Gets ParcelBoundary
        /// </summary>
        /// <remarks>
        /// Gets ParcelBoundary
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>ParcelBoundary</returns>
        ParcelBoundary GetParcelBoundaryByAddress (string address, string accept = null);

        /// <summary>
        /// Gets ParcelBoundary
        /// </summary>
        /// <remarks>
        /// Gets ParcelBoundary
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>ApiResponse of ParcelBoundary</returns>
        ApiResponse<ParcelBoundary> GetParcelBoundaryByAddressWithHttpInfo (string address, string accept = null);
        /// <summary>
        /// Gets ParcelBoundary
        /// </summary>
        /// <remarks>
        /// Gets ParcelBoundary
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>ParcelBoundary</returns>
        ParcelBoundary GetParcelBoundaryByLocation (string longitude, string latitude, string accept = null);

        /// <summary>
        /// Gets ParcelBoundary
        /// </summary>
        /// <remarks>
        /// Gets ParcelBoundary
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>ApiResponse of ParcelBoundary</returns>
        ApiResponse<ParcelBoundary> GetParcelBoundaryByLocationWithHttpInfo (string longitude, string latitude, string accept = null);
        /// <summary>
        /// Gets ParcelBoundary
        /// </summary>
        /// <remarks>
        /// Gets ParcelBoundary
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">PB specific unique key for each address</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>ParcelBoundary</returns>
        ParcelBoundary GetParcelBoundaryByPBKey (string pbKey, string accept = null);

        /// <summary>
        /// Gets ParcelBoundary
        /// </summary>
        /// <remarks>
        /// Gets ParcelBoundary
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">PB specific unique key for each address</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>ApiResponse of ParcelBoundary</returns>
        ApiResponse<ParcelBoundary> GetParcelBoundaryByPBKeyWithHttpInfo (string pbKey, string accept = null);
        /// <summary>
        /// Search Nearby Schools by Address
        /// </summary>
        /// <remarks>
        /// Search Nearby Schools by Address
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="edLevel">Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools  (optional)</param>
        /// <param name="schoolType">Single digit code for schoolTypes applicable values are PRI and PUB (optional)</param>
        /// <param name="schoolSubType">Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education) (optional)</param>
        /// <param name="gender">Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) (optional)</param>
        /// <param name="assignedSchoolsOnly">Single digit code for assignedSchoolOnly applicable values are  Y/N  (optional)</param>
        /// <param name="districtSchoolsOnly">Single digit code for districtSchoolOnly applicable values are Y/N  (optional)</param>
        /// <param name="searchRadius">Search Radius within which schools are searched (optional)</param>
        /// <param name="searchRadiusUnit">Search Radius unit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelTimeUnit">Travel Time unit applicable values are minutes,hours,seconds,milliseconds  (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelDistanceUnit">Travel distanceUnit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelMode">Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving (optional)</param>
        /// <param name="maxCandidates">Max result to search  (optional, default to 10)</param>
        /// <returns>SchoolsNearByResponse</returns>
        SchoolsNearByResponse GetSchoolsByAddress (string address, string edLevel = null, string schoolType = null, string schoolSubType = null, string gender = null, string assignedSchoolsOnly = null, string districtSchoolsOnly = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string maxCandidates = null);

        /// <summary>
        /// Search Nearby Schools by Address
        /// </summary>
        /// <remarks>
        /// Search Nearby Schools by Address
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="edLevel">Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools  (optional)</param>
        /// <param name="schoolType">Single digit code for schoolTypes applicable values are PRI and PUB (optional)</param>
        /// <param name="schoolSubType">Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education) (optional)</param>
        /// <param name="gender">Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) (optional)</param>
        /// <param name="assignedSchoolsOnly">Single digit code for assignedSchoolOnly applicable values are  Y/N  (optional)</param>
        /// <param name="districtSchoolsOnly">Single digit code for districtSchoolOnly applicable values are Y/N  (optional)</param>
        /// <param name="searchRadius">Search Radius within which schools are searched (optional)</param>
        /// <param name="searchRadiusUnit">Search Radius unit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelTimeUnit">Travel Time unit applicable values are minutes,hours,seconds,milliseconds  (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelDistanceUnit">Travel distanceUnit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelMode">Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving (optional)</param>
        /// <param name="maxCandidates">Max result to search  (optional, default to 10)</param>
        /// <returns>ApiResponse of SchoolsNearByResponse</returns>
        ApiResponse<SchoolsNearByResponse> GetSchoolsByAddressWithHttpInfo (string address, string edLevel = null, string schoolType = null, string schoolSubType = null, string gender = null, string assignedSchoolsOnly = null, string districtSchoolsOnly = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string maxCandidates = null);
        /// <summary>
        /// Search Nearby Schools by PBKey
        /// </summary>
        /// <remarks>
        /// Search Nearby Schools by PBKey
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">free form text</param>
        /// <param name="edLevel">Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools  (optional)</param>
        /// <param name="schoolType">Single digit code for schoolTypes applicable values are PRI and PUB (optional)</param>
        /// <param name="schoolSubType">Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education) (optional)</param>
        /// <param name="gender">Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) (optional)</param>
        /// <param name="assignedSchoolsOnly">Single digit code for assignedSchoolOnly applicable values are  Y/N  (optional)</param>
        /// <param name="districtSchoolsOnly">Single digit code for districtSchoolOnly applicable values are Y/N  (optional)</param>
        /// <param name="searchRadius">Search Radius within which schools are searched (optional)</param>
        /// <param name="searchRadiusUnit">Search Radius unit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelTimeUnit">Travel Time unit applicable values are minutes,hours,seconds,milliseconds  (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelDistanceUnit">Travel distanceUnit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelMode">Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving (optional)</param>
        /// <param name="maxCandidates">Max result to search  (optional, default to 10)</param>
        /// <returns>SchoolsNearByResponse</returns>
        SchoolsNearByResponse GetSchoolsNearByUsingPBKey (string pbKey, string edLevel = null, string schoolType = null, string schoolSubType = null, string gender = null, string assignedSchoolsOnly = null, string districtSchoolsOnly = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string maxCandidates = null);

        /// <summary>
        /// Search Nearby Schools by PBKey
        /// </summary>
        /// <remarks>
        /// Search Nearby Schools by PBKey
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">free form text</param>
        /// <param name="edLevel">Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools  (optional)</param>
        /// <param name="schoolType">Single digit code for schoolTypes applicable values are PRI and PUB (optional)</param>
        /// <param name="schoolSubType">Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education) (optional)</param>
        /// <param name="gender">Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) (optional)</param>
        /// <param name="assignedSchoolsOnly">Single digit code for assignedSchoolOnly applicable values are  Y/N  (optional)</param>
        /// <param name="districtSchoolsOnly">Single digit code for districtSchoolOnly applicable values are Y/N  (optional)</param>
        /// <param name="searchRadius">Search Radius within which schools are searched (optional)</param>
        /// <param name="searchRadiusUnit">Search Radius unit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelTimeUnit">Travel Time unit applicable values are minutes,hours,seconds,milliseconds  (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelDistanceUnit">Travel distanceUnit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelMode">Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving (optional)</param>
        /// <param name="maxCandidates">Max result to search  (optional, default to 10)</param>
        /// <returns>ApiResponse of SchoolsNearByResponse</returns>
        ApiResponse<SchoolsNearByResponse> GetSchoolsNearByUsingPBKeyWithHttpInfo (string pbKey, string edLevel = null, string schoolType = null, string schoolSubType = null, string gender = null, string assignedSchoolsOnly = null, string districtSchoolsOnly = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string maxCandidates = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets GeoPropertyResponse
        /// </summary>
        /// <remarks>
        /// Gets GeoPropertyResponse
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <returns>Task of GeoPropertyResponse</returns>
        System.Threading.Tasks.Task<GeoPropertyResponse> GetGeoPropertyByAddressAsync (string address);

        /// <summary>
        /// Gets GeoPropertyResponse
        /// </summary>
        /// <remarks>
        /// Gets GeoPropertyResponse
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <returns>Task of ApiResponse (GeoPropertyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoPropertyResponse>> GetGeoPropertyByAddressAsyncWithHttpInfo (string address);
        /// <summary>
        /// Gets GeoPropertyResponses
        /// </summary>
        /// <remarks>
        /// Gets GeoPropertyResponses
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GeoPropertyResponses</returns>
        System.Threading.Tasks.Task<GeoPropertyResponses> GetGeoPropertyByAddressBatchAsync (GeoPropertyAddressRequest body = null);

        /// <summary>
        /// Gets GeoPropertyResponses
        /// </summary>
        /// <remarks>
        /// Gets GeoPropertyResponses
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GeoPropertyResponses)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoPropertyResponses>> GetGeoPropertyByAddressBatchAsyncWithHttpInfo (GeoPropertyAddressRequest body = null);
        /// <summary>
        /// Gets GeoPropertyResponse
        /// </summary>
        /// <remarks>
        /// Gets GeoPropertyResponse
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">free form text</param>
        /// <returns>Task of GeoPropertyPBKeyResponse</returns>
        System.Threading.Tasks.Task<GeoPropertyPBKeyResponse> GetGeoPropertyByPBKeyAsync (string pbKey);

        /// <summary>
        /// Gets GeoPropertyResponse
        /// </summary>
        /// <remarks>
        /// Gets GeoPropertyResponse
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">free form text</param>
        /// <returns>Task of ApiResponse (GeoPropertyPBKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoPropertyPBKeyResponse>> GetGeoPropertyByPBKeyAsyncWithHttpInfo (string pbKey);
        /// <summary>
        /// Gets GeoPropertyResponses
        /// </summary>
        /// <remarks>
        /// Gets GeoPropertyResponses
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GeoPropertyPBKeyResponses</returns>
        System.Threading.Tasks.Task<GeoPropertyPBKeyResponses> GetGeoPropertyByPBKeyBatchAsync (GeoPropertyPBKeyRequest body = null);

        /// <summary>
        /// Gets GeoPropertyResponses
        /// </summary>
        /// <remarks>
        /// Gets GeoPropertyResponses
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GeoPropertyPBKeyResponses)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoPropertyPBKeyResponses>> GetGeoPropertyByPBKeyBatchAsyncWithHttpInfo (GeoPropertyPBKeyRequest body = null);
        /// <summary>
        /// Gets ParcelBoundary
        /// </summary>
        /// <remarks>
        /// Gets ParcelBoundary
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>Task of ParcelBoundary</returns>
        System.Threading.Tasks.Task<ParcelBoundary> GetParcelBoundaryByAddressAsync (string address, string accept = null);

        /// <summary>
        /// Gets ParcelBoundary
        /// </summary>
        /// <remarks>
        /// Gets ParcelBoundary
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>Task of ApiResponse (ParcelBoundary)</returns>
        System.Threading.Tasks.Task<ApiResponse<ParcelBoundary>> GetParcelBoundaryByAddressAsyncWithHttpInfo (string address, string accept = null);
        /// <summary>
        /// Gets ParcelBoundary
        /// </summary>
        /// <remarks>
        /// Gets ParcelBoundary
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>Task of ParcelBoundary</returns>
        System.Threading.Tasks.Task<ParcelBoundary> GetParcelBoundaryByLocationAsync (string longitude, string latitude, string accept = null);

        /// <summary>
        /// Gets ParcelBoundary
        /// </summary>
        /// <remarks>
        /// Gets ParcelBoundary
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>Task of ApiResponse (ParcelBoundary)</returns>
        System.Threading.Tasks.Task<ApiResponse<ParcelBoundary>> GetParcelBoundaryByLocationAsyncWithHttpInfo (string longitude, string latitude, string accept = null);
        /// <summary>
        /// Gets ParcelBoundary
        /// </summary>
        /// <remarks>
        /// Gets ParcelBoundary
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">PB specific unique key for each address</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>Task of ParcelBoundary</returns>
        System.Threading.Tasks.Task<ParcelBoundary> GetParcelBoundaryByPBKeyAsync (string pbKey, string accept = null);

        /// <summary>
        /// Gets ParcelBoundary
        /// </summary>
        /// <remarks>
        /// Gets ParcelBoundary
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">PB specific unique key for each address</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>Task of ApiResponse (ParcelBoundary)</returns>
        System.Threading.Tasks.Task<ApiResponse<ParcelBoundary>> GetParcelBoundaryByPBKeyAsyncWithHttpInfo (string pbKey, string accept = null);
        /// <summary>
        /// Search Nearby Schools by Address
        /// </summary>
        /// <remarks>
        /// Search Nearby Schools by Address
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="edLevel">Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools  (optional)</param>
        /// <param name="schoolType">Single digit code for schoolTypes applicable values are PRI and PUB (optional)</param>
        /// <param name="schoolSubType">Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education) (optional)</param>
        /// <param name="gender">Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) (optional)</param>
        /// <param name="assignedSchoolsOnly">Single digit code for assignedSchoolOnly applicable values are  Y/N  (optional)</param>
        /// <param name="districtSchoolsOnly">Single digit code for districtSchoolOnly applicable values are Y/N  (optional)</param>
        /// <param name="searchRadius">Search Radius within which schools are searched (optional)</param>
        /// <param name="searchRadiusUnit">Search Radius unit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelTimeUnit">Travel Time unit applicable values are minutes,hours,seconds,milliseconds  (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelDistanceUnit">Travel distanceUnit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelMode">Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving (optional)</param>
        /// <param name="maxCandidates">Max result to search  (optional, default to 10)</param>
        /// <returns>Task of SchoolsNearByResponse</returns>
        System.Threading.Tasks.Task<SchoolsNearByResponse> GetSchoolsByAddressAsync (string address, string edLevel = null, string schoolType = null, string schoolSubType = null, string gender = null, string assignedSchoolsOnly = null, string districtSchoolsOnly = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string maxCandidates = null);

        /// <summary>
        /// Search Nearby Schools by Address
        /// </summary>
        /// <remarks>
        /// Search Nearby Schools by Address
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="edLevel">Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools  (optional)</param>
        /// <param name="schoolType">Single digit code for schoolTypes applicable values are PRI and PUB (optional)</param>
        /// <param name="schoolSubType">Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education) (optional)</param>
        /// <param name="gender">Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) (optional)</param>
        /// <param name="assignedSchoolsOnly">Single digit code for assignedSchoolOnly applicable values are  Y/N  (optional)</param>
        /// <param name="districtSchoolsOnly">Single digit code for districtSchoolOnly applicable values are Y/N  (optional)</param>
        /// <param name="searchRadius">Search Radius within which schools are searched (optional)</param>
        /// <param name="searchRadiusUnit">Search Radius unit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelTimeUnit">Travel Time unit applicable values are minutes,hours,seconds,milliseconds  (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelDistanceUnit">Travel distanceUnit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelMode">Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving (optional)</param>
        /// <param name="maxCandidates">Max result to search  (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (SchoolsNearByResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchoolsNearByResponse>> GetSchoolsByAddressAsyncWithHttpInfo (string address, string edLevel = null, string schoolType = null, string schoolSubType = null, string gender = null, string assignedSchoolsOnly = null, string districtSchoolsOnly = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string maxCandidates = null);
        /// <summary>
        /// Search Nearby Schools by PBKey
        /// </summary>
        /// <remarks>
        /// Search Nearby Schools by PBKey
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">free form text</param>
        /// <param name="edLevel">Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools  (optional)</param>
        /// <param name="schoolType">Single digit code for schoolTypes applicable values are PRI and PUB (optional)</param>
        /// <param name="schoolSubType">Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education) (optional)</param>
        /// <param name="gender">Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) (optional)</param>
        /// <param name="assignedSchoolsOnly">Single digit code for assignedSchoolOnly applicable values are  Y/N  (optional)</param>
        /// <param name="districtSchoolsOnly">Single digit code for districtSchoolOnly applicable values are Y/N  (optional)</param>
        /// <param name="searchRadius">Search Radius within which schools are searched (optional)</param>
        /// <param name="searchRadiusUnit">Search Radius unit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelTimeUnit">Travel Time unit applicable values are minutes,hours,seconds,milliseconds  (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelDistanceUnit">Travel distanceUnit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelMode">Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving (optional)</param>
        /// <param name="maxCandidates">Max result to search  (optional, default to 10)</param>
        /// <returns>Task of SchoolsNearByResponse</returns>
        System.Threading.Tasks.Task<SchoolsNearByResponse> GetSchoolsNearByUsingPBKeyAsync (string pbKey, string edLevel = null, string schoolType = null, string schoolSubType = null, string gender = null, string assignedSchoolsOnly = null, string districtSchoolsOnly = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string maxCandidates = null);

        /// <summary>
        /// Search Nearby Schools by PBKey
        /// </summary>
        /// <remarks>
        /// Search Nearby Schools by PBKey
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">free form text</param>
        /// <param name="edLevel">Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools  (optional)</param>
        /// <param name="schoolType">Single digit code for schoolTypes applicable values are PRI and PUB (optional)</param>
        /// <param name="schoolSubType">Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education) (optional)</param>
        /// <param name="gender">Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) (optional)</param>
        /// <param name="assignedSchoolsOnly">Single digit code for assignedSchoolOnly applicable values are  Y/N  (optional)</param>
        /// <param name="districtSchoolsOnly">Single digit code for districtSchoolOnly applicable values are Y/N  (optional)</param>
        /// <param name="searchRadius">Search Radius within which schools are searched (optional)</param>
        /// <param name="searchRadiusUnit">Search Radius unit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelTimeUnit">Travel Time unit applicable values are minutes,hours,seconds,milliseconds  (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelDistanceUnit">Travel distanceUnit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelMode">Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving (optional)</param>
        /// <param name="maxCandidates">Max result to search  (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (SchoolsNearByResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchoolsNearByResponse>> GetSchoolsNearByUsingPBKeyAsyncWithHttpInfo (string pbKey, string edLevel = null, string schoolType = null, string schoolSubType = null, string gender = null, string assignedSchoolsOnly = null, string districtSchoolsOnly = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string maxCandidates = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LIAPIGeoPropertyServiceApi : ILIAPIGeoPropertyServiceApi
    {
        private pb.locationIntelligence.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LIAPIGeoPropertyServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LIAPIGeoPropertyServiceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = pb.locationIntelligence.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LIAPIGeoPropertyServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LIAPIGeoPropertyServiceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = pb.locationIntelligence.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public pb.locationIntelligence.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets GeoPropertyResponse Gets GeoPropertyResponse
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <returns>GeoPropertyResponse</returns>
        public GeoPropertyResponse GetGeoPropertyByAddress (string address)
        {
             ApiResponse<GeoPropertyResponse> localVarResponse = GetGeoPropertyByAddressWithHttpInfo(address);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets GeoPropertyResponse Gets GeoPropertyResponse
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <returns>ApiResponse of GeoPropertyResponse</returns>
        public ApiResponse< GeoPropertyResponse > GetGeoPropertyByAddressWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LIAPIGeoPropertyServiceApi->GetGeoPropertyByAddress");

            var localVarPath = "/geoproperty/v1/all/attributes/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGeoPropertyByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoPropertyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoPropertyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoPropertyResponse)));
            
        }

        /// <summary>
        /// Gets GeoPropertyResponse Gets GeoPropertyResponse
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <returns>Task of GeoPropertyResponse</returns>
        public async System.Threading.Tasks.Task<GeoPropertyResponse> GetGeoPropertyByAddressAsync (string address)
        {
             ApiResponse<GeoPropertyResponse> localVarResponse = await GetGeoPropertyByAddressAsyncWithHttpInfo(address);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets GeoPropertyResponse Gets GeoPropertyResponse
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <returns>Task of ApiResponse (GeoPropertyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeoPropertyResponse>> GetGeoPropertyByAddressAsyncWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LIAPIGeoPropertyServiceApi->GetGeoPropertyByAddress");

            var localVarPath = "/geoproperty/v1/all/attributes/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGeoPropertyByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoPropertyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoPropertyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoPropertyResponse)));
            
        }

        /// <summary>
        /// Gets GeoPropertyResponses Gets GeoPropertyResponses
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>GeoPropertyResponses</returns>
        public GeoPropertyResponses GetGeoPropertyByAddressBatch (GeoPropertyAddressRequest body = null)
        {
             ApiResponse<GeoPropertyResponses> localVarResponse = GetGeoPropertyByAddressBatchWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets GeoPropertyResponses Gets GeoPropertyResponses
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GeoPropertyResponses</returns>
        public ApiResponse< GeoPropertyResponses > GetGeoPropertyByAddressBatchWithHttpInfo (GeoPropertyAddressRequest body = null)
        {

            var localVarPath = "/geoproperty/v1/all/attributes/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGeoPropertyByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoPropertyResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoPropertyResponses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoPropertyResponses)));
            
        }

        /// <summary>
        /// Gets GeoPropertyResponses Gets GeoPropertyResponses
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GeoPropertyResponses</returns>
        public async System.Threading.Tasks.Task<GeoPropertyResponses> GetGeoPropertyByAddressBatchAsync (GeoPropertyAddressRequest body = null)
        {
             ApiResponse<GeoPropertyResponses> localVarResponse = await GetGeoPropertyByAddressBatchAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets GeoPropertyResponses Gets GeoPropertyResponses
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GeoPropertyResponses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeoPropertyResponses>> GetGeoPropertyByAddressBatchAsyncWithHttpInfo (GeoPropertyAddressRequest body = null)
        {

            var localVarPath = "/geoproperty/v1/all/attributes/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGeoPropertyByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoPropertyResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoPropertyResponses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoPropertyResponses)));
            
        }

        /// <summary>
        /// Gets GeoPropertyResponse Gets GeoPropertyResponse
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">free form text</param>
        /// <returns>GeoPropertyPBKeyResponse</returns>
        public GeoPropertyPBKeyResponse GetGeoPropertyByPBKey (string pbKey)
        {
             ApiResponse<GeoPropertyPBKeyResponse> localVarResponse = GetGeoPropertyByPBKeyWithHttpInfo(pbKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets GeoPropertyResponse Gets GeoPropertyResponse
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">free form text</param>
        /// <returns>ApiResponse of GeoPropertyPBKeyResponse</returns>
        public ApiResponse< GeoPropertyPBKeyResponse > GetGeoPropertyByPBKeyWithHttpInfo (string pbKey)
        {
            // verify the required parameter 'pbKey' is set
            if (pbKey == null)
                throw new ApiException(400, "Missing required parameter 'pbKey' when calling LIAPIGeoPropertyServiceApi->GetGeoPropertyByPBKey");

            var localVarPath = "/geoproperty/v1/all/attributes/bypbkey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (pbKey != null) localVarQueryParams.Add("pbKey", Configuration.ApiClient.ParameterToString(pbKey)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGeoPropertyByPBKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoPropertyPBKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoPropertyPBKeyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoPropertyPBKeyResponse)));
            
        }

        /// <summary>
        /// Gets GeoPropertyResponse Gets GeoPropertyResponse
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">free form text</param>
        /// <returns>Task of GeoPropertyPBKeyResponse</returns>
        public async System.Threading.Tasks.Task<GeoPropertyPBKeyResponse> GetGeoPropertyByPBKeyAsync (string pbKey)
        {
             ApiResponse<GeoPropertyPBKeyResponse> localVarResponse = await GetGeoPropertyByPBKeyAsyncWithHttpInfo(pbKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets GeoPropertyResponse Gets GeoPropertyResponse
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">free form text</param>
        /// <returns>Task of ApiResponse (GeoPropertyPBKeyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeoPropertyPBKeyResponse>> GetGeoPropertyByPBKeyAsyncWithHttpInfo (string pbKey)
        {
            // verify the required parameter 'pbKey' is set
            if (pbKey == null)
                throw new ApiException(400, "Missing required parameter 'pbKey' when calling LIAPIGeoPropertyServiceApi->GetGeoPropertyByPBKey");

            var localVarPath = "/geoproperty/v1/all/attributes/bypbkey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (pbKey != null) localVarQueryParams.Add("pbKey", Configuration.ApiClient.ParameterToString(pbKey)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGeoPropertyByPBKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoPropertyPBKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoPropertyPBKeyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoPropertyPBKeyResponse)));
            
        }

        /// <summary>
        /// Gets GeoPropertyResponses Gets GeoPropertyResponses
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>GeoPropertyPBKeyResponses</returns>
        public GeoPropertyPBKeyResponses GetGeoPropertyByPBKeyBatch (GeoPropertyPBKeyRequest body = null)
        {
             ApiResponse<GeoPropertyPBKeyResponses> localVarResponse = GetGeoPropertyByPBKeyBatchWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets GeoPropertyResponses Gets GeoPropertyResponses
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GeoPropertyPBKeyResponses</returns>
        public ApiResponse< GeoPropertyPBKeyResponses > GetGeoPropertyByPBKeyBatchWithHttpInfo (GeoPropertyPBKeyRequest body = null)
        {

            var localVarPath = "/geoproperty/v1/all/attributes/bypbkey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGeoPropertyByPBKeyBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoPropertyPBKeyResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoPropertyPBKeyResponses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoPropertyPBKeyResponses)));
            
        }

        /// <summary>
        /// Gets GeoPropertyResponses Gets GeoPropertyResponses
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GeoPropertyPBKeyResponses</returns>
        public async System.Threading.Tasks.Task<GeoPropertyPBKeyResponses> GetGeoPropertyByPBKeyBatchAsync (GeoPropertyPBKeyRequest body = null)
        {
             ApiResponse<GeoPropertyPBKeyResponses> localVarResponse = await GetGeoPropertyByPBKeyBatchAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets GeoPropertyResponses Gets GeoPropertyResponses
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GeoPropertyPBKeyResponses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeoPropertyPBKeyResponses>> GetGeoPropertyByPBKeyBatchAsyncWithHttpInfo (GeoPropertyPBKeyRequest body = null)
        {

            var localVarPath = "/geoproperty/v1/all/attributes/bypbkey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGeoPropertyByPBKeyBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoPropertyPBKeyResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoPropertyPBKeyResponses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoPropertyPBKeyResponses)));
            
        }

        /// <summary>
        /// Gets ParcelBoundary Gets ParcelBoundary
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>ParcelBoundary</returns>
        public ParcelBoundary GetParcelBoundaryByAddress (string address, string accept = null)
        {
             ApiResponse<ParcelBoundary> localVarResponse = GetParcelBoundaryByAddressWithHttpInfo(address, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets ParcelBoundary Gets ParcelBoundary
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>ApiResponse of ParcelBoundary</returns>
        public ApiResponse< ParcelBoundary > GetParcelBoundaryByAddressWithHttpInfo (string address, string accept = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LIAPIGeoPropertyServiceApi->GetParcelBoundaryByAddress");

            var localVarPath = "/geoproperty/v1/parcelboundary/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelBoundaryByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParcelBoundary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (ParcelBoundary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParcelBoundary)));
            
        }

        /// <summary>
        /// Gets ParcelBoundary Gets ParcelBoundary
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>Task of ParcelBoundary</returns>
        public async System.Threading.Tasks.Task<ParcelBoundary> GetParcelBoundaryByAddressAsync (string address, string accept = null)
        {
             ApiResponse<ParcelBoundary> localVarResponse = await GetParcelBoundaryByAddressAsyncWithHttpInfo(address, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets ParcelBoundary Gets ParcelBoundary
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>Task of ApiResponse (ParcelBoundary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ParcelBoundary>> GetParcelBoundaryByAddressAsyncWithHttpInfo (string address, string accept = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LIAPIGeoPropertyServiceApi->GetParcelBoundaryByAddress");

            var localVarPath = "/geoproperty/v1/parcelboundary/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelBoundaryByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParcelBoundary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (ParcelBoundary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParcelBoundary)));
            
        }

        /// <summary>
        /// Gets ParcelBoundary Gets ParcelBoundary
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>ParcelBoundary</returns>
        public ParcelBoundary GetParcelBoundaryByLocation (string longitude, string latitude, string accept = null)
        {
             ApiResponse<ParcelBoundary> localVarResponse = GetParcelBoundaryByLocationWithHttpInfo(longitude, latitude, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets ParcelBoundary Gets ParcelBoundary
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>ApiResponse of ParcelBoundary</returns>
        public ApiResponse< ParcelBoundary > GetParcelBoundaryByLocationWithHttpInfo (string longitude, string latitude, string accept = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LIAPIGeoPropertyServiceApi->GetParcelBoundaryByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LIAPIGeoPropertyServiceApi->GetParcelBoundaryByLocation");

            var localVarPath = "/geoproperty/v1/parcelboundary/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelBoundaryByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParcelBoundary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (ParcelBoundary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParcelBoundary)));
            
        }

        /// <summary>
        /// Gets ParcelBoundary Gets ParcelBoundary
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>Task of ParcelBoundary</returns>
        public async System.Threading.Tasks.Task<ParcelBoundary> GetParcelBoundaryByLocationAsync (string longitude, string latitude, string accept = null)
        {
             ApiResponse<ParcelBoundary> localVarResponse = await GetParcelBoundaryByLocationAsyncWithHttpInfo(longitude, latitude, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets ParcelBoundary Gets ParcelBoundary
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>Task of ApiResponse (ParcelBoundary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ParcelBoundary>> GetParcelBoundaryByLocationAsyncWithHttpInfo (string longitude, string latitude, string accept = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LIAPIGeoPropertyServiceApi->GetParcelBoundaryByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LIAPIGeoPropertyServiceApi->GetParcelBoundaryByLocation");

            var localVarPath = "/geoproperty/v1/parcelboundary/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelBoundaryByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParcelBoundary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (ParcelBoundary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParcelBoundary)));
            
        }

        /// <summary>
        /// Gets ParcelBoundary Gets ParcelBoundary
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">PB specific unique key for each address</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>ParcelBoundary</returns>
        public ParcelBoundary GetParcelBoundaryByPBKey (string pbKey, string accept = null)
        {
             ApiResponse<ParcelBoundary> localVarResponse = GetParcelBoundaryByPBKeyWithHttpInfo(pbKey, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets ParcelBoundary Gets ParcelBoundary
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">PB specific unique key for each address</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>ApiResponse of ParcelBoundary</returns>
        public ApiResponse< ParcelBoundary > GetParcelBoundaryByPBKeyWithHttpInfo (string pbKey, string accept = null)
        {
            // verify the required parameter 'pbKey' is set
            if (pbKey == null)
                throw new ApiException(400, "Missing required parameter 'pbKey' when calling LIAPIGeoPropertyServiceApi->GetParcelBoundaryByPBKey");

            var localVarPath = "/geoproperty/v1/parcelboundary/bypbkey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (pbKey != null) localVarQueryParams.Add("pbKey", Configuration.ApiClient.ParameterToString(pbKey)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelBoundaryByPBKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParcelBoundary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (ParcelBoundary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParcelBoundary)));
            
        }

        /// <summary>
        /// Gets ParcelBoundary Gets ParcelBoundary
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">PB specific unique key for each address</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>Task of ParcelBoundary</returns>
        public async System.Threading.Tasks.Task<ParcelBoundary> GetParcelBoundaryByPBKeyAsync (string pbKey, string accept = null)
        {
             ApiResponse<ParcelBoundary> localVarResponse = await GetParcelBoundaryByPBKeyAsyncWithHttpInfo(pbKey, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets ParcelBoundary Gets ParcelBoundary
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">PB specific unique key for each address</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>Task of ApiResponse (ParcelBoundary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ParcelBoundary>> GetParcelBoundaryByPBKeyAsyncWithHttpInfo (string pbKey, string accept = null)
        {
            // verify the required parameter 'pbKey' is set
            if (pbKey == null)
                throw new ApiException(400, "Missing required parameter 'pbKey' when calling LIAPIGeoPropertyServiceApi->GetParcelBoundaryByPBKey");

            var localVarPath = "/geoproperty/v1/parcelboundary/bypbkey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (pbKey != null) localVarQueryParams.Add("pbKey", Configuration.ApiClient.ParameterToString(pbKey)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelBoundaryByPBKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParcelBoundary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (ParcelBoundary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParcelBoundary)));
            
        }

        /// <summary>
        /// Search Nearby Schools by Address Search Nearby Schools by Address
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="edLevel">Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools  (optional)</param>
        /// <param name="schoolType">Single digit code for schoolTypes applicable values are PRI and PUB (optional)</param>
        /// <param name="schoolSubType">Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education) (optional)</param>
        /// <param name="gender">Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) (optional)</param>
        /// <param name="assignedSchoolsOnly">Single digit code for assignedSchoolOnly applicable values are  Y/N  (optional)</param>
        /// <param name="districtSchoolsOnly">Single digit code for districtSchoolOnly applicable values are Y/N  (optional)</param>
        /// <param name="searchRadius">Search Radius within which schools are searched (optional)</param>
        /// <param name="searchRadiusUnit">Search Radius unit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelTimeUnit">Travel Time unit applicable values are minutes,hours,seconds,milliseconds  (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelDistanceUnit">Travel distanceUnit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelMode">Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving (optional)</param>
        /// <param name="maxCandidates">Max result to search  (optional, default to 10)</param>
        /// <returns>SchoolsNearByResponse</returns>
        public SchoolsNearByResponse GetSchoolsByAddress (string address, string edLevel = null, string schoolType = null, string schoolSubType = null, string gender = null, string assignedSchoolsOnly = null, string districtSchoolsOnly = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string maxCandidates = null)
        {
             ApiResponse<SchoolsNearByResponse> localVarResponse = GetSchoolsByAddressWithHttpInfo(address, edLevel, schoolType, schoolSubType, gender, assignedSchoolsOnly, districtSchoolsOnly, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, maxCandidates);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Nearby Schools by Address Search Nearby Schools by Address
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="edLevel">Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools  (optional)</param>
        /// <param name="schoolType">Single digit code for schoolTypes applicable values are PRI and PUB (optional)</param>
        /// <param name="schoolSubType">Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education) (optional)</param>
        /// <param name="gender">Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) (optional)</param>
        /// <param name="assignedSchoolsOnly">Single digit code for assignedSchoolOnly applicable values are  Y/N  (optional)</param>
        /// <param name="districtSchoolsOnly">Single digit code for districtSchoolOnly applicable values are Y/N  (optional)</param>
        /// <param name="searchRadius">Search Radius within which schools are searched (optional)</param>
        /// <param name="searchRadiusUnit">Search Radius unit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelTimeUnit">Travel Time unit applicable values are minutes,hours,seconds,milliseconds  (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelDistanceUnit">Travel distanceUnit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelMode">Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving (optional)</param>
        /// <param name="maxCandidates">Max result to search  (optional, default to 10)</param>
        /// <returns>ApiResponse of SchoolsNearByResponse</returns>
        public ApiResponse< SchoolsNearByResponse > GetSchoolsByAddressWithHttpInfo (string address, string edLevel = null, string schoolType = null, string schoolSubType = null, string gender = null, string assignedSchoolsOnly = null, string districtSchoolsOnly = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string maxCandidates = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LIAPIGeoPropertyServiceApi->GetSchoolsByAddress");

            var localVarPath = "/geoproperty/v1/school/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (edLevel != null) localVarQueryParams.Add("edLevel", Configuration.ApiClient.ParameterToString(edLevel)); // query parameter
            if (schoolType != null) localVarQueryParams.Add("schoolType", Configuration.ApiClient.ParameterToString(schoolType)); // query parameter
            if (schoolSubType != null) localVarQueryParams.Add("schoolSubType", Configuration.ApiClient.ParameterToString(schoolSubType)); // query parameter
            if (gender != null) localVarQueryParams.Add("gender", Configuration.ApiClient.ParameterToString(gender)); // query parameter
            if (assignedSchoolsOnly != null) localVarQueryParams.Add("assignedSchoolsOnly", Configuration.ApiClient.ParameterToString(assignedSchoolsOnly)); // query parameter
            if (districtSchoolsOnly != null) localVarQueryParams.Add("districtSchoolsOnly", Configuration.ApiClient.ParameterToString(districtSchoolsOnly)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (travelMode != null) localVarQueryParams.Add("travelMode", Configuration.ApiClient.ParameterToString(travelMode)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolsByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolsNearByResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (SchoolsNearByResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolsNearByResponse)));
            
        }

        /// <summary>
        /// Search Nearby Schools by Address Search Nearby Schools by Address
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="edLevel">Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools  (optional)</param>
        /// <param name="schoolType">Single digit code for schoolTypes applicable values are PRI and PUB (optional)</param>
        /// <param name="schoolSubType">Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education) (optional)</param>
        /// <param name="gender">Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) (optional)</param>
        /// <param name="assignedSchoolsOnly">Single digit code for assignedSchoolOnly applicable values are  Y/N  (optional)</param>
        /// <param name="districtSchoolsOnly">Single digit code for districtSchoolOnly applicable values are Y/N  (optional)</param>
        /// <param name="searchRadius">Search Radius within which schools are searched (optional)</param>
        /// <param name="searchRadiusUnit">Search Radius unit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelTimeUnit">Travel Time unit applicable values are minutes,hours,seconds,milliseconds  (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelDistanceUnit">Travel distanceUnit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelMode">Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving (optional)</param>
        /// <param name="maxCandidates">Max result to search  (optional, default to 10)</param>
        /// <returns>Task of SchoolsNearByResponse</returns>
        public async System.Threading.Tasks.Task<SchoolsNearByResponse> GetSchoolsByAddressAsync (string address, string edLevel = null, string schoolType = null, string schoolSubType = null, string gender = null, string assignedSchoolsOnly = null, string districtSchoolsOnly = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string maxCandidates = null)
        {
             ApiResponse<SchoolsNearByResponse> localVarResponse = await GetSchoolsByAddressAsyncWithHttpInfo(address, edLevel, schoolType, schoolSubType, gender, assignedSchoolsOnly, districtSchoolsOnly, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, maxCandidates);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Nearby Schools by Address Search Nearby Schools by Address
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="edLevel">Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools  (optional)</param>
        /// <param name="schoolType">Single digit code for schoolTypes applicable values are PRI and PUB (optional)</param>
        /// <param name="schoolSubType">Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education) (optional)</param>
        /// <param name="gender">Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) (optional)</param>
        /// <param name="assignedSchoolsOnly">Single digit code for assignedSchoolOnly applicable values are  Y/N  (optional)</param>
        /// <param name="districtSchoolsOnly">Single digit code for districtSchoolOnly applicable values are Y/N  (optional)</param>
        /// <param name="searchRadius">Search Radius within which schools are searched (optional)</param>
        /// <param name="searchRadiusUnit">Search Radius unit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelTimeUnit">Travel Time unit applicable values are minutes,hours,seconds,milliseconds  (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelDistanceUnit">Travel distanceUnit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelMode">Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving (optional)</param>
        /// <param name="maxCandidates">Max result to search  (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (SchoolsNearByResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchoolsNearByResponse>> GetSchoolsByAddressAsyncWithHttpInfo (string address, string edLevel = null, string schoolType = null, string schoolSubType = null, string gender = null, string assignedSchoolsOnly = null, string districtSchoolsOnly = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string maxCandidates = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LIAPIGeoPropertyServiceApi->GetSchoolsByAddress");

            var localVarPath = "/geoproperty/v1/school/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (edLevel != null) localVarQueryParams.Add("edLevel", Configuration.ApiClient.ParameterToString(edLevel)); // query parameter
            if (schoolType != null) localVarQueryParams.Add("schoolType", Configuration.ApiClient.ParameterToString(schoolType)); // query parameter
            if (schoolSubType != null) localVarQueryParams.Add("schoolSubType", Configuration.ApiClient.ParameterToString(schoolSubType)); // query parameter
            if (gender != null) localVarQueryParams.Add("gender", Configuration.ApiClient.ParameterToString(gender)); // query parameter
            if (assignedSchoolsOnly != null) localVarQueryParams.Add("assignedSchoolsOnly", Configuration.ApiClient.ParameterToString(assignedSchoolsOnly)); // query parameter
            if (districtSchoolsOnly != null) localVarQueryParams.Add("districtSchoolsOnly", Configuration.ApiClient.ParameterToString(districtSchoolsOnly)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (travelMode != null) localVarQueryParams.Add("travelMode", Configuration.ApiClient.ParameterToString(travelMode)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolsByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolsNearByResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (SchoolsNearByResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolsNearByResponse)));
            
        }

        /// <summary>
        /// Search Nearby Schools by PBKey Search Nearby Schools by PBKey
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">free form text</param>
        /// <param name="edLevel">Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools  (optional)</param>
        /// <param name="schoolType">Single digit code for schoolTypes applicable values are PRI and PUB (optional)</param>
        /// <param name="schoolSubType">Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education) (optional)</param>
        /// <param name="gender">Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) (optional)</param>
        /// <param name="assignedSchoolsOnly">Single digit code for assignedSchoolOnly applicable values are  Y/N  (optional)</param>
        /// <param name="districtSchoolsOnly">Single digit code for districtSchoolOnly applicable values are Y/N  (optional)</param>
        /// <param name="searchRadius">Search Radius within which schools are searched (optional)</param>
        /// <param name="searchRadiusUnit">Search Radius unit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelTimeUnit">Travel Time unit applicable values are minutes,hours,seconds,milliseconds  (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelDistanceUnit">Travel distanceUnit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelMode">Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving (optional)</param>
        /// <param name="maxCandidates">Max result to search  (optional, default to 10)</param>
        /// <returns>SchoolsNearByResponse</returns>
        public SchoolsNearByResponse GetSchoolsNearByUsingPBKey (string pbKey, string edLevel = null, string schoolType = null, string schoolSubType = null, string gender = null, string assignedSchoolsOnly = null, string districtSchoolsOnly = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string maxCandidates = null)
        {
             ApiResponse<SchoolsNearByResponse> localVarResponse = GetSchoolsNearByUsingPBKeyWithHttpInfo(pbKey, edLevel, schoolType, schoolSubType, gender, assignedSchoolsOnly, districtSchoolsOnly, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, maxCandidates);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Nearby Schools by PBKey Search Nearby Schools by PBKey
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">free form text</param>
        /// <param name="edLevel">Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools  (optional)</param>
        /// <param name="schoolType">Single digit code for schoolTypes applicable values are PRI and PUB (optional)</param>
        /// <param name="schoolSubType">Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education) (optional)</param>
        /// <param name="gender">Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) (optional)</param>
        /// <param name="assignedSchoolsOnly">Single digit code for assignedSchoolOnly applicable values are  Y/N  (optional)</param>
        /// <param name="districtSchoolsOnly">Single digit code for districtSchoolOnly applicable values are Y/N  (optional)</param>
        /// <param name="searchRadius">Search Radius within which schools are searched (optional)</param>
        /// <param name="searchRadiusUnit">Search Radius unit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelTimeUnit">Travel Time unit applicable values are minutes,hours,seconds,milliseconds  (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelDistanceUnit">Travel distanceUnit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelMode">Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving (optional)</param>
        /// <param name="maxCandidates">Max result to search  (optional, default to 10)</param>
        /// <returns>ApiResponse of SchoolsNearByResponse</returns>
        public ApiResponse< SchoolsNearByResponse > GetSchoolsNearByUsingPBKeyWithHttpInfo (string pbKey, string edLevel = null, string schoolType = null, string schoolSubType = null, string gender = null, string assignedSchoolsOnly = null, string districtSchoolsOnly = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string maxCandidates = null)
        {
            // verify the required parameter 'pbKey' is set
            if (pbKey == null)
                throw new ApiException(400, "Missing required parameter 'pbKey' when calling LIAPIGeoPropertyServiceApi->GetSchoolsNearByUsingPBKey");

            var localVarPath = "/geoproperty/v1/school/bypbkey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (pbKey != null) localVarQueryParams.Add("pbKey", Configuration.ApiClient.ParameterToString(pbKey)); // query parameter
            if (edLevel != null) localVarQueryParams.Add("edLevel", Configuration.ApiClient.ParameterToString(edLevel)); // query parameter
            if (schoolType != null) localVarQueryParams.Add("schoolType", Configuration.ApiClient.ParameterToString(schoolType)); // query parameter
            if (schoolSubType != null) localVarQueryParams.Add("schoolSubType", Configuration.ApiClient.ParameterToString(schoolSubType)); // query parameter
            if (gender != null) localVarQueryParams.Add("gender", Configuration.ApiClient.ParameterToString(gender)); // query parameter
            if (assignedSchoolsOnly != null) localVarQueryParams.Add("assignedSchoolsOnly", Configuration.ApiClient.ParameterToString(assignedSchoolsOnly)); // query parameter
            if (districtSchoolsOnly != null) localVarQueryParams.Add("districtSchoolsOnly", Configuration.ApiClient.ParameterToString(districtSchoolsOnly)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (travelMode != null) localVarQueryParams.Add("travelMode", Configuration.ApiClient.ParameterToString(travelMode)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolsNearByUsingPBKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolsNearByResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (SchoolsNearByResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolsNearByResponse)));
            
        }

        /// <summary>
        /// Search Nearby Schools by PBKey Search Nearby Schools by PBKey
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">free form text</param>
        /// <param name="edLevel">Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools  (optional)</param>
        /// <param name="schoolType">Single digit code for schoolTypes applicable values are PRI and PUB (optional)</param>
        /// <param name="schoolSubType">Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education) (optional)</param>
        /// <param name="gender">Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) (optional)</param>
        /// <param name="assignedSchoolsOnly">Single digit code for assignedSchoolOnly applicable values are  Y/N  (optional)</param>
        /// <param name="districtSchoolsOnly">Single digit code for districtSchoolOnly applicable values are Y/N  (optional)</param>
        /// <param name="searchRadius">Search Radius within which schools are searched (optional)</param>
        /// <param name="searchRadiusUnit">Search Radius unit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelTimeUnit">Travel Time unit applicable values are minutes,hours,seconds,milliseconds  (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelDistanceUnit">Travel distanceUnit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelMode">Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving (optional)</param>
        /// <param name="maxCandidates">Max result to search  (optional, default to 10)</param>
        /// <returns>Task of SchoolsNearByResponse</returns>
        public async System.Threading.Tasks.Task<SchoolsNearByResponse> GetSchoolsNearByUsingPBKeyAsync (string pbKey, string edLevel = null, string schoolType = null, string schoolSubType = null, string gender = null, string assignedSchoolsOnly = null, string districtSchoolsOnly = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string maxCandidates = null)
        {
             ApiResponse<SchoolsNearByResponse> localVarResponse = await GetSchoolsNearByUsingPBKeyAsyncWithHttpInfo(pbKey, edLevel, schoolType, schoolSubType, gender, assignedSchoolsOnly, districtSchoolsOnly, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, maxCandidates);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Nearby Schools by PBKey Search Nearby Schools by PBKey
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pbKey">free form text</param>
        /// <param name="edLevel">Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools  (optional)</param>
        /// <param name="schoolType">Single digit code for schoolTypes applicable values are PRI and PUB (optional)</param>
        /// <param name="schoolSubType">Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education) (optional)</param>
        /// <param name="gender">Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) (optional)</param>
        /// <param name="assignedSchoolsOnly">Single digit code for assignedSchoolOnly applicable values are  Y/N  (optional)</param>
        /// <param name="districtSchoolsOnly">Single digit code for districtSchoolOnly applicable values are Y/N  (optional)</param>
        /// <param name="searchRadius">Search Radius within which schools are searched (optional)</param>
        /// <param name="searchRadiusUnit">Search Radius unit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelTimeUnit">Travel Time unit applicable values are minutes,hours,seconds,milliseconds  (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelDistanceUnit">Travel distanceUnit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelMode">Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving (optional)</param>
        /// <param name="maxCandidates">Max result to search  (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (SchoolsNearByResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchoolsNearByResponse>> GetSchoolsNearByUsingPBKeyAsyncWithHttpInfo (string pbKey, string edLevel = null, string schoolType = null, string schoolSubType = null, string gender = null, string assignedSchoolsOnly = null, string districtSchoolsOnly = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string maxCandidates = null)
        {
            // verify the required parameter 'pbKey' is set
            if (pbKey == null)
                throw new ApiException(400, "Missing required parameter 'pbKey' when calling LIAPIGeoPropertyServiceApi->GetSchoolsNearByUsingPBKey");

            var localVarPath = "/geoproperty/v1/school/bypbkey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (pbKey != null) localVarQueryParams.Add("pbKey", Configuration.ApiClient.ParameterToString(pbKey)); // query parameter
            if (edLevel != null) localVarQueryParams.Add("edLevel", Configuration.ApiClient.ParameterToString(edLevel)); // query parameter
            if (schoolType != null) localVarQueryParams.Add("schoolType", Configuration.ApiClient.ParameterToString(schoolType)); // query parameter
            if (schoolSubType != null) localVarQueryParams.Add("schoolSubType", Configuration.ApiClient.ParameterToString(schoolSubType)); // query parameter
            if (gender != null) localVarQueryParams.Add("gender", Configuration.ApiClient.ParameterToString(gender)); // query parameter
            if (assignedSchoolsOnly != null) localVarQueryParams.Add("assignedSchoolsOnly", Configuration.ApiClient.ParameterToString(assignedSchoolsOnly)); // query parameter
            if (districtSchoolsOnly != null) localVarQueryParams.Add("districtSchoolsOnly", Configuration.ApiClient.ParameterToString(districtSchoolsOnly)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (travelMode != null) localVarQueryParams.Add("travelMode", Configuration.ApiClient.ParameterToString(travelMode)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolsNearByUsingPBKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolsNearByResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (SchoolsNearByResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolsNearByResponse)));
            
        }

    }
}
