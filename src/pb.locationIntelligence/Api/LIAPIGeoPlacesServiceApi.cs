/* 
 * Location Intelligence APIs
 *
 * Incorporate our extensive geodata into everyday applications, business processes and workflows.
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using pb.locationIntelligence.Client;
using pb.locationIntelligence.Model;

namespace pb.locationIntelligence.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILIAPIGeoPlacesServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns Category Codes with their sub-categories (if exist), descriptions and SIC Codes mapping
        /// </summary>
        /// <remarks>
        /// Accepts first partial digits or full category codes to filter the response
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryCode">Specify starting digits or full category code to filter the response (optional)</param>
        /// <returns>GeoPlaceMetadataResponse</returns>
        GeoPlaceMetadataResponse GetCategoryCodeMetadata (string categoryCode = null);

        /// <summary>
        /// Returns Category Codes with their sub-categories (if exist), descriptions and SIC Codes mapping
        /// </summary>
        /// <remarks>
        /// Accepts first partial digits or full category codes to filter the response
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryCode">Specify starting digits or full category code to filter the response (optional)</param>
        /// <returns>ApiResponse of GeoPlaceMetadataResponse</returns>
        ApiResponse<GeoPlaceMetadataResponse> GetCategoryCodeMetadataWithHttpInfo (string categoryCode = null);
        /// <summary>
        /// Point of Interests By Address.
        /// </summary>
        /// <remarks>
        /// Accepts address as an input to retrieve nearby point of interests.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <param name="country">Country (optional)</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer2.pitneybowes.com/docs/location-intelligence/v1/en/poicategory/LiApiPOICategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <returns>GeoplacesResponse</returns>
        GeoplacesResponse GetPOIsByAddress (string address, string country = null, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null);

        /// <summary>
        /// Point of Interests By Address.
        /// </summary>
        /// <remarks>
        /// Accepts address as an input to retrieve nearby point of interests.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <param name="country">Country (optional)</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer2.pitneybowes.com/docs/location-intelligence/v1/en/poicategory/LiApiPOICategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <returns>ApiResponse of GeoplacesResponse</returns>
        ApiResponse<GeoplacesResponse> GetPOIsByAddressWithHttpInfo (string address, string country = null, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null);
        /// <summary>
        /// Point of Interests By Location.
        /// </summary>
        /// <remarks>
        /// Accepts longitude and latitude as an input to retrieve nearby point of interests.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://locate.pitneybowes.com/docs/location-intelligence/v1/en/poicategory/LiApiPOICategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <returns>GeoplacesResponse</returns>
        GeoplacesResponse GetPOIsByLocation (string longitude, string latitude, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null);

        /// <summary>
        /// Point of Interests By Location.
        /// </summary>
        /// <remarks>
        /// Accepts longitude and latitude as an input to retrieve nearby point of interests.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://locate.pitneybowes.com/docs/location-intelligence/v1/en/poicategory/LiApiPOICategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <returns>ApiResponse of GeoplacesResponse</returns>
        ApiResponse<GeoplacesResponse> GetPOIsByLocationWithHttpInfo (string longitude, string latitude, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null);
        /// <summary>
        /// Returns SIC Codes with their Industry Titles and Category Codes mapping
        /// </summary>
        /// <remarks>
        /// Accepts first few partial digits or full SIC codes to filter the response
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <returns>GeoPlaceMetadataResponse</returns>
        GeoPlaceMetadataResponse GetSICMetadata (string sicCode = null);

        /// <summary>
        /// Returns SIC Codes with their Industry Titles and Category Codes mapping
        /// </summary>
        /// <remarks>
        /// Accepts first few partial digits or full SIC codes to filter the response
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <returns>ApiResponse of GeoPlaceMetadataResponse</returns>
        ApiResponse<GeoPlaceMetadataResponse> GetSICMetadataWithHttpInfo (string sicCode = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns Category Codes with their sub-categories (if exist), descriptions and SIC Codes mapping
        /// </summary>
        /// <remarks>
        /// Accepts first partial digits or full category codes to filter the response
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryCode">Specify starting digits or full category code to filter the response (optional)</param>
        /// <returns>Task of GeoPlaceMetadataResponse</returns>
        System.Threading.Tasks.Task<GeoPlaceMetadataResponse> GetCategoryCodeMetadataAsync (string categoryCode = null);

        /// <summary>
        /// Returns Category Codes with their sub-categories (if exist), descriptions and SIC Codes mapping
        /// </summary>
        /// <remarks>
        /// Accepts first partial digits or full category codes to filter the response
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryCode">Specify starting digits or full category code to filter the response (optional)</param>
        /// <returns>Task of ApiResponse (GeoPlaceMetadataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoPlaceMetadataResponse>> GetCategoryCodeMetadataAsyncWithHttpInfo (string categoryCode = null);
        /// <summary>
        /// Point of Interests By Address.
        /// </summary>
        /// <remarks>
        /// Accepts address as an input to retrieve nearby point of interests.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <param name="country">Country (optional)</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer2.pitneybowes.com/docs/location-intelligence/v1/en/poicategory/LiApiPOICategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <returns>Task of GeoplacesResponse</returns>
        System.Threading.Tasks.Task<GeoplacesResponse> GetPOIsByAddressAsync (string address, string country = null, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null);

        /// <summary>
        /// Point of Interests By Address.
        /// </summary>
        /// <remarks>
        /// Accepts address as an input to retrieve nearby point of interests.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <param name="country">Country (optional)</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer2.pitneybowes.com/docs/location-intelligence/v1/en/poicategory/LiApiPOICategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <returns>Task of ApiResponse (GeoplacesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoplacesResponse>> GetPOIsByAddressAsyncWithHttpInfo (string address, string country = null, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null);
        /// <summary>
        /// Point of Interests By Location.
        /// </summary>
        /// <remarks>
        /// Accepts longitude and latitude as an input to retrieve nearby point of interests.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://locate.pitneybowes.com/docs/location-intelligence/v1/en/poicategory/LiApiPOICategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <returns>Task of GeoplacesResponse</returns>
        System.Threading.Tasks.Task<GeoplacesResponse> GetPOIsByLocationAsync (string longitude, string latitude, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null);

        /// <summary>
        /// Point of Interests By Location.
        /// </summary>
        /// <remarks>
        /// Accepts longitude and latitude as an input to retrieve nearby point of interests.
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://locate.pitneybowes.com/docs/location-intelligence/v1/en/poicategory/LiApiPOICategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <returns>Task of ApiResponse (GeoplacesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoplacesResponse>> GetPOIsByLocationAsyncWithHttpInfo (string longitude, string latitude, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null);
        /// <summary>
        /// Returns SIC Codes with their Industry Titles and Category Codes mapping
        /// </summary>
        /// <remarks>
        /// Accepts first few partial digits or full SIC codes to filter the response
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <returns>Task of GeoPlaceMetadataResponse</returns>
        System.Threading.Tasks.Task<GeoPlaceMetadataResponse> GetSICMetadataAsync (string sicCode = null);

        /// <summary>
        /// Returns SIC Codes with their Industry Titles and Category Codes mapping
        /// </summary>
        /// <remarks>
        /// Accepts first few partial digits or full SIC codes to filter the response
        /// </remarks>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <returns>Task of ApiResponse (GeoPlaceMetadataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoPlaceMetadataResponse>> GetSICMetadataAsyncWithHttpInfo (string sicCode = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LIAPIGeoPlacesServiceApi : ILIAPIGeoPlacesServiceApi
    {
        private pb.locationIntelligence.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LIAPIGeoPlacesServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LIAPIGeoPlacesServiceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = pb.locationIntelligence.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LIAPIGeoPlacesServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LIAPIGeoPlacesServiceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = pb.locationIntelligence.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public pb.locationIntelligence.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns Category Codes with their sub-categories (if exist), descriptions and SIC Codes mapping Accepts first partial digits or full category codes to filter the response
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryCode">Specify starting digits or full category code to filter the response (optional)</param>
        /// <returns>GeoPlaceMetadataResponse</returns>
        public GeoPlaceMetadataResponse GetCategoryCodeMetadata (string categoryCode = null)
        {
             ApiResponse<GeoPlaceMetadataResponse> localVarResponse = GetCategoryCodeMetadataWithHttpInfo(categoryCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns Category Codes with their sub-categories (if exist), descriptions and SIC Codes mapping Accepts first partial digits or full category codes to filter the response
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryCode">Specify starting digits or full category code to filter the response (optional)</param>
        /// <returns>ApiResponse of GeoPlaceMetadataResponse</returns>
        public ApiResponse< GeoPlaceMetadataResponse > GetCategoryCodeMetadataWithHttpInfo (string categoryCode = null)
        {

            var localVarPath = "/geoplaces/v1/metadata/category";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCategoryCodeMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoPlaceMetadataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoPlaceMetadataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoPlaceMetadataResponse)));
            
        }

        /// <summary>
        /// Returns Category Codes with their sub-categories (if exist), descriptions and SIC Codes mapping Accepts first partial digits or full category codes to filter the response
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryCode">Specify starting digits or full category code to filter the response (optional)</param>
        /// <returns>Task of GeoPlaceMetadataResponse</returns>
        public async System.Threading.Tasks.Task<GeoPlaceMetadataResponse> GetCategoryCodeMetadataAsync (string categoryCode = null)
        {
             ApiResponse<GeoPlaceMetadataResponse> localVarResponse = await GetCategoryCodeMetadataAsyncWithHttpInfo(categoryCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns Category Codes with their sub-categories (if exist), descriptions and SIC Codes mapping Accepts first partial digits or full category codes to filter the response
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryCode">Specify starting digits or full category code to filter the response (optional)</param>
        /// <returns>Task of ApiResponse (GeoPlaceMetadataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeoPlaceMetadataResponse>> GetCategoryCodeMetadataAsyncWithHttpInfo (string categoryCode = null)
        {

            var localVarPath = "/geoplaces/v1/metadata/category";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCategoryCodeMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoPlaceMetadataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoPlaceMetadataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoPlaceMetadataResponse)));
            
        }

        /// <summary>
        /// Point of Interests By Address. Accepts address as an input to retrieve nearby point of interests.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <param name="country">Country (optional)</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer2.pitneybowes.com/docs/location-intelligence/v1/en/poicategory/LiApiPOICategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <returns>GeoplacesResponse</returns>
        public GeoplacesResponse GetPOIsByAddress (string address, string country = null, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null)
        {
             ApiResponse<GeoplacesResponse> localVarResponse = GetPOIsByAddressWithHttpInfo(address, country, name, type, categoryCode, sicCode, maxCandidates, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, sortBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Point of Interests By Address. Accepts address as an input to retrieve nearby point of interests.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <param name="country">Country (optional)</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer2.pitneybowes.com/docs/location-intelligence/v1/en/poicategory/LiApiPOICategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <returns>ApiResponse of GeoplacesResponse</returns>
        public ApiResponse< GeoplacesResponse > GetPOIsByAddressWithHttpInfo (string address, string country = null, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LIAPIGeoPlacesServiceApi->GetPOIsByAddress");

            var localVarPath = "/geoplaces/v1/poi/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
            if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (travelMode != null) localVarQueryParams.Add("travelMode", Configuration.ApiClient.ParameterToString(travelMode)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIsByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoplacesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoplacesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoplacesResponse)));
            
        }

        /// <summary>
        /// Point of Interests By Address. Accepts address as an input to retrieve nearby point of interests.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <param name="country">Country (optional)</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer2.pitneybowes.com/docs/location-intelligence/v1/en/poicategory/LiApiPOICategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <returns>Task of GeoplacesResponse</returns>
        public async System.Threading.Tasks.Task<GeoplacesResponse> GetPOIsByAddressAsync (string address, string country = null, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null)
        {
             ApiResponse<GeoplacesResponse> localVarResponse = await GetPOIsByAddressAsyncWithHttpInfo(address, country, name, type, categoryCode, sicCode, maxCandidates, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, sortBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Point of Interests By Address. Accepts address as an input to retrieve nearby point of interests.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <param name="country">Country (optional)</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer2.pitneybowes.com/docs/location-intelligence/v1/en/poicategory/LiApiPOICategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <returns>Task of ApiResponse (GeoplacesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeoplacesResponse>> GetPOIsByAddressAsyncWithHttpInfo (string address, string country = null, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LIAPIGeoPlacesServiceApi->GetPOIsByAddress");

            var localVarPath = "/geoplaces/v1/poi/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
            if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (travelMode != null) localVarQueryParams.Add("travelMode", Configuration.ApiClient.ParameterToString(travelMode)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIsByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoplacesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoplacesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoplacesResponse)));
            
        }

        /// <summary>
        /// Point of Interests By Location. Accepts longitude and latitude as an input to retrieve nearby point of interests.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://locate.pitneybowes.com/docs/location-intelligence/v1/en/poicategory/LiApiPOICategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <returns>GeoplacesResponse</returns>
        public GeoplacesResponse GetPOIsByLocation (string longitude, string latitude, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null)
        {
             ApiResponse<GeoplacesResponse> localVarResponse = GetPOIsByLocationWithHttpInfo(longitude, latitude, name, type, categoryCode, sicCode, maxCandidates, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, sortBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Point of Interests By Location. Accepts longitude and latitude as an input to retrieve nearby point of interests.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://locate.pitneybowes.com/docs/location-intelligence/v1/en/poicategory/LiApiPOICategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <returns>ApiResponse of GeoplacesResponse</returns>
        public ApiResponse< GeoplacesResponse > GetPOIsByLocationWithHttpInfo (string longitude, string latitude, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LIAPIGeoPlacesServiceApi->GetPOIsByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LIAPIGeoPlacesServiceApi->GetPOIsByLocation");

            var localVarPath = "/geoplaces/v1/poi/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
            if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (travelMode != null) localVarQueryParams.Add("travelMode", Configuration.ApiClient.ParameterToString(travelMode)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIsByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoplacesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoplacesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoplacesResponse)));
            
        }

        /// <summary>
        /// Point of Interests By Location. Accepts longitude and latitude as an input to retrieve nearby point of interests.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://locate.pitneybowes.com/docs/location-intelligence/v1/en/poicategory/LiApiPOICategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <returns>Task of GeoplacesResponse</returns>
        public async System.Threading.Tasks.Task<GeoplacesResponse> GetPOIsByLocationAsync (string longitude, string latitude, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null)
        {
             ApiResponse<GeoplacesResponse> localVarResponse = await GetPOIsByLocationAsyncWithHttpInfo(longitude, latitude, name, type, categoryCode, sicCode, maxCandidates, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, sortBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Point of Interests By Location. Accepts longitude and latitude as an input to retrieve nearby point of interests.
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://locate.pitneybowes.com/docs/location-intelligence/v1/en/poicategory/LiApiPOICategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <returns>Task of ApiResponse (GeoplacesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeoplacesResponse>> GetPOIsByLocationAsyncWithHttpInfo (string longitude, string latitude, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LIAPIGeoPlacesServiceApi->GetPOIsByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LIAPIGeoPlacesServiceApi->GetPOIsByLocation");

            var localVarPath = "/geoplaces/v1/poi/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
            if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (travelMode != null) localVarQueryParams.Add("travelMode", Configuration.ApiClient.ParameterToString(travelMode)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIsByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoplacesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoplacesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoplacesResponse)));
            
        }

        /// <summary>
        /// Returns SIC Codes with their Industry Titles and Category Codes mapping Accepts first few partial digits or full SIC codes to filter the response
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <returns>GeoPlaceMetadataResponse</returns>
        public GeoPlaceMetadataResponse GetSICMetadata (string sicCode = null)
        {
             ApiResponse<GeoPlaceMetadataResponse> localVarResponse = GetSICMetadataWithHttpInfo(sicCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns SIC Codes with their Industry Titles and Category Codes mapping Accepts first few partial digits or full SIC codes to filter the response
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <returns>ApiResponse of GeoPlaceMetadataResponse</returns>
        public ApiResponse< GeoPlaceMetadataResponse > GetSICMetadataWithHttpInfo (string sicCode = null)
        {

            var localVarPath = "/geoplaces/v1/metadata/sic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSICMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoPlaceMetadataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoPlaceMetadataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoPlaceMetadataResponse)));
            
        }

        /// <summary>
        /// Returns SIC Codes with their Industry Titles and Category Codes mapping Accepts first few partial digits or full SIC codes to filter the response
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <returns>Task of GeoPlaceMetadataResponse</returns>
        public async System.Threading.Tasks.Task<GeoPlaceMetadataResponse> GetSICMetadataAsync (string sicCode = null)
        {
             ApiResponse<GeoPlaceMetadataResponse> localVarResponse = await GetSICMetadataAsyncWithHttpInfo(sicCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns SIC Codes with their Industry Titles and Category Codes mapping Accepts first few partial digits or full SIC codes to filter the response
        /// </summary>
        /// <exception cref="pb.locationIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <returns>Task of ApiResponse (GeoPlaceMetadataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeoPlaceMetadataResponse>> GetSICMetadataAsyncWithHttpInfo (string sicCode = null)
        {

            var localVarPath = "/geoplaces/v1/metadata/sic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSICMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoPlaceMetadataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoPlaceMetadataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoPlaceMetadataResponse)));
            
        }

    }
}
