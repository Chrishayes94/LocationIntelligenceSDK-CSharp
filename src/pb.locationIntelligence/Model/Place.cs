/* 
 * Location Intelligence APIs
 *
 * Incorporate our extensive geodata into everyday applications, business processes and workflows.
 *
 * OpenAPI spec version: 3.6.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace pb.locationIntelligence.Model
{
    /// <summary>
    /// Place
    /// </summary>
    [DataContract]
    public partial class Place :  IEquatable<Place>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Place" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="Code">Code.</param>
        /// <param name="ClassCode">ClassCode.</param>
        /// <param name="IncorporatedFlag">IncorporatedFlag.</param>
        /// <param name="LastAnnexedDate">LastAnnexedDate.</param>
        /// <param name="LastUpdatedDate">LastUpdatedDate.</param>
        /// <param name="LastVerifiedDate">LastVerifiedDate.</param>
        public Place(string Name = null, string Code = null, string ClassCode = null, string IncorporatedFlag = null, string LastAnnexedDate = null, string LastUpdatedDate = null, string LastVerifiedDate = null)
        {
            this.Name = Name;
            this.Code = Code;
            this.ClassCode = ClassCode;
            this.IncorporatedFlag = IncorporatedFlag;
            this.LastAnnexedDate = LastAnnexedDate;
            this.LastUpdatedDate = LastUpdatedDate;
            this.LastVerifiedDate = LastVerifiedDate;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }
        /// <summary>
        /// Gets or Sets ClassCode
        /// </summary>
        [DataMember(Name="classCode", EmitDefaultValue=false)]
        public string ClassCode { get; set; }
        /// <summary>
        /// Gets or Sets IncorporatedFlag
        /// </summary>
        [DataMember(Name="incorporatedFlag", EmitDefaultValue=false)]
        public string IncorporatedFlag { get; set; }
        /// <summary>
        /// Gets or Sets LastAnnexedDate
        /// </summary>
        [DataMember(Name="lastAnnexedDate", EmitDefaultValue=false)]
        public string LastAnnexedDate { get; set; }
        /// <summary>
        /// Gets or Sets LastUpdatedDate
        /// </summary>
        [DataMember(Name="lastUpdatedDate", EmitDefaultValue=false)]
        public string LastUpdatedDate { get; set; }
        /// <summary>
        /// Gets or Sets LastVerifiedDate
        /// </summary>
        [DataMember(Name="lastVerifiedDate", EmitDefaultValue=false)]
        public string LastVerifiedDate { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Place {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  ClassCode: ").Append(ClassCode).Append("\n");
            sb.Append("  IncorporatedFlag: ").Append(IncorporatedFlag).Append("\n");
            sb.Append("  LastAnnexedDate: ").Append(LastAnnexedDate).Append("\n");
            sb.Append("  LastUpdatedDate: ").Append(LastUpdatedDate).Append("\n");
            sb.Append("  LastVerifiedDate: ").Append(LastVerifiedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Place);
        }

        /// <summary>
        /// Returns true if Place instances are equal
        /// </summary>
        /// <param name="other">Instance of Place to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Place other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.ClassCode == other.ClassCode ||
                    this.ClassCode != null &&
                    this.ClassCode.Equals(other.ClassCode)
                ) && 
                (
                    this.IncorporatedFlag == other.IncorporatedFlag ||
                    this.IncorporatedFlag != null &&
                    this.IncorporatedFlag.Equals(other.IncorporatedFlag)
                ) && 
                (
                    this.LastAnnexedDate == other.LastAnnexedDate ||
                    this.LastAnnexedDate != null &&
                    this.LastAnnexedDate.Equals(other.LastAnnexedDate)
                ) && 
                (
                    this.LastUpdatedDate == other.LastUpdatedDate ||
                    this.LastUpdatedDate != null &&
                    this.LastUpdatedDate.Equals(other.LastUpdatedDate)
                ) && 
                (
                    this.LastVerifiedDate == other.LastVerifiedDate ||
                    this.LastVerifiedDate != null &&
                    this.LastVerifiedDate.Equals(other.LastVerifiedDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.ClassCode != null)
                    hash = hash * 59 + this.ClassCode.GetHashCode();
                if (this.IncorporatedFlag != null)
                    hash = hash * 59 + this.IncorporatedFlag.GetHashCode();
                if (this.LastAnnexedDate != null)
                    hash = hash * 59 + this.LastAnnexedDate.GetHashCode();
                if (this.LastUpdatedDate != null)
                    hash = hash * 59 + this.LastUpdatedDate.GetHashCode();
                if (this.LastVerifiedDate != null)
                    hash = hash * 59 + this.LastVerifiedDate.GetHashCode();
                return hash;
            }
        }
    }

}
