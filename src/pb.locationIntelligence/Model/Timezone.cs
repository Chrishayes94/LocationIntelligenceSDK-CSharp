/* 
 * Location Intelligence APIs
 *
 * Incorporate our extensive geodata into everyday applications, business processes and workflows.
 *
 * OpenAPI spec version: 3.6.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace pb.locationIntelligence.Model
{
    /// <summary>
    /// Timezone
    /// </summary>
    [DataContract]
    public partial class Timezone :  IEquatable<Timezone>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Timezone" /> class.
        /// </summary>
        /// <param name="Country">Country.</param>
        /// <param name="TzValidFrom">TzValidFrom.</param>
        /// <param name="TzValidUntill">TzValidUntill.</param>
        /// <param name="DstRule">DstRule.</param>
        /// <param name="DstValidFrom">DstValidFrom.</param>
        /// <param name="DstValidUntill">DstValidUntill.</param>
        /// <param name="DstStartDateFormat">DstStartDateFormat.</param>
        /// <param name="DstEndDateFormat">DstEndDateFormat.</param>
        /// <param name="DstStartDate">DstStartDate.</param>
        /// <param name="DstStartTime">DstStartTime.</param>
        /// <param name="DstEndTime">DstEndTime.</param>
        /// <param name="DstEndDate">DstEndDate.</param>
        /// <param name="TimezoneName">TimezoneName.</param>
        /// <param name="UtcOffset">UtcOffset.</param>
        /// <param name="DstOffset">DstOffset.</param>
        /// <param name="Timestamp">Timestamp.</param>
        /// <param name="MatchedAddress">MatchedAddress.</param>
        public Timezone(string Country = null, string TzValidFrom = null, string TzValidUntill = null, string DstRule = null, string DstValidFrom = null, string DstValidUntill = null, string DstStartDateFormat = null, string DstEndDateFormat = null, string DstStartDate = null, string DstStartTime = null, string DstEndTime = null, string DstEndDate = null, string TimezoneName = null, long? UtcOffset = null, long? DstOffset = null, long? Timestamp = null, Address MatchedAddress = null)
        {
            this.Country = Country;
            this.TzValidFrom = TzValidFrom;
            this.TzValidUntill = TzValidUntill;
            this.DstRule = DstRule;
            this.DstValidFrom = DstValidFrom;
            this.DstValidUntill = DstValidUntill;
            this.DstStartDateFormat = DstStartDateFormat;
            this.DstEndDateFormat = DstEndDateFormat;
            this.DstStartDate = DstStartDate;
            this.DstStartTime = DstStartTime;
            this.DstEndTime = DstEndTime;
            this.DstEndDate = DstEndDate;
            this.TimezoneName = TimezoneName;
            this.UtcOffset = UtcOffset;
            this.DstOffset = DstOffset;
            this.Timestamp = Timestamp;
            this.MatchedAddress = MatchedAddress;
        }
        
        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// Gets or Sets TzValidFrom
        /// </summary>
        [DataMember(Name="tzValidFrom", EmitDefaultValue=false)]
        public string TzValidFrom { get; set; }
        /// <summary>
        /// Gets or Sets TzValidUntill
        /// </summary>
        [DataMember(Name="tzValidUntill", EmitDefaultValue=false)]
        public string TzValidUntill { get; set; }
        /// <summary>
        /// Gets or Sets DstRule
        /// </summary>
        [DataMember(Name="dstRule", EmitDefaultValue=false)]
        public string DstRule { get; set; }
        /// <summary>
        /// Gets or Sets DstValidFrom
        /// </summary>
        [DataMember(Name="dstValidFrom", EmitDefaultValue=false)]
        public string DstValidFrom { get; set; }
        /// <summary>
        /// Gets or Sets DstValidUntill
        /// </summary>
        [DataMember(Name="dstValidUntill", EmitDefaultValue=false)]
        public string DstValidUntill { get; set; }
        /// <summary>
        /// Gets or Sets DstStartDateFormat
        /// </summary>
        [DataMember(Name="dstStartDateFormat", EmitDefaultValue=false)]
        public string DstStartDateFormat { get; set; }
        /// <summary>
        /// Gets or Sets DstEndDateFormat
        /// </summary>
        [DataMember(Name="dstEndDateFormat", EmitDefaultValue=false)]
        public string DstEndDateFormat { get; set; }
        /// <summary>
        /// Gets or Sets DstStartDate
        /// </summary>
        [DataMember(Name="dstStartDate", EmitDefaultValue=false)]
        public string DstStartDate { get; set; }
        /// <summary>
        /// Gets or Sets DstStartTime
        /// </summary>
        [DataMember(Name="dstStartTime", EmitDefaultValue=false)]
        public string DstStartTime { get; set; }
        /// <summary>
        /// Gets or Sets DstEndTime
        /// </summary>
        [DataMember(Name="dstEndTime", EmitDefaultValue=false)]
        public string DstEndTime { get; set; }
        /// <summary>
        /// Gets or Sets DstEndDate
        /// </summary>
        [DataMember(Name="dstEndDate", EmitDefaultValue=false)]
        public string DstEndDate { get; set; }
        /// <summary>
        /// Gets or Sets TimezoneName
        /// </summary>
        [DataMember(Name="timezoneName", EmitDefaultValue=false)]
        public string TimezoneName { get; set; }
        /// <summary>
        /// Gets or Sets UtcOffset
        /// </summary>
        [DataMember(Name="utcOffset", EmitDefaultValue=false)]
        public long? UtcOffset { get; set; }
        /// <summary>
        /// Gets or Sets DstOffset
        /// </summary>
        [DataMember(Name="dstOffset", EmitDefaultValue=false)]
        public long? DstOffset { get; set; }
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; set; }
        /// <summary>
        /// Gets or Sets MatchedAddress
        /// </summary>
        [DataMember(Name="matchedAddress", EmitDefaultValue=false)]
        public Address MatchedAddress { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Timezone {\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  TzValidFrom: ").Append(TzValidFrom).Append("\n");
            sb.Append("  TzValidUntill: ").Append(TzValidUntill).Append("\n");
            sb.Append("  DstRule: ").Append(DstRule).Append("\n");
            sb.Append("  DstValidFrom: ").Append(DstValidFrom).Append("\n");
            sb.Append("  DstValidUntill: ").Append(DstValidUntill).Append("\n");
            sb.Append("  DstStartDateFormat: ").Append(DstStartDateFormat).Append("\n");
            sb.Append("  DstEndDateFormat: ").Append(DstEndDateFormat).Append("\n");
            sb.Append("  DstStartDate: ").Append(DstStartDate).Append("\n");
            sb.Append("  DstStartTime: ").Append(DstStartTime).Append("\n");
            sb.Append("  DstEndTime: ").Append(DstEndTime).Append("\n");
            sb.Append("  DstEndDate: ").Append(DstEndDate).Append("\n");
            sb.Append("  TimezoneName: ").Append(TimezoneName).Append("\n");
            sb.Append("  UtcOffset: ").Append(UtcOffset).Append("\n");
            sb.Append("  DstOffset: ").Append(DstOffset).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  MatchedAddress: ").Append(MatchedAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Timezone);
        }

        /// <summary>
        /// Returns true if Timezone instances are equal
        /// </summary>
        /// <param name="other">Instance of Timezone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Timezone other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.TzValidFrom == other.TzValidFrom ||
                    this.TzValidFrom != null &&
                    this.TzValidFrom.Equals(other.TzValidFrom)
                ) && 
                (
                    this.TzValidUntill == other.TzValidUntill ||
                    this.TzValidUntill != null &&
                    this.TzValidUntill.Equals(other.TzValidUntill)
                ) && 
                (
                    this.DstRule == other.DstRule ||
                    this.DstRule != null &&
                    this.DstRule.Equals(other.DstRule)
                ) && 
                (
                    this.DstValidFrom == other.DstValidFrom ||
                    this.DstValidFrom != null &&
                    this.DstValidFrom.Equals(other.DstValidFrom)
                ) && 
                (
                    this.DstValidUntill == other.DstValidUntill ||
                    this.DstValidUntill != null &&
                    this.DstValidUntill.Equals(other.DstValidUntill)
                ) && 
                (
                    this.DstStartDateFormat == other.DstStartDateFormat ||
                    this.DstStartDateFormat != null &&
                    this.DstStartDateFormat.Equals(other.DstStartDateFormat)
                ) && 
                (
                    this.DstEndDateFormat == other.DstEndDateFormat ||
                    this.DstEndDateFormat != null &&
                    this.DstEndDateFormat.Equals(other.DstEndDateFormat)
                ) && 
                (
                    this.DstStartDate == other.DstStartDate ||
                    this.DstStartDate != null &&
                    this.DstStartDate.Equals(other.DstStartDate)
                ) && 
                (
                    this.DstStartTime == other.DstStartTime ||
                    this.DstStartTime != null &&
                    this.DstStartTime.Equals(other.DstStartTime)
                ) && 
                (
                    this.DstEndTime == other.DstEndTime ||
                    this.DstEndTime != null &&
                    this.DstEndTime.Equals(other.DstEndTime)
                ) && 
                (
                    this.DstEndDate == other.DstEndDate ||
                    this.DstEndDate != null &&
                    this.DstEndDate.Equals(other.DstEndDate)
                ) && 
                (
                    this.TimezoneName == other.TimezoneName ||
                    this.TimezoneName != null &&
                    this.TimezoneName.Equals(other.TimezoneName)
                ) && 
                (
                    this.UtcOffset == other.UtcOffset ||
                    this.UtcOffset != null &&
                    this.UtcOffset.Equals(other.UtcOffset)
                ) && 
                (
                    this.DstOffset == other.DstOffset ||
                    this.DstOffset != null &&
                    this.DstOffset.Equals(other.DstOffset)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.MatchedAddress == other.MatchedAddress ||
                    this.MatchedAddress != null &&
                    this.MatchedAddress.Equals(other.MatchedAddress)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.TzValidFrom != null)
                    hash = hash * 59 + this.TzValidFrom.GetHashCode();
                if (this.TzValidUntill != null)
                    hash = hash * 59 + this.TzValidUntill.GetHashCode();
                if (this.DstRule != null)
                    hash = hash * 59 + this.DstRule.GetHashCode();
                if (this.DstValidFrom != null)
                    hash = hash * 59 + this.DstValidFrom.GetHashCode();
                if (this.DstValidUntill != null)
                    hash = hash * 59 + this.DstValidUntill.GetHashCode();
                if (this.DstStartDateFormat != null)
                    hash = hash * 59 + this.DstStartDateFormat.GetHashCode();
                if (this.DstEndDateFormat != null)
                    hash = hash * 59 + this.DstEndDateFormat.GetHashCode();
                if (this.DstStartDate != null)
                    hash = hash * 59 + this.DstStartDate.GetHashCode();
                if (this.DstStartTime != null)
                    hash = hash * 59 + this.DstStartTime.GetHashCode();
                if (this.DstEndTime != null)
                    hash = hash * 59 + this.DstEndTime.GetHashCode();
                if (this.DstEndDate != null)
                    hash = hash * 59 + this.DstEndDate.GetHashCode();
                if (this.TimezoneName != null)
                    hash = hash * 59 + this.TimezoneName.GetHashCode();
                if (this.UtcOffset != null)
                    hash = hash * 59 + this.UtcOffset.GetHashCode();
                if (this.DstOffset != null)
                    hash = hash * 59 + this.DstOffset.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.MatchedAddress != null)
                    hash = hash * 59 + this.MatchedAddress.GetHashCode();
                return hash;
            }
        }
    }

}
