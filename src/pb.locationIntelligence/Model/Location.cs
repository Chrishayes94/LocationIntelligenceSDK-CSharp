/* 
 * Location Intelligence APIs
 *
 * Incorporate our extensive geodata into everyday applications, business processes and workflows.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace pb.locationIntelligence.Model
{
    /// <summary>
    /// Location
    /// </summary>
    [DataContract]
    public partial class Location :  IEquatable<Location>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Location" /> class.
        /// </summary>
        /// <param name="Dataset">Dataset.</param>
        /// <param name="Match">Match.</param>
        /// <param name="Address">Address.</param>
        /// <param name="Poi">Poi.</param>
        /// <param name="Distance">Distance.</param>
        /// <param name="UnitTemp">UnitTemp.</param>
        /// <param name="ValueTemp">ValueTemp.</param>
        /// <param name="Geometry">Geometry.</param>
        /// <param name="Place">Place.</param>
        public Location(string Dataset = null, Match Match = null, Address Address = null, Poi Poi = null, Distance Distance = null, string UnitTemp = null, string ValueTemp = null, Geometry Geometry = null, Place Place = null)
        {
            this.Dataset = Dataset;
            this.Match = Match;
            this.Address = Address;
            this.Poi = Poi;
            this.Distance = Distance;
            this.UnitTemp = UnitTemp;
            this.ValueTemp = ValueTemp;
            this.Geometry = Geometry;
            this.Place = Place;
        }
        
        /// <summary>
        /// Gets or Sets Dataset
        /// </summary>
        [DataMember(Name="dataset", EmitDefaultValue=false)]
        public string Dataset { get; set; }
        /// <summary>
        /// Gets or Sets Match
        /// </summary>
        [DataMember(Name="match", EmitDefaultValue=false)]
        public Match Match { get; set; }
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Address Address { get; set; }
        /// <summary>
        /// Gets or Sets Poi
        /// </summary>
        [DataMember(Name="poi", EmitDefaultValue=false)]
        public Poi Poi { get; set; }
        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public Distance Distance { get; set; }
        /// <summary>
        /// Gets or Sets UnitTemp
        /// </summary>
        [DataMember(Name="unitTemp", EmitDefaultValue=false)]
        public string UnitTemp { get; set; }
        /// <summary>
        /// Gets or Sets ValueTemp
        /// </summary>
        [DataMember(Name="valueTemp", EmitDefaultValue=false)]
        public string ValueTemp { get; set; }
        /// <summary>
        /// Gets or Sets Geometry
        /// </summary>
        [DataMember(Name="geometry", EmitDefaultValue=false)]
        public Geometry Geometry { get; set; }
        /// <summary>
        /// Gets or Sets Place
        /// </summary>
        [DataMember(Name="place", EmitDefaultValue=false)]
        public Place Place { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Location {\n");
            sb.Append("  Dataset: ").Append(Dataset).Append("\n");
            sb.Append("  Match: ").Append(Match).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Poi: ").Append(Poi).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  UnitTemp: ").Append(UnitTemp).Append("\n");
            sb.Append("  ValueTemp: ").Append(ValueTemp).Append("\n");
            sb.Append("  Geometry: ").Append(Geometry).Append("\n");
            sb.Append("  Place: ").Append(Place).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Location);
        }

        /// <summary>
        /// Returns true if Location instances are equal
        /// </summary>
        /// <param name="other">Instance of Location to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Location other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Dataset == other.Dataset ||
                    this.Dataset != null &&
                    this.Dataset.Equals(other.Dataset)
                ) && 
                (
                    this.Match == other.Match ||
                    this.Match != null &&
                    this.Match.Equals(other.Match)
                ) && 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                ) && 
                (
                    this.Poi == other.Poi ||
                    this.Poi != null &&
                    this.Poi.Equals(other.Poi)
                ) && 
                (
                    this.Distance == other.Distance ||
                    this.Distance != null &&
                    this.Distance.Equals(other.Distance)
                ) && 
                (
                    this.UnitTemp == other.UnitTemp ||
                    this.UnitTemp != null &&
                    this.UnitTemp.Equals(other.UnitTemp)
                ) && 
                (
                    this.ValueTemp == other.ValueTemp ||
                    this.ValueTemp != null &&
                    this.ValueTemp.Equals(other.ValueTemp)
                ) && 
                (
                    this.Geometry == other.Geometry ||
                    this.Geometry != null &&
                    this.Geometry.Equals(other.Geometry)
                ) && 
                (
                    this.Place == other.Place ||
                    this.Place != null &&
                    this.Place.Equals(other.Place)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Dataset != null)
                    hash = hash * 59 + this.Dataset.GetHashCode();
                if (this.Match != null)
                    hash = hash * 59 + this.Match.GetHashCode();
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                if (this.Poi != null)
                    hash = hash * 59 + this.Poi.GetHashCode();
                if (this.Distance != null)
                    hash = hash * 59 + this.Distance.GetHashCode();
                if (this.UnitTemp != null)
                    hash = hash * 59 + this.UnitTemp.GetHashCode();
                if (this.ValueTemp != null)
                    hash = hash * 59 + this.ValueTemp.GetHashCode();
                if (this.Geometry != null)
                    hash = hash * 59 + this.Geometry.GetHashCode();
                if (this.Place != null)
                    hash = hash * 59 + this.Place.GetHashCode();
                return hash;
            }
        }
    }

}
