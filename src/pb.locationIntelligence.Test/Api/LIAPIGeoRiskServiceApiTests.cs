/* 
 * Location Intelligence APIs
 *
 * Incorporate our extensive geodata into everyday applications, business processes and workflows.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using pb.locationIntelligence.Client;
using pb.locationIntelligence.Api;
using pb.locationIntelligence.Model;

namespace pb.locationIntelligence.Test
{
    /// <summary>
    ///  Class for testing LIAPIGeoRiskServiceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class LIAPIGeoRiskServiceApiTests
    {
        private LIAPIGeoRiskServiceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new LIAPIGeoRiskServiceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of LIAPIGeoRiskServiceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // test 'IsInstanceOfType' LIAPIGeoRiskServiceApi
            Assert.IsInstanceOf(typeof(LIAPIGeoRiskServiceApi), instance, "instance is a LIAPIGeoRiskServiceApi");
        }

        
        /// <summary>
        /// Test GetCrimeRiskByAddress
        /// </summary>
        [Test]
        public void GetCrimeRiskByAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //string type = null;
            //var response = instance.GetCrimeRiskByAddress(address, type);
            //Assert.IsInstanceOf<CrimeRiskResponse> (response, "response is CrimeRiskResponse");
        }
        
        /// <summary>
        /// Test GetCrimeRiskByLocation
        /// </summary>
        [Test]
        public void GetCrimeRiskByLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string longitude = null;
            //string latitude = null;
            //string type = null;
            //var response = instance.GetCrimeRiskByLocation(longitude, latitude, type);
            //Assert.IsInstanceOf<CrimeRiskResponse> (response, "response is CrimeRiskResponse");
        }
        
        /// <summary>
        /// Test GetEarthquakeRiskByAddress
        /// </summary>
        [Test]
        public void GetEarthquakeRiskByAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //string richterValue = null;
            //var response = instance.GetEarthquakeRiskByAddress(address, richterValue);
            //Assert.IsInstanceOf<EarthquakeRiskResponse> (response, "response is EarthquakeRiskResponse");
        }
        
        /// <summary>
        /// Test GetEarthquakeRiskByLocation
        /// </summary>
        [Test]
        public void GetEarthquakeRiskByLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string longitude = null;
            //string latitude = null;
            //string richterValue = null;
            //var response = instance.GetEarthquakeRiskByLocation(longitude, latitude, richterValue);
            //Assert.IsInstanceOf<EarthquakeRiskResponse> (response, "response is EarthquakeRiskResponse");
        }
        
        /// <summary>
        /// Test GetFireRiskByAddress
        /// </summary>
        [Test]
        public void GetFireRiskByAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //var response = instance.GetFireRiskByAddress(address);
            //Assert.IsInstanceOf<FireRiskResponse> (response, "response is FireRiskResponse");
        }
        
        /// <summary>
        /// Test GetFireRiskByLocation
        /// </summary>
        [Test]
        public void GetFireRiskByLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string longitude = null;
            //string latitude = null;
            //var response = instance.GetFireRiskByLocation(longitude, latitude);
            //Assert.IsInstanceOf<FireRiskResponse> (response, "response is FireRiskResponse");
        }
        
        /// <summary>
        /// Test GetFireStationByAddress
        /// </summary>
        [Test]
        public void GetFireStationByAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //string maxCandidates = null;
            //string travelTime = null;
            //string travelTimeUnit = null;
            //string travelDistance = null;
            //string travelDistanceUnit = null;
            //string sortBy = null;
            //var response = instance.GetFireStationByAddress(address, maxCandidates, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, sortBy);
            //Assert.IsInstanceOf<FireStations> (response, "response is FireStations");
        }
        
        /// <summary>
        /// Test GetFireStationByLocation
        /// </summary>
        [Test]
        public void GetFireStationByLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string longitude = null;
            //string latitude = null;
            //string maxCandidates = null;
            //string travelTime = null;
            //string travelTimeUnit = null;
            //string travelDistance = null;
            //string travelDistanceUnit = null;
            //string sortBy = null;
            //var response = instance.GetFireStationByLocation(longitude, latitude, maxCandidates, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, sortBy);
            //Assert.IsInstanceOf<FireStations> (response, "response is FireStations");
        }
        
        /// <summary>
        /// Test GetFloodRiskByAddress
        /// </summary>
        [Test]
        public void GetFloodRiskByAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //string includeZoneDesc = null;
            //var response = instance.GetFloodRiskByAddress(address, includeZoneDesc);
            //Assert.IsInstanceOf<FloodRiskResponse> (response, "response is FloodRiskResponse");
        }
        
        /// <summary>
        /// Test GetFloodRiskByLocation
        /// </summary>
        [Test]
        public void GetFloodRiskByLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string longitude = null;
            //string latitude = null;
            //string includeZoneDesc = null;
            //var response = instance.GetFloodRiskByLocation(longitude, latitude, includeZoneDesc);
            //Assert.IsInstanceOf<FloodRiskResponse> (response, "response is FloodRiskResponse");
        }
        
    }

}
