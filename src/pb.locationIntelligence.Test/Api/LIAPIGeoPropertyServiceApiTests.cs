/* 
 * Location Intelligence APIs
 *
 * Incorporate our extensive geodata into everyday applications, business processes and workflows.
 *
 * OpenAPI spec version: 8.5.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using pb.locationIntelligence.Client;
using pb.locationIntelligence.Api;
using pb.locationIntelligence.Model;

namespace pb.locationIntelligence.Test
{
    /// <summary>
    ///  Class for testing LIAPIGeoPropertyServiceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class LIAPIGeoPropertyServiceApiTests
    {
        private LIAPIGeoPropertyServiceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new LIAPIGeoPropertyServiceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of LIAPIGeoPropertyServiceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // test 'IsInstanceOfType' LIAPIGeoPropertyServiceApi
            Assert.IsInstanceOf(typeof(LIAPIGeoPropertyServiceApi), instance, "instance is a LIAPIGeoPropertyServiceApi");
        }

        
        /// <summary>
        /// Test GetGeoPropertyByAddress
        /// </summary>
        [Test]
        public void GetGeoPropertyByAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //var response = instance.GetGeoPropertyByAddress(address);
            //Assert.IsInstanceOf<GeoPropertyResponse> (response, "response is GeoPropertyResponse");
        }
        
        /// <summary>
        /// Test GetGeoPropertyByAddressBatch
        /// </summary>
        [Test]
        public void GetGeoPropertyByAddressBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GeoPropertyAddressRequest body = null;
            //var response = instance.GetGeoPropertyByAddressBatch(body);
            //Assert.IsInstanceOf<GeoPropertyResponses> (response, "response is GeoPropertyResponses");
        }
        
        /// <summary>
        /// Test GetGeoPropertyByPBKey
        /// </summary>
        [Test]
        public void GetGeoPropertyByPBKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pbKey = null;
            //var response = instance.GetGeoPropertyByPBKey(pbKey);
            //Assert.IsInstanceOf<GeoPropertyPBKeyResponse> (response, "response is GeoPropertyPBKeyResponse");
        }
        
        /// <summary>
        /// Test GetGeoPropertyByPBKeyBatch
        /// </summary>
        [Test]
        public void GetGeoPropertyByPBKeyBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GeoPropertyPBKeyRequest body = null;
            //var response = instance.GetGeoPropertyByPBKeyBatch(body);
            //Assert.IsInstanceOf<GeoPropertyPBKeyResponses> (response, "response is GeoPropertyPBKeyResponses");
        }
        
        /// <summary>
        /// Test GetParcelBoundaryByAddress
        /// </summary>
        [Test]
        public void GetParcelBoundaryByAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //string accept = null;
            //var response = instance.GetParcelBoundaryByAddress(address, accept);
            //Assert.IsInstanceOf<ParcelBoundary> (response, "response is ParcelBoundary");
        }
        
        /// <summary>
        /// Test GetParcelBoundaryByLocation
        /// </summary>
        [Test]
        public void GetParcelBoundaryByLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string longitude = null;
            //string latitude = null;
            //string accept = null;
            //var response = instance.GetParcelBoundaryByLocation(longitude, latitude, accept);
            //Assert.IsInstanceOf<ParcelBoundary> (response, "response is ParcelBoundary");
        }
        
        /// <summary>
        /// Test GetParcelBoundaryByPBKey
        /// </summary>
        [Test]
        public void GetParcelBoundaryByPBKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pbKey = null;
            //string accept = null;
            //var response = instance.GetParcelBoundaryByPBKey(pbKey, accept);
            //Assert.IsInstanceOf<ParcelBoundary> (response, "response is ParcelBoundary");
        }
        
        /// <summary>
        /// Test GetSchoolsByAddress
        /// </summary>
        [Test]
        public void GetSchoolsByAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //string edLevel = null;
            //string schoolType = null;
            //string schoolSubType = null;
            //string gender = null;
            //string assignedSchoolsOnly = null;
            //string districtSchoolsOnly = null;
            //string searchRadius = null;
            //string searchRadiusUnit = null;
            //string travelTime = null;
            //string travelTimeUnit = null;
            //string travelDistance = null;
            //string travelDistanceUnit = null;
            //string travelMode = null;
            //string maxCandidates = null;
            //var response = instance.GetSchoolsByAddress(address, edLevel, schoolType, schoolSubType, gender, assignedSchoolsOnly, districtSchoolsOnly, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, maxCandidates);
            //Assert.IsInstanceOf<SchoolsNearByResponse> (response, "response is SchoolsNearByResponse");
        }
        
        /// <summary>
        /// Test GetSchoolsNearByUsingPBKey
        /// </summary>
        [Test]
        public void GetSchoolsNearByUsingPBKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pbKey = null;
            //string edLevel = null;
            //string schoolType = null;
            //string schoolSubType = null;
            //string gender = null;
            //string assignedSchoolsOnly = null;
            //string districtSchoolsOnly = null;
            //string searchRadius = null;
            //string searchRadiusUnit = null;
            //string travelTime = null;
            //string travelTimeUnit = null;
            //string travelDistance = null;
            //string travelDistanceUnit = null;
            //string travelMode = null;
            //string maxCandidates = null;
            //var response = instance.GetSchoolsNearByUsingPBKey(pbKey, edLevel, schoolType, schoolSubType, gender, assignedSchoolsOnly, districtSchoolsOnly, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, maxCandidates);
            //Assert.IsInstanceOf<SchoolsNearByResponse> (response, "response is SchoolsNearByResponse");
        }
        
    }

}
